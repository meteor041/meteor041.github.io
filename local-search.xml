<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>构建单周期CPUⅡ(add, sub, and, or, slt, beq)</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPUⅡ-add-sub-and-or-slt-beq"><a href="#构建单周期CPUⅡ-add-sub-and-or-slt-beq" class="headerlink" title="构建单周期CPUⅡ(add, sub, and, or, slt, beq)"></a>构建单周期CPUⅡ(add, sub, and, or, slt, beq)</h1><h2 id="新增信号"><a href="#新增信号" class="headerlink" title="新增信号"></a>新增信号</h2><h3 id="RegDst"><a href="#RegDst" class="headerlink" title="RegDst"></a>RegDst</h3><p>1:从指令15:11位中读取数据到A3端口</p><p>0:从指令20:16位中读取数据到A3端口</p><h3 id="ALUSrc"><a href="#ALUSrc" class="headerlink" title="ALUSrc"></a>ALUSrc</h3><ul><li>1:从EXT中读取符号扩展的立即数</li><li>0:从寄存器文件RD2端口中读取数据</li></ul><h3 id="MemtoReg"><a href="#MemtoReg" class="headerlink" title="MemtoReg"></a>MemtoReg</h3><ul><li>1:将从数据存储器中读取的数据输出到WD3</li><li>0:将从ALU中读取的数据输出到WD3</li></ul><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><table><thead><tr><th>指令</th><th>RegDst</th><th>ALUSrc</th><th>MemtoReg</th><th>ALUControl</th></tr></thead><tbody><tr><td>R指令(add, sub, and, or, slt)</td><td>1</td><td>0</td><td>0</td><td>varies</td></tr><tr><td>lw,sw</td><td>0</td><td>1</td><td>1</td><td>010(+)</td></tr><tr><td>beq</td><td>x</td><td>0</td><td>x</td><td>110(-)</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><table><thead><tr><th>ALUOp</th><th>含义</th><th>ALUOp</th><th>含义</th></tr></thead><tbody><tr><td>00</td><td>加法</td><td>10</td><td>依赖于func</td></tr><tr><td>01</td><td>减法</td><td>11</td><td>无定义</td></tr></tbody></table><table><thead><tr><th>ALUOp</th><th>Funct</th><th>ALUControl</th></tr></thead><tbody><tr><td>00</td><td>X</td><td>010(加)</td></tr><tr><td>X1</td><td>X</td><td>110(减)</td></tr><tr><td>1X</td><td>100000(add)</td><td>010(加)</td></tr><tr><td>1X</td><td>100010(sub)</td><td>110(减)</td></tr><tr><td>1X</td><td>100100(and)</td><td>000(与)</td></tr><tr><td>1X</td><td>100101(or)</td><td>001(或)</td></tr><tr><td>1X</td><td>101010(slt)</td><td>111(小于置位)</td></tr></tbody></table><ul><li>这里引用图表来自黑皮书,采用两级判断(先判断ALUOp,再判断ALUControl值),这里我采用另一种方法,对于非R型指令直接输出ALUControl,对R型指令两级判断.(见后图CU)</li></ul><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100000(add,5:0)</p><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100010(sub,5:0)</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100100(and,5:0)</p><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100101(or, 5:0)</p><h3 id="slt"><a href="#slt" class="headerlink" title="slt"></a>slt</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 101010(slt, 5:0)</p><h3 id="beq"><a href="#beq" class="headerlink" title="beq"></a>beq</h3><p>000100(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><h3 id="ALU-1"><a href="#ALU-1" class="headerlink" title="ALU"></a>ALU</h3><p><img src="/images%5Cimage-20240911230937221.png"></p><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p><img src="/images%5Cimage-20240911225650083.png" alt="image-20240911225650083"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="/images%5Cimage-20240911225716228.png" alt="image-20240911225716228"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU(初步,包括lw和sw)</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU-初步-包括lw和sw"><a href="#构建单周期CPU-初步-包括lw和sw" class="headerlink" title="构建单周期CPU(初步,包括lw和sw)"></a>构建单周期CPU(初步,包括lw和sw)</h1><h2 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h2><h3 id="PC-Program-Counter-程序计数器"><a href="#PC-Program-Counter-程序计数器" class="headerlink" title="PC(Program Counter,程序计数器)"></a>PC(Program Counter,程序计数器)</h3><p><img src="/images%5Cimage-20240911170903742.png" alt="image-20240911170903742"></p><h3 id="IM-Instuction-Memory-指令存储器"><a href="#IM-Instuction-Memory-指令存储器" class="headerlink" title="IM(Instuction Memory,指令存储器)"></a>IM(Instuction Memory,指令存储器)</h3><p><img src="/images%5Cimage-20240911200511537.png" alt="image-20240911200511537"></p><h3 id="GRF-Register-File-寄存器文件"><a href="#GRF-Register-File-寄存器文件" class="headerlink" title="GRF(Register File,寄存器文件)"></a>GRF(Register File,寄存器文件)</h3><p><img src="/images%5Cimage-20240911200549683.png" alt="image-20240911200549683"></p><h3 id="DM-Data-Memory-数据存储器"><a href="#DM-Data-Memory-数据存储器" class="headerlink" title="DM(Data Memory,数据存储器)"></a>DM(Data Memory,数据存储器)</h3><p><img src="/images%5Cimage-20240911200524349.png" alt="image-20240911200524349"></p><h2 id="附加部件"><a href="#附加部件" class="headerlink" title="附加部件"></a>附加部件</h2><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><p><img src="/images%5Cimage-20240911200643385.png" alt="image-20240911200643385"></p><h3 id="SPLT-splitter-分离器"><a href="#SPLT-splitter-分离器" class="headerlink" title="SPLT(splitter,分离器)"></a>SPLT(splitter,分离器)</h3><p><img src="/images%5Cimage-20240911200703680.png" alt="image-20240911200703680"></p><h3 id="EXT-extender-扩位器"><a href="#EXT-extender-扩位器" class="headerlink" title="EXT(extender,扩位器)"></a>EXT(extender,扩位器)</h3><p><img src="/images%5Cimage-20240911200729925.png" alt="image-20240911200729925"></p><h3 id="NXTAD-Next-Address-下一个地址的计算器"><a href="#NXTAD-Next-Address-下一个地址的计算器" class="headerlink" title="NXTAD(Next Address,下一个地址的计算器)"></a>NXTAD(Next Address,下一个地址的计算器)</h3><p><img src="/images%5Cimage-20240911200825778.png" alt="image-20240911200825778"></p><h2 id="信号控制分析"><a href="#信号控制分析" class="headerlink" title="信号控制分析"></a>信号控制分析</h2><h3 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h3><table><thead><tr><th>指令</th><th>RegWrite</th><th>ALUControl[2:0]</th><th>MemWrite</th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>010</td><td>0</td></tr><tr><td>sw</td><td>0</td><td>010</td><td>1</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="信号说明"><a href="#信号说明" class="headerlink" title="信号说明"></a>信号说明</h3><h4 id="RegWrite"><a href="#RegWrite" class="headerlink" title="RegWrite"></a>RegWrite</h4><ul><li><p>连接WE3端口</p></li><li><p>1:将数据写入寄存器</p></li><li><p>0:没有写入寄存器文件的数据</p></li></ul><h4 id="ALUControl"><a href="#ALUControl" class="headerlink" title="ALUControl"></a>ALUControl</h4><ul><li>010:ALU实现加法</li></ul><h4 id="MemWrite"><a href="#MemWrite" class="headerlink" title="MemWrite"></a>MemWrite</h4><ul><li>1:向存储器写入数据</li><li>0:没有向存储器写入数据</li></ul><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p>据此,我们可以搭建一个初步的信号控制</p><p>lw:100011(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p>sw:101011 (31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p><img src="/images%5Cimage-20240911203252095.png" alt="image-20240911203252095"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="/images%5Cimage-20240911203327623.png" alt="image-20240911203327623"></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="使用Python批量构造代码"><a href="#使用Python批量构造代码" class="headerlink" title="使用Python批量构造代码"></a>使用Python批量构造代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">s =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;4\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Register\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(T_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Y, Z = <span class="hljs-number">90</span>, <span class="hljs-number">30</span><br><span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    Y += <span class="hljs-number">80</span><br>    T = Y-<span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;Y_&quot;</span>,<span class="hljs-built_in">str</span>(Y)).replace(<span class="hljs-string">&quot;T_&quot;</span>, <span class="hljs-built_in">str</span>(T)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(X)).replace(<span class="hljs-string">&quot;Z_&quot;</span>,<span class="hljs-built_in">str</span>(Z)))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;&lt;comp lib=\&quot;0\&quot; loc=\&quot;(80,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(130,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>H = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    H += <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;H_&quot;</span>,<span class="hljs-built_in">str</span>(H)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(x)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-Array</title>
    <link href="/2024/09/11/Java-Array/"/>
    <url>/2024/09/11/Java-Array/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NewClass[] a;<br>NewClass[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>[<span class="hljs-number">10</span>];<br>NewClass[] c = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br>NewClass[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br></code></pre></td></tr></table></figure><h2 id="返回数组"><a href="#返回数组" class="headerlink" title="返回数组"></a>返回数组</h2><ul><li>Java可以直接返回数组</li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] b = &#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h3 id="Arrays-deepToString"><a href="#Arrays-deepToString" class="headerlink" title="Arrays.deepToString()"></a>Arrays.deepToString()</h3><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-keyword">System</span>.<span class="hljs-keyword">out</span>.println(Arrays.deepToString(a));<br></code></pre></td></tr></table></figure><p>将多维数组转换为字符串.对基本数组和对象数组都起作用.</p><h2 id="Arrays实用功能"><a href="#Arrays实用功能" class="headerlink" title="Arrays实用功能"></a>Arrays实用功能</h2><table><thead><tr><th>System.arraycopy()</th><th>复制数组</th></tr></thead><tbody><tr><td>Arrays.fill()</td><td>以单个值填充数组</td></tr><tr><td>Arrays.equals()</td><td>判断相等</td></tr><tr><td>Arrays.sort()</td><td>排序</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2024/09/11/Java-String/"/>
    <url>/2024/09/11/Java-String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>String对象不可变</strong></p><p>(修改字符串的方法实质上是生成了一个新的String对象)</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        result.append(rand.nextInt(<span class="hljs-number">100</span>));<br>        result.append(<span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    result.delete(result.length()-<span class="hljs-number">2</span>, result.length());<br>    result.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无意识递归"><a href="#无意识递归" class="headerlink" title="无意识递归"></a>无意识递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfiniteRecursion</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; InfiniteRecursion address: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;InfiniteRecursion&gt; v = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;InfiniteRecursion&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InfiniteRecursion</span>());<br>        &#125;<br>        System.out.println(v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// println(v)中调用了InfiniteRecursion类的toString方法,toString方法让this发生了自动类型转换,继续实现toString方法,就这样实现了无限递归.</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>参数,重载版本</th><th>应用</th></tr></thead><tbody><tr><td>length()</td><td></td><td>字符个数</td></tr><tr><td>charAt()</td><td>Int索引</td><td>该缩影位置上的char</td></tr><tr><td>getChar(),getBytes()</td><td></td><td>复制</td></tr><tr><td>toCharArray()</td><td></td><td>生成char[]</td></tr><tr><td>equals(),equalsIgnoreCase()</td><td></td><td>比较字符串</td></tr><tr><td>compareTo()</td><td></td><td>按词典序比较字符串</td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> net.mindview.util.Print.print;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringOperation</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good,world&quot;</span>, s2=<span class="hljs-string">&quot;hello,world&quot;</span>;<br>        print(s1.regionMatches(<span class="hljs-number">5</span>,s2,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//true</span><br>        print(s1.startsWith(<span class="hljs-string">&quot;g&quot;</span>)); <span class="hljs-comment">//true</span><br>        print(s1.endsWith(<span class="hljs-string">&quot;g&quot;</span>));<span class="hljs-comment">//false</span><br>        print(s1.length());<span class="hljs-comment">//10</span><br>    &#125;<br><br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a>格式化说明符</h2><table><thead><tr><th align="center">类型转换字符</th><th></th><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">d</td><td>十进制</td><td align="center">e</td><td>浮点数(科学计数)</td></tr><tr><td align="center">c</td><td>Unicode字符</td><td align="center">x</td><td>十六进制</td></tr><tr><td align="center">b</td><td>Boolean</td><td align="center">h</td><td>散列码</td></tr><tr><td align="center">s</td><td>String</td><td align="center">%</td><td>%</td></tr><tr><td align="center">f</td><td>浮点数</td><td align="center"></td><td></td></tr></tbody></table><h2 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">-?查找带负号的数<br><span class="hljs-string">\\d</span> 表示一位数字<br><span class="hljs-string">\\\\</span> 普通反斜线<br>-?<span class="hljs-string">\\d+</span><br>(-|<span class="hljs-string">\\+)?</span> 一个-或者一个+<br><span class="hljs-string">\\W</span> 非单词字符<br><span class="hljs-string">\\w</span> 单词字符<br><span class="hljs-string">\?</span> 问号<br></code></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><table><thead><tr><th>B</th><th>指定字符</th></tr></thead><tbody><tr><td>\xhh</td><td>十六进制值为oxhh的字符</td></tr><tr><td>\uhhhh</td><td>十六进制值为oxhhhh的字符</td></tr><tr><td>\t</td><td>Tab</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\e</td><td>转义</td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table><thead><tr><th>.</th><th>任意字符</th></tr></thead><tbody><tr><td>[abc]</td><td>a|b|c</td></tr><tr><td>[^abc]</td><td>否定</td></tr><tr><td>[a-zA-Z]</td><td>a-z,A-Z范围</td></tr><tr><td>[abc[hij]]</td><td>a|b|c|h|i|j</td></tr><tr><td>[a-z&amp;&amp;[hij]]</td><td>h|i|j</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>词字符</td></tr><tr><td>\W</td><td>非词字符</td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><table><thead><tr><th>^</th><th>一行的起始</th></tr></thead><tbody><tr><td>$</td><td>一行的结束</td></tr><tr><td>\b</td><td>词的边界</td></tr><tr><td>\B</td><td>非词的边界</td></tr><tr><td>\G</td><td>前一个匹配的结束</td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li>贪婪型:尽可能多的匹配</li><li>勉强型:匹配最少的字数</li><li>占有型:防止回溯,java中才有</li></ul><table><thead><tr><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>符合匹配</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>一个或零个X</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>一个或多个X</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次,且不超过m次</td></tr></tbody></table><h3 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile()"></a>Pattern.compile()</h3><p>编译正则表达式</p><h3 id="Pattern-matcher"><a href="#Pattern-matcher" class="headerlink" title="Pattern.matcher()"></a>Pattern.matcher()</h3><p>生成Matcher对象</p><h3 id="Matcher-matches"><a href="#Matcher-matches" class="headerlink" title="Matcher.matches()"></a>Matcher.matches()</h3><p>判断整个输入字符串是否匹配正则表达式模式</p><h3 id="Matcher-find-Matcher-find-int-i"><a href="#Matcher-find-Matcher-find-int-i" class="headerlink" title="Matcher.find()&#x2F;Matcher.find(int i)"></a>Matcher.find()&#x2F;Matcher.find(int i)</h3><p>查找(int i可以指定起始位置)</p><h3 id="Pattern标记"><a href="#Pattern标记" class="headerlink" title="Pattern标记"></a>Pattern标记</h3><table><thead><tr><th>编译标记</th><th>效果</th></tr></thead><tbody><tr><td>Pattern.CANON_EQ</td><td>规范的等价性</td></tr><tr><td>Pattern.CASE_INSENSITIVE(?i)</td><td>大小写不敏感</td></tr><tr><td>Pattern.COMMENTS(?x)</td><td>忽略空格符,注释</td></tr><tr><td>Pattern.DOTALL(?x)</td><td>“.”匹配所有字符,包括行终结符</td></tr><tr><td>Pattern.MULTILINE(?m)</td><td>^,$匹配一行的开始和结束</td></tr><tr><td>Pattern.UNICODE_CASE(?u)</td><td>大小写不敏感按照Unicode标准</td></tr><tr><td>Pattern.UNIX_LINES(?d)</td><td>.,^,$均只识别行终结符\n</td></tr></tbody></table><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(SimpleRead.input);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stdin.nextLine();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stdin.nextInt();<br><span class="hljs-type">double</span> <span class="hljs-variable">favourite</span> <span class="hljs-operator">=</span> stdin.nextDouble();<br></code></pre></td></tr></table></figure><ul><li>Scanner的构造器可以接受任何类型的输入对象,包括File对象,InputStream对象,String或Readable对象.</li></ul><h3 id="useDelimiter"><a href="#useDelimiter" class="headerlink" title="useDelimiter()"></a>useDelimiter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDelimiter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-string">&quot;12, 42, 12&quot;</span>);<br>        scanner.useDelimiter(<span class="hljs-string">&quot;\\s*,\\s*&quot;</span>);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt())&#123;<br>            System.out.println(scanner.nextInt());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*out:</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">42</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/11/hello-world/"/>
    <url>/2024/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
