<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2024/10/21/Video%20Action%20Recognition/"/>
    <url>/2024/10/21/Video%20Action%20Recognition/</url>
    
    <content type="html"><![CDATA[<h1 id="Video-Action-Recognition"><a href="#Video-Action-Recognition" class="headerlink" title="Video Action Recognition"></a>Video Action Recognition</h1><ul><li><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2></li><li><h2 id="3D-ConvNets"><a href="#3D-ConvNets" class="headerlink" title="3D ConvNets"></a>3D ConvNets</h2><ul><li>large parameters</li></ul></li><li><h2 id="Two-Stream-Network"><a href="#Two-Stream-Network" class="headerlink" title="Two-Stream Network"></a>Two-Stream Network</h2></li><li><h2 id="3D-Fused-Two-Stream"><a href="#3D-Fused-Two-Stream" class="headerlink" title="3D-Fused Two-Stream"></a>3D-Fused Two-Stream</h2></li><li><h2 id="Inflated-3D-I3D"><a href="#Inflated-3D-I3D" class="headerlink" title="Inflated 3D(I3D)"></a>Inflated 3D(I3D)</h2><ul><li>infate to 3D from 2D</li></ul></li><li><h2 id="Temporal-Segment-Networks"><a href="#Temporal-Segment-Networks" class="headerlink" title="Temporal Segment Networks"></a>Temporal Segment Networks</h2><ul><li>segmental consensus</li><li>late fusion</li></ul></li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Two-Stream Inflated 3D ConvNets</title>
    <link href="/2024/10/20/Two-Stream%20Inflated%203D%20ConvNets/"/>
    <url>/2024/10/20/Two-Stream%20Inflated%203D%20ConvNets/</url>
    
    <content type="html"><![CDATA[<h1 id="Two-Stream-Inflated-3D-ConvNets"><a href="#Two-Stream-Inflated-3D-ConvNets" class="headerlink" title="Two-Stream Inflated 3D ConvNets"></a>Two-Stream Inflated 3D ConvNets</h1><blockquote><p>视频分类方向</p><p>采用先进的二维图像识别架构,拓展过滤器和池化内核到3维</p><p>基于双流神经网络:局部运动效果较好 </p><p>论文发表时基于Inception,后改为基于ResNet</p></blockquote><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><blockquote><p>视频领域对于使用2D还是3D暂无定论,一种基本方法是2D网络配上LSTM,LSTM作为时空建模;或者配备光流;或者直接建立3D网络</p></blockquote><h3 id="ConvNet-LSTM"><a href="#ConvNet-LSTM" class="headerlink" title="ConvNet+LSTM"></a>ConvNet+LSTM</h3><p>![image-20241021165310989](Two-Stream Inflated 3D ConvNets&#x2F;image-20241021165310989.png)</p><ul><li>从每一帧中独立提取特征,在整个视频中整合预测</li><li>ConvNet忽略时间结构,因此加入LSTM</li></ul><h3 id="3D-ConvNets"><a href="#3D-ConvNets" class="headerlink" title="3D ConvNets"></a>3D ConvNets</h3><ul><li>直接创建时空数据的分层展示</li><li>因为多了一层内核的维度,其参数比2D卷积网络更为复杂,难以训练</li></ul><h3 id="Two-Stream-Network-双流神经网络"><a href="#Two-Stream-Network-双流神经网络" class="headerlink" title="Two-Stream Network 双流神经网络"></a>Two-Stream Network 双流神经网络</h3><p>![two-stream](Two-Stream Inflated 3D ConvNets&#x2F;image-20241021164927825.png)</p><blockquote><p>由两个2D神经网络构成:</p><p>空间流:学习场景信息</p><p>时间流:分析光流图像,学习时间信息</p><p>最后加权平均</p></blockquote><h3 id="3D-Fused-Two-Stream"><a href="#3D-Fused-Two-Stream" class="headerlink" title="3D-Fused Two-Stream"></a>3D-Fused Two-Stream</h3><p>![image-20241021165442590](Two-Stream Inflated 3D ConvNets&#x2F;image-20241021165442590.png)</p><blockquote><p>提前融合(fuse),用一个3D卷积神经网络输出结果</p></blockquote><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="inflate"><a href="#inflate" class="headerlink" title="inflate"></a>inflate</h3><blockquote><p>将2D的Kernel,pooling layer直接转换为3D</p></blockquote><h3 id="bootstrapping"><a href="#bootstrapping" class="headerlink" title="bootstrapping"></a>bootstrapping</h3><blockquote><p>将图像复制N次形成一个无聊视频,将3D模型在ImageNet上预训练,以满足无聊视频的不动点.</p><p>途径:将图片的参数复制N次(N是时间维度),再除以N实现缩放</p><p>确保卷积filter对图像和视频输入的处理一致</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSSPT</title>
    <link href="/2024/10/20/LSSPT/"/>
    <url>/2024/10/20/LSSPT/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="conventional-deep-learning-based-methods"><a href="#conventional-deep-learning-based-methods" class="headerlink" title="conventional deep learning-based methods"></a>conventional deep learning-based methods</h2><ul><li>LSTM, GCN</li><li>explore group activity representations under supervised or weakly supervised modes</li><li>require manually annotated personal action, labels(数据标记?)</li></ul><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><ul><li>NLP:unsupervised</li><li>SSL developes</li><li>SSRL, the temporal evolution (时间演变) not yet been explicitly exploited</li><li>predictive coding scheme (预测编码方案)</li></ul><h2 id="group-activities"><a href="#group-activities" class="headerlink" title="group activities"></a>group activities</h2><ul><li>more complex state dynamics</li><li>lead to failure of SSRL using RNN(复杂序列<strong>关系</strong>建模困难)</li><li>LSTM相关模型缺乏注意力机制(attention to the history sequence dependencies)</li><li>Transformer networks in NLP restricted to normal data</li><li>人类在长周期group activity中重复某种运动</li><li><strong>exploiting multiple ranges of historical information</strong></li></ul><h2 id="LSSPT"><a href="#LSSPT" class="headerlink" title="LSSPT"></a>LSSPT</h2><h3 id="encoder-decoder-framework"><a href="#encoder-decoder-framework" class="headerlink" title="encoder-decoder framework"></a>encoder-decoder framework</h3><ul><li>encoder: summarize group state</li><li>decoder: anticipate the state in the future</li><li>based on relation graph and casual Transformer</li></ul><h3 id="sparse-graph-Transformer"><a href="#sparse-graph-Transformer" class="headerlink" title="sparse graph Transformer"></a>sparse graph Transformer</h3><ul><li>spatial state context in short time</li></ul><h3 id="casual-temporal-Transformer-CTT"><a href="#casual-temporal-Transformer-CTT" class="headerlink" title="casual temporal Transformer(CTT)"></a>casual temporal Transformer(CTT)</h3><ul><li>long range temporal dynamics</li></ul><h1 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h1><h2 id="predictive-coding"><a href="#predictive-coding" class="headerlink" title="predictive coding"></a>predictive coding</h2><ul><li>时空编码函数</li><li>预测函数</li><li>优化函数</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><ul><li>特征提取<ul><li>I3D预训练模型提取人物特征</li></ul></li><li>长短状态编码</li><li>长短状态解码</li><li>推理训练<ul><li>重构损失reconstructed loss</li><li>对比损失contrasitive loss </li><li>对抗损失adversarial loss</li></ul></li></ul><h2 id="Long-Short-State-Encoder"><a href="#Long-Short-State-Encoder" class="headerlink" title="Long-Short State Encoder"></a>Long-Short State Encoder</h2><h3 id="sparse-graph-transformer"><a href="#sparse-graph-transformer" class="headerlink" title="sparse graph transformer"></a>sparse graph transformer</h3><h4 id="building"><a href="#building" class="headerlink" title="building"></a>building</h4><p>${p{}^t_i}{}^N_{i&#x3D;1}$,$p_i\in \mathit R^d$表示第i个人的特征</p><p>$稀疏矩阵G^t&#x3D;{V^t,E^t}$,$V_t&#x3D;{p{}^t_i}{}^N_{i&#x3D;1}$表示节点,$E_t&#x3D;{(i,j)|p_i,p_j 在n时刻连结}$</p><p>$节点的邻居Nei(i,t)&#x3D;{p^t_j}{}^M_{i&#x3D;1},其中p^t_j满足(i,j)\in E^t$</p><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>通过邻居节点传递的key,自身节点的equry更新节点信息,由原先的$h_i$变为$\hat{h_i}$<br>$$<br>\begin{split}<br>&amp;\hat{h_i}&#x3D;softmax(\frac{[q_i^Tk_j]_ {j&#x3D;1:N} }{ \sqrt{d_k} })[v_i]^N_{i&#x3D;1}\<br>&amp;q_i表示query\<br>&amp;k_j表示key\<br>&amp;v_i表示value\<br>\end{split}<br>$$</p><h4 id="group-state-modeling"><a href="#group-state-modeling" class="headerlink" title="group state modeling"></a>group state modeling</h4><p>$$<br>\begin{split}<br>&amp;小组状态g_t&#x3D;P_{max}(Norm(f_o(\hat{p_i}),…,f_o(\hat{p_N}))) \<br>&amp;P_{max}池化层 \<br>&amp;Norm层标准化 \<br>&amp;f_o全连接层 \<br>\end{split}<br>$$</p><h4 id="casual-temporal-transformer"><a href="#casual-temporal-transformer" class="headerlink" title="casual temporal transformer"></a>casual temporal transformer</h4><ul><li>masked Transformer<ul><li>为绝对帧添加时间位置编码</li><li>多层CTT层传递,masked multihead attention, LayerNorm(层归一化),MLP(what???)</li><li>mask保证模型只注意部分特定输入(类似于LLM中后文不会影响前文语素的注意力分配机制)</li></ul></li></ul><h2 id="Long-Short-State-Decoder"><a href="#Long-Short-State-Decoder" class="headerlink" title="Long-Short State Decoder"></a>Long-Short State Decoder</h2><ul><li>state attention modules: 建立长短期之间的依赖</li><li>state update modules: 输出长短期信息</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java HashMap</title>
    <link href="/2024/10/12/Java-HashMap/"/>
    <url>/2024/10/12/Java-HashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>字典</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">HashMap&lt;Integer, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.put(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>hm.putIfAbsent(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//仅在hm原本不包含2对应的键值对时执行添加2-3键值对的操作</span><br><br><span class="hljs-comment">// 添加所有键值对</span><br>HashMap&lt;Integer, Integer&gt; hm2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hm2.putAll(hm);<br></code></pre></td></tr></table></figure><h3 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.remove(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="访问键值对"><a href="#访问键值对" class="headerlink" title="访问键值对"></a>访问键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(hm.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 打印2对应的元素</span><br></code></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对键集合遍历for循环</span><br><span class="hljs-keyword">for</span> (Integer i : hm.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(i));<br>&#125;<br><br><span class="hljs-comment">// iterator</span><br>Iterator&lt;Integer&gt; it = hm.keySet().iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + key + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(key));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.merge(key, value, remappingFunction)<br></code></pre></td></tr></table></figure><blockquote><p>如果 key 对应的 value 不存在，则返回该 value 值，如果存在，则返回通过 remappingFunction 重新计算后的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm2.merge(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,(k,v)-&gt;v+<span class="hljs-number">1</span>); <span class="hljs-comment">// 若keySet中不包含1,则插入1-1键值对,若有则对v加一</span><br></code></pre></td></tr></table></figure><h3 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.compute(K key, BiFunction remappingFunction);<br></code></pre></td></tr></table></figure><blockquote><p>对<code>hashMap</code>中的指定<code>key</code>的值进行重新计算</p><p>若<code>key</code>对应的<code>value</code>不存在,则返回<code>null</code>,若存在则返回通过<code>remappingFunction</code>重新计算后的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newPrice</span> <span class="hljs-operator">=</span> prices.compute(<span class="hljs-string">&quot;Shoes&quot;</span>, (key, value) -&gt; value - value * <span class="hljs-number">10</span>/<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-PriorityQueue</title>
    <link href="/2024/10/12/PriorityQueue/"/>
    <url>/2024/10/12/PriorityQueue/</url>
    
    <content type="html"><![CDATA[<h1 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote><p>大顶堆、小顶堆</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(); <span class="hljs-comment">// 小根堆(顶端元素为最小)</span><br><br>PriorityQueue&lt;Integer&gt; numbers1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;b-a); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 指定数量</span><br>PriorityQueue&lt;Integer&gt; numbers2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">10</span>); <span class="hljs-comment">// 指定容量可以避免执行扩容操作,加快速度</span><br><br><span class="hljs-comment">// 使用Comparator</span><br>PriorityQueue&lt;Integer&gt; numbers3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(<span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2-o1; <span class="hljs-comment">// &gt;=0即表示不用交换</span><br>            &#125;<br>        &#125;); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 通过Collection作为参数创建</span><br>ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>));<br>PriorityQueue&lt;Integer&gt; numbers4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(arr);<br></code></pre></td></tr></table></figure><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><blockquote><p><code>add()</code>,<code>offer()</code>两者均为入队方法，仅在处理队列已满的情况时有所不同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br><br>numbers.add(<span class="hljs-number">4</span>); <span class="hljs-comment">// 队列已满时引发异常</span><br>numbers.add(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [3, 4]</span><br><br>numbers.offer(<span class="hljs-number">1</span>); <span class="hljs-comment">// 队列已满时返回false</span><br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [1, 4, 3]</span><br></code></pre></td></tr></table></figure><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><blockquote><p><code>remove()</code>,<code>poll()</code>在处理队列为空时不一样：<code>remove()</code>抛出异常，<code>poll()</code>返回<code>null</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">numbers.remove();<br><br>numbers.poll(); <span class="hljs-comment">// 推荐这种方法</span><br></code></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><blockquote><p><code>peek()</code>:队列为空时返回<code>null</code></p><p><code>element()</code>:队列为空时抛出异常</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">numbers.peek()<span class="hljs-comment">;</span><br><br>numbers.element()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><p><code>clear()</code></p><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><p><code>isEmpty()</code></p><p>访问元素个数</p><p><code>size()</code></p><h2 id="自动扩容机制"><a href="#自动扩容机制" class="headerlink" title="自动扩容机制"></a>自动扩容机制</h2><blockquote><p>源码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity of the array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> queue.length;<br>    <span class="hljs-comment">// Double size if small; else grow by 50%</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> ArraysSupport.newLength(oldCapacity,<br>            minCapacity - oldCapacity, <span class="hljs-comment">/* minimum growth */</span><br>            oldCapacity &lt; <span class="hljs-number">64</span> ? oldCapacity + <span class="hljs-number">2</span> : oldCapacity &gt;&gt; <span class="hljs-number">1</span><br>                                       <span class="hljs-comment">/* preferred growth */</span>);<br>    queue = Arrays.copyOf(queue, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>旧容量在64以下增加2,否则乘以2</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P1总结</title>
    <link href="/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="往年題"><a href="#往年題" class="headerlink" title="往年題"></a>往年題</h1><h2 id="允许括号的表达式状态机"><a href="#允许括号的表达式状态机" class="headerlink" title="允许括号的表达式状态机"></a>允许括号的表达式状态机</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=145&PieId=1202">P1_L7_允许括号的表达式状态机 - 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> string2(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> clr,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out<br>    );<br>    <span class="hljs-keyword">parameter</span> START = <span class="hljs-number">3&#x27;B000</span>,<br>              DIGIT = <span class="hljs-number">3&#x27;B001</span>,<br>              CAL = <span class="hljs-number">3&#x27;B010</span>,<br>              LEFT_BRACKET = <span class="hljs-number">3&#x27;B011</span>,<br>              LEFT_DIGIT = <span class="hljs-number">3&#x27;B100</span>,<br>              LEFT_CAL = <span class="hljs-number">3&#x27;B101</span>,<br>              ILLEGAL = <span class="hljs-number">3&#x27;B110</span>;<br>    <span class="hljs-keyword">parameter</span> zero = <span class="hljs-number">48</span>,<br>              nine = <span class="hljs-number">57</span>,<br>              left = <span class="hljs-number">40</span>,<br>              right = <span class="hljs-number">41</span>,<br>              mult_ = <span class="hljs-number">42</span>,<br>              plus_ = <span class="hljs-number">43</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> num;<br>    <span class="hljs-keyword">reg</span> mark;<br>    <span class="hljs-keyword">reg</span> left_bracket;<br>    <span class="hljs-keyword">reg</span> right_bracket;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> clr) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (clr)<span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        num = (in &gt;= zero &amp;&amp; in &lt;= nine) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        mark = (in == mult_ || in == plus_) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        left_bracket = (in == left) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        right_bracket = (in == right) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">case</span> (state)<br>            START:<span class="hljs-keyword">begin</span><br>              state = num ? DIGIT:<br>                      left_bracket ? LEFT_BRACKET:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? CAL: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            CAL:<span class="hljs-keyword">begin</span><br>              state = left_bracket ? LEFT_BRACKET : <br>                      num ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            LEFT_BRACKET:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? LEFT_CAL :<br>                      right_bracket ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_CAL:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT : ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            ILLEGAL:<span class="hljs-keyword">begin</span><br>              state = ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> out = (state == DIGIT) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="投票表決器"><a href="#投票表決器" class="headerlink" title="投票表決器"></a>投票表決器</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=424&PieId=1202">P1_L1_vote_plus - 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> VoterPlus(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] np,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] vip,<br>    <span class="hljs-keyword">input</span> vvip,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] result<br>    );<br><br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] last_np;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] last_vip;<br>    <span class="hljs-keyword">reg</span> last_vvip;<br>    <span class="hljs-keyword">integer</span> temp;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> reset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>        last_np = <span class="hljs-number">32&#x27;b0</span>;<br>        last_vip = <span class="hljs-number">8&#x27;b0</span>;<br>        last_vvip = <span class="hljs-number">1&#x27;b0</span>;<br>        result = <span class="hljs-number">8&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span>:c<br>          temp = temp + ((last_np[i] ^ np[i]) &amp; np[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + temp;<br><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>:cycle<br>          temp = temp + ((last_vip[i] ^ vip[i]) &amp; vip[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + <span class="hljs-number">4</span> * temp;<br><br>        result = result + <span class="hljs-number">16</span> * ((last_vvip ^ vvip) &amp; vvip);<br>        last_np = last_np | np;<br>        last_vip = last_vip | vip;<br>        last_vvip = last_vvip | vvip;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="上机"><a href="#上机" class="headerlink" title="上机"></a>上机</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote><p>三道题,前一道是考察for循环的基本语法,后两道考察状态机</p></blockquote><ul><li>题目1:输入两个32位数,将其中一个数的二进制位逆序排列,比较两个数同一二进制位上出现不同位的次数</li><li>题目2:判断一串由0,1组成的字符串是否符合如下要求:<ul><li>将相邻的相同数字合成一组,相邻组的长度奇偶性一定不同</li></ul></li><li>题目3:输入格式为<code>&#123;xxxx:xxxx,xxxx:xxxx,&#125;</code>的字符串,记录当前的键值对数目和自上次复位以来的单个集合中最大键值对数目</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>使用组合逻辑,在always @(*)块中写一个for循环</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(*)<span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        cnt = (a[i] ^ b[i] == <span class="hljs-number">1</span>) ? cnt + <span class="hljs-number">1</span> : cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>设置状态:</p><p>xx_xx中,下划符前的表示上一个集合的奇偶性(或者NULL表示暂无上一个集合,下划符后的表示当前集合的集合的奇偶性</p><p>状态转换图如下:</p></blockquote><img src="935df7948fedda6ff43aeb9df3a7759.jpg" alt="状态转换图" style="zoom: 25%;"><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>考场没有写出来,错在了对于异常输入的处理办法.该题已经指明了<code>&#123;xxxx:xxx,xxxx:xxxx&#125;</code>的结构是固定的,测试数据不会出现<code>&#123;</code>,<code>&#125;</code>,<code>:</code>,<code>,</code>这四个字符的丢失,所以当存在键值对不满足条件后,应当等待下一个<code>,</code>的输入</p><p>例如在<code>&#123;a:,b:12,&#125;</code>中,<code>a:</code>明显不是一个符合要求的键值对(缺乏<code>value</code>),但这时我们必须保证后面的键值对能计入,需要等待<code>,</code>输入后进入新一轮输入键值对中.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P2总结</title>
    <link href="/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MIPS的考察方式为将C语言代码翻译成MIPS汇编语言,其中对for循环的翻译、递归函数的转换最为重要</p></blockquote><h1 id="往年题"><a href="#往年题" class="headerlink" title="往年题"></a>往年题</h1><h2 id="删数问题"><a href="#删数问题" class="headerlink" title="删数问题"></a>删数问题</h2><blockquote><p>键盘输入一个高精度的正整数 <code>n</code>（不超过 250 位），去掉其中任意 <code>k</code>个数字后剩下的数字按原左右次序将组成一个新的非负整数。编程对给定的 <code>n</code> 和 <code>k</code>，寻找一种方案使得剩下的数字组成的新数最小。</p></blockquote><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.com.cn/problem/P1106">P1106 删数问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>已知我们要删掉m个数,我们要使得新数字最小,一定会选择前m+1位数中最小的那位作为最高位,设该位为k,则k之前的位均可以删去,保留第i位,对于第i+1位到末尾的数据,我们将m修改为m-(i-1)(因为此时数字已经删去i-1位),采取同样的上述操作,直到m&#x3D;0.</p></blockquote><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,a[<span class="hljs-number">257</span>],rest,t=<span class="hljs-number">1</span>,minp,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br>string num;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;num&gt;&gt;k;<br>    n=num.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)a[i]=num[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    rest=n-k;<br>    <span class="hljs-keyword">while</span>(cnt&lt;rest)&#123;<br>        minp=t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;=k+t;++i)<span class="hljs-keyword">if</span>(a[minp]&gt;a[i])minp=i;<br>        <span class="hljs-keyword">if</span>(a[minp])flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(flag)cout&lt;&lt;a[minp];<br>        k-=minp-t;<br>        t=minp<span class="hljs-number">+1</span>;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1106</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> n.length();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            a[i] = n.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rest</span> <span class="hljs-operator">=</span> len - k;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> minp;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (cnt &lt; rest) &#123;<br>            minp = t;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> t; i &lt;= k + t; i++) &#123;<br>                minp = a[minp] &gt; a[i] ? i : minp;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[minp] &gt; <span class="hljs-number">0</span>) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(a[minp]);<br>            &#125;<br>            k -= minp - t;<br>            t = minp + <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            System.out.print(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="MIPS答案"><a href="#MIPS答案" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 600<br><br>.macro push(%i)<br>subi $sp, $sp, 4<br>sw %i, 0($sp)<br>.end_macro<br><br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%i)<br>li $v0, 5<br>syscall<br>move %i, $v0<br>.end_macro<br><br>.macro printInt(%i)<br>li $v0, 1<br>move $a0, %i<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 11<br>move $a0, %c<br>syscall<br>.end_macro<br><br>.macro inputStr(%str)<br>li $v0, 12<br>la $a0, %str<br>li $a1, 150<br>syscall<br>.end_macro<br><br># 使用$t7($t7=i) for (int i = t; i &lt;= k + t; i++)<br>.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bgt $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#使用$t7(记录字符串个数),$t6(记录字符当前对应位置)<br>.macro input_char_begin(%startLabel, %endLabel)<br>li $t7, -1<br>li $t6, -4<br>%startLabel:<br>beq $v0, 10, %endLabel<br>.end_macro<br><br>.macro input_char_end(%startLabel, %endLabel, %str, %len)<br>addi $t7, $t7, 1<br>addi $t6, $t6, 4<br>sw $v0, %str($t6)<br>j %startLabel<br>%endLabel:<br>move %len, $t7<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %cnt, %rest)<br>%startLabel:<br>bge %cnt, %rest, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_data(%arr, %i, %data)<br>push($t4)<br>li $t5, 4<br>mult $t5, %i<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t4)<br>.end_macro<br><br>.text<br># 读入字符串a<br>input_char_begin(start1,end1)<br>li $v0, 12 # 读入一个字符到$v0<br>syscall<br>input_char_end(start1,end1,a,$s0)<br>#a记录字符串位置,$s0记录字符串长度(len)<br><br># 读入k<br>inputInt($t0) #$t0=k,要删去的字符个数<br>#48-57<br>#rest = $s1<br>sub $s1, $s0, $t0 # rest = len - k<br>#cnt = $t1 = 0<br>li $t1, 0<br># minp = $t2 = 0<br>li $t2, 0<br># t = $t3 = 0<br>li $t3, 0<br>#flag = $t4 = 0 (false)<br>li $t4, 0<br><br>while_begin(start2,end2,$t1,$s1)<br>move $t2, $t3 # minp = t<br>for_begin(start3, end3,$t3,$t0)<br># minp = a[minp] &gt; a[i] ? i : minp;<br>push($s4)<br>push($s5)<br>load_data(a,$t2,$s4) # $s4 = a[minp]<br>load_data(a,$t7,$s5) # $s5 = a[i], <br>bgt $s4, $s5, update<br>j skip<br>update:<br>move $t2, $t7 # minp = i<br>skip:<br>pop($s5)<br>pop($s4)<br>for_end(start3,end3)<br><br>#printInt($t2)<br>load_data(a, $t2, $t5) # $t5 = a[minp]<br>#printInt($t5)<br>bgt $t5, $0, flag_true<br>j skip2<br>flag_true:<br>li $t4, 1 # flag = true;<br>skip2:<br><br>beq $t4, $0, skip3  # if (flag) print(a[minp])<br>load_data(a, $t2, $t5)# $t5 = a[minp]<br>printChar($t5)<br>skip3:<br><br>sub $t0, $t0, $t2 # k = k - minp<br>add $t0, $t0, $t3 # k = k + t<br>addi $t3, $t2, 1 # t = minp + 1<br>addi $t1, $t1, 1 # cnt++<br>while_end(start2,end2)<br><br>beq $t4, 1, skip4<br>li $s2, 0<br>printInt($s2)<br>skip4:<br><br><br></code></pre></td></tr></table></figure><h2 id="加法拆分"><a href="#加法拆分" class="headerlink" title="加法拆分"></a>加法拆分</h2><blockquote><p>给一个数n,<strong>按照字典序</strong>输出它可能的加法拆分</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><blockquote><p>采用dfs</p></blockquote><h3 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">5000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[cnt - <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> last)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span>)<br>    &#123;<br>        printArr(arr, cnt);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = last; k &lt;= left; k++)<br>    &#123;<br>        arr[cnt] = k;<br>        dfs(arr, cnt + <span class="hljs-number">1</span>, left - k, k);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    dfs(arr, <span class="hljs-number">0</span>, n, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-1"><a href="#MIPS答案-1" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 用于存放待打印数字的数组<br>enter: .word &#x27;\n&#x27;<br>plus: .word  &#x27;+&#x27;<br>test: .word &#x27;t&#x27;<br><br>#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br><br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>#读入整数<br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>#打印整数<br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br># 打印字符<br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#结束程序<br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>#for循环<br>.macro for_begin(%startLabel, %endLabel, %start, %end)<br>move $t7, %start<br>%startLabel:<br>bgt $t7, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 将数据存在arr的指定位置<br>.macro store_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>sw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br># arr的指定位置读取数据<br>.macro load_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br>#打印指定长度的数组<br>.macro printArr(%arr, %cnt)<br>li $t4, 0<br>print_loop:<br>bge $t4, %cnt, print_end<br><br>load_data(%arr, $t6, $t4)<br>printInt($t6)<br>addi $t4, $t4, 1<br>bge $t4, %cnt, print_end<br>printChar(plus)<br>print_skip:<br>j print_loop<br>print_end:<br>printChar(enter)<br>.end_macro<br><br># 数据指代<br>.eqv n $s0<br>.eqv cnt $a1<br>.eqv left $a2<br>.eqv last $a3<br><br>.text<br>inputInt(n)<br>li cnt, 0<br>move left, n<br>li last, 1<br>jal dfs<br>done<br><br>dfs:<br>push($ra)<br>beq left, $0, dfs_return<br>for_begin(dfs_start,dfs_end,last,left)<br># $t7 = k<br>store_data(arr, $t7, cnt)<br>push(cnt)<br>push(left)<br>push(last)<br>push($t7)<br>addi cnt, cnt, 1<br>sub left, left, $t7<br>move last, $t7<br>jal dfs<br>pop($t7)<br>pop(last)<br>pop(left)<br>pop(cnt)<br>for_end(dfs_start, dfs_end)<br>j dfs_done<br><br>dfs_return:<br>printArr(arr, cnt)<br><br>dfs_done:<br>pop($ra)<br>jr $ra<br><br><br></code></pre></td></tr></table></figure><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ul><li><code>$a0</code>作为<code>Syscall</code>打印时需要的参数,要避免用户自定义函数中的参数含有<code>$a0</code>,产生不必要的冲突.或者修改<code>print</code>函数,采用入栈+退栈的方式(该方法更安全):</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro printInt(%int)<br>push($a0)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>pop($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>字符应当被指定为<code>word</code>在<code>MIP32</code>中占<code>4</code>字节,即<code>32</code>位,打印字符方式为:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>plus: .word &#x27;+&#x27;<br>.text<br>li $v0, 4<br>la $a0, plus<br>syscall<br></code></pre></td></tr></table></figure><h2 id="双关键词排序"><a href="#双关键词排序" class="headerlink" title="双关键词排序"></a>双关键词排序</h2><h3 id="冒泡排序基础"><a href="#冒泡排序基础" class="headerlink" title="冒泡排序基础"></a>冒泡排序基础</h3><blockquote><p>为了降低翻译难度,我在这里删去了用来决定提前推出排序的标记<code>flag</code>,同时一定程度上增加了算法的时间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, k, temp;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[k] &gt; A[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                temp = A[k];<br>                A[k] = A[k + <span class="hljs-number">1</span>];<br>                A[k + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>翻译成MIPS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>arr: .space 400<br>space: .word &#x27; &#x27;<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(arr, i)<br>for_end(start0, end0, i)<br><br>#bubble sort<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(arr, k, A_k)<br>addi k_1, k, 1<br>load_data(arr, k_1, A_k_1)<br>bgt A_k, A_k_1, swp<br>j skip<br>swp:<br>swap(arr,k,k_1)<br>skip:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#打印数组<br>for_begin(start3, end3, i, $0, n)<br>print_arr_element(arr, i)<br>printChar(space)<br>for_end(start3, end3, i)<br></code></pre></td></tr></table></figure><h3 id="稍作修改的答案"><a href="#稍作修改的答案" class="headerlink" title="稍作修改的答案"></a>稍作修改的答案</h3><blockquote><p>本题使用具有稳定性的冒泡排序,先对<code>B</code>数组从小到大进行排序,再对<code>A</code>数组进行相同操作,但在交换数组元素时对另一个数组也要进行相同位置的交换操作.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 双关键字排序*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> *q)</span><br>&#123;<br>    <span class="hljs-type">int</span> temp = *p;<br>    *p = *q;<br>    *q = temp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> i, k;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[k] &gt; b[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[k] &gt; a[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a[i], b[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>翻译成MIPS汇编语言,关键在<code>swap</code>和双层<code>for</code>循环上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>A: .space 400<br>B: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入A,B数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(A, i)<br>input_arr_element(B, i)<br>for_end(start0, end0, i)<br><br>#先对B数组进行冒泡排序(从小到大)<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(B, k, A_k)<br>addi k_1, k, 1<br>load_data(B, k_1, A_k_1)<br>bgt A_k, A_k_1, swp1<br>j skip1<br>swp1:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip1:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#再对A数组进行冒泡排序(从小到大)<br>for_begin_decrease(start3,end3,i,n,$0)<br>for_begin(start4,end4,k,$0,i)<br>load_data(A, k, A_k)<br>addi k_1, k, 1<br>load_data(A, k_1, A_k_1)<br>bgt A_k, A_k_1, swp2<br>j skip2<br>swp2:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip2:<br>for_end(start4,end4,k)<br>for_end_decrease(start3,end3,i)<br><br>#打印数组<br>for_begin(start5, end5, i, $0, n)<br>print_arr_element(A, i)<br>printChar(space)<br>print_arr_element(B,i)<br>printChar(enter)<br>for_end(start5, end5, i)<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,宏可以大幅降低拓展代码的难度</p></blockquote><h2 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a>字符统计</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=35&PieId=1202">P2_L1_calculate - 系统能力课程实验平台 (buaa.edu.cn)</a></p><blockquote><p>使用MIPS汇编语言写一个具有字符统计功能的汇编程序(不考虑延迟槽)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>本题要实现一个计数器,这在C语言中通常使用字典实现,而要在MIPS汇编语言直接构建这样一个部件难度较大,我们可以开两个数组<code>arr</code>与<code>order</code>,<code>arr</code>记录字符对应的出现次数,<code>order</code>记录各个字符的依次出现顺序</p></blockquote><h3 id="MIPS答案-2"><a href="#MIPS答案-2" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 26 * 4<br>order: .space 200<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br><br># 别名<br>.eqv n, $s0 # 输入字符总数<br>.eqv ct $s1 # 用于记录输入的字符种类<br>.eqv i, $t0 # 用于for循环<br>.eqv k, $t1 # 用于for循环<br>.eqv t, $t3 # 用于for循环<br>.eqv flag, $s2 # 标志<br><br>.macro for_begin(%startLabel, %endLabel, %i,%start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#将数字转化为对应字符(0-&#x27;a&#x27;)<br>.macro printCharFromInt(%int)<br>addi $a0, %int, 97<br>li $v0, 11<br>syscall<br>.end_macro<br><br>.macro store_data(%arr,%index,%value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro put(%arr, %order, %k)<br>subi %k, %k, 97 <br>put_order(%order, %k)<br><br>load_data(%arr, %k, $t7)<br>addi $t7, $t7, 1<br>store_data(%arr, %k, $t7)<br>.end_macro<br><br>.macro put_order(%order, %k)<br>li flag, 1 # 标记当前字符是否未出现<br>for_begin(start10, end10, t, $0, ct)<br>load_data(order, t, $t7)<br>beq $t7, %k, yes # 找到了<br>j put_order_end<br>yes:<br>li flag, 0 # 将标记置为0<br>put_order_end:<br>for_end(start10, end10, t)<br>beq flag, $0, skip<br>store_data(order, ct, %k) # 将新的字符种类添加到order中<br>addi ct, ct, 1<br>skip:<br>.end_macro<br><br>.macro print_arr_element(%arr, %order, %k)<br>load_data(%order, %k, $t5) # %k是[0,ct)之间的一个整数, $t5记录第%k个出现的字符种类(&#x27;a&#x27;-97到&#x27;b&#x27;-97,即[0,26))<br>load_data(%arr, $t5, $t4) # $t4寄存对应字符的出现次数<br>beq $t4, $0, skip # 该语句无用,但为了代码拓展性和稳定性可以保留<br>printCharFromInt($t5) # 0对应&#x27;a&#x27;,25对应&#x27;z&#x27;<br>printChar(space)<br>printInt($t4)<br>printChar(enter)<br>skip:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br># 初始化<br>li ct, 0<br><br># 输入n<br>inputInt(n)<br><br># 输入n个字符<br>for_begin(start1,end1,i,$0,n)<br>inputChar(k)<br>put(arr, order, k)<br>for_end(start1,end1,i)<br><br># 打印<br>for_begin(start2,end2,k,$0,ct)<br>print_arr_element(arr, order, k)<br>for_end(start2,end2,k)<br><br># 终止程序<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h3><ul><li>MIPS评测机似乎不会有换行符的输入,虽然无法在本地实现对换行符的处理,却可以通过评测机.但倘若增加了一个用于除去换行符影响的<code>ignoreInt()</code>方法,反而会出现RE错误.</li><li>在这里要实现读入单个字符,根据手册可以搓出这个宏:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>但如何避免换行符的影响?我们可以用读入字符串的方法(此时程序会读入一行字符,包括换行符),在将字符串的第0位字符提取出来.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 8<br>li $a1, 10<br>syscall<br>lw %c, 0($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><h2 id="矩阵转置相加"><a href="#矩阵转置相加" class="headerlink" title="矩阵转置相加"></a>矩阵转置相加</h2><blockquote><p>使用MIPS汇编语言编写一个具有矩阵<strong>转置相加</strong>功能的汇编程序(不考虑延迟槽).</p></blockquote><h3 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h3><blockquote><p>开两个二维数组a,b,各元素依次相加,通过调换for循环顺序实现对转置矩阵的打印.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            a[i][k] = a[i][k] + b[i][k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The result is:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a[i][k]);<br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k != m - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-3"><a href="#MIPS答案-3" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br>sentence: .asciiz &quot;The result is:\n&quot;<br>A: .space 256 # 8 * 8 * 4<br>B: .space 256 # 8 * 8 * 4<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv temp1, $t3<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.text<br># 读入n, m<br>inputInt(n)<br>inputInt(m)<br><br># 读入矩阵A<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1, i)<br><br># 读入矩阵B<br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, m)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br># 矩阵A,B相加,结果存储到A中<br>for_begin(start5, end5, i, $0, n)<br>for_begin(start6, end6, k, $0, m)<br>load_arr(A, i, k, temp)<br>load_arr(B, i, k, temp1)<br>add temp, temp, temp1<br>store_arr(A, i, k, temp)<br>for_end(start6, end6, k)<br>for_end(start5, end5, i)<br><br>printStr(sentence)<br><br># 打印A的转置数组<br>for_begin(start7, end7, k, $0, m)<br>for_begin(start8, end8, i, $0, n)<br>load_arr(A, i, k, temp)<br>printInt(temp)<br>addi i, i, 1<br>beq i, n, skip<br>printStr(space)<br>skip:<br>subi i, i, 1<br>for_end(start8, end8, i)<br>addi k, k, 1<br>beq k, m, skip2<br>printStr(enter)<br>skip2:<br>subi k, k, 1<br>for_end(start7, end7, k)<br><br># 终止程序<br>done<br></code></pre></td></tr></table></figure><h3 id="易错点-2"><a href="#易错点-2" class="headerlink" title="易错点"></a>易错点</h3><ul><li><p>要注意到矩阵每一行的最后不能出现空格,最后一行的末尾不能有换行符.我们可以先对for循环中的参数(<code>i</code>或<code>k</code>)进行加一操作,判断其是否与<code>n</code>或<code>m</code>相等.</p></li><li><p>多层循环使用宏会更加方便.对于不同的for循环,一定要将开始和结束的标志符设置为不同的(不要复制粘贴后忘了修改就行)</p></li></ul><h2 id="倒序全排列"><a href="#倒序全排列" class="headerlink" title="倒序全排列"></a>倒序全排列</h2><blockquote><p>使用MIPS实现全排列生成算法</p><p>输入一个小于等于7的正整数,求出n的全排列,并按照字典序倒序输出</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="image-20241008194552753.png" alt="正序全排列C语言代码"></p><blockquote><p>这里题目给出了正序全排列的C语言代码,不难发现:只要将<code>FullArray(int index)</code>中出现的第二个正序for循环改为倒序即可.即:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (symbol[i] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// body</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-4"><a href="#MIPS答案-4" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>symbol: .space 28<br>array: .space 28<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br><br>.eqv n, $s0<br>.eqv index, $a1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv flag, $t2<br>.eqv one, $t3 # 用于存储立即数1<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro print_arr_element(%arr, %i)<br>sll $t9, %i, 2<br>lw $a0, %arr($t9)<br>li $v0, 1<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 递减for循环<br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.text<br>inputInt(n)<br>li one, 1<br>li index, 0<br>jal FullArray<br>done<br><br>FullArray:<br>push($ra)<br>bge index, n, return<br>for_begin_decrease(start2, end2, i, n, $0)<br>load_data(symbol, i, flag)<br>beq flag, $0, yes<br>j no<br>yes:<br>addi i, i, 1<br>store_data(array, index, i)<br>subi i, i, 1<br>store_data(symbol, i, one)<br>addi index, index, 1<br>push(i)<br>jal FullArray<br>pop(i)<br>subi index, index, 1<br>store_data(symbol, i, $0)<br>no:<br><br>for_end_decrease(start2, end2, i)<br><br>j full_array_end<br><br>return:<br>for_begin(start1, end1, k, $0, n)<br>print_arr_element(array, k)<br>printStr(space)<br>for_end(start1, end1, k)<br>printStr(enter)<br>full_array_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h2 id="阶乘连加"><a href="#阶乘连加" class="headerlink" title="阶乘连加"></a>阶乘连加</h2><p><img src="image-20241008201630823.png" alt="1202-329"></p><h3 id="MIPS答案-5"><a href="#MIPS答案-5" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><blockquote><p>实现思路很简单,不需要写一个C语言程序了,但要注意细节问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv index, $a1<br>.eqv ans, $s1<br>.eqv new, $s2<br>.eqv i, $t0<br>.eqv k, $t1<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputUnsignedInt(%u)<br>li $v0, 36<br>move $a0, %u<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>ble %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br><br>for_begin_decrease(start, end, i, n, $0)<br>li new, 1<br>for_begin_decrease(start2, end2, k, i, $0)<br>mult new, k<br>mflo new<br>for_end_decrease(start2, end2, k)<br>addu ans, ans, new<br>for_end_decrease(start, end, i)<br><br>inputUnsignedInt(ans)<br><br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-3"><a href="#易错点-3" class="headerlink" title="易错点"></a>易错点</h3><ul><li>该程序设计无符号数,<code>add</code>要替换为<code>addu</code></li></ul><h2 id="单步汉诺塔"><a href="#单步汉诺塔" class="headerlink" title="单步汉诺塔"></a>单步汉诺塔</h2><blockquote><ul><li>输入格式：</li><li>输入包含1行，只包含1个1位整数，即0-9中的某一个整数，记其为n</li><li>汉诺塔三根柱子的编号从左到右依次为’A’,’B’,’C’,初始的时候所有盘子都在‘A’上，编号从上（小）到下（大）分别为0~n</li><li>移动这些盘子到’C‘，要求移动时只能将某个柱子上最上面的盘子移动到相邻的柱子，并且任何情况下大盘子不能在小盘子上面，即A上的盘子不能直接移动到C上</li><li>输出格式：请参照下文的C语言样例，要求实现同粒度的输出（即能通过逐行<code>strcmp</code>的检测）</li><li>数据范围：</li><li>0&lt;n&lt;10</li></ul></blockquote><blockquote><p>C语言样例已给出:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move disk %d from %c to %c\n&quot;</span>, id, from, to);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> via, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-keyword">if</span> (base == <span class="hljs-number">0</span>) &#123;<br>      move(base, from, via);<br>      move(base, via, to);<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>  move(base, from, via);<br>  hanoi(base - <span class="hljs-number">1</span>, to, via, from);<br>  move(base, via, to);<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  hanoi(n, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-6"><a href="#MIPS答案-6" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;move disk A from A to A\n&quot;<br><br>.eqv shift, $t3<br>.eqv shift1, 10<br>.eqv shift2, 7<br>.eqv shift3, 5<br>.eqv n, $s0<br>.eqv base, $a1<br>.eqv from, $a2<br>.eqv via, $a3<br>.eqv to, $t4<br>.eqv A, 65<br>#.eqv B, 66<br>.eqv C, 67<br>.eqv zero, 48<br><br># move()函数,使用$t7<br>.macro move_(%id, %from, %to)<br>la $t7, sentence<br>addi $t7, $t7, shift1<br>sb %id, 0($t7)<br>addi $t7, $t7, shift2<br>sb %from, 0($t7)<br>addi $t7, $t7, shift3<br>sb %to, 0($t7)<br>printStr(sentence)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro swap(%x, %y)<br>push(%x)<br>push(%y)<br>pop(%x)<br>pop(%y)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>move base, n<br>addi base, base, zero<br>li from, 65<br>li via, 66<br>li to, 67<br>jal hanoi<br><br>done<br><br>hanoi:<br>push($ra)<br>beq base, zero, return<br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, from, via)<br><br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>swap(from, to)<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, via, to)<br><br>subi base, base, 1<br>jal hanoi<br><br>j hanoi_end<br>return:<br>move_(base, from, via)<br>move_(base, via, to)<br>hanoi_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h3 id="难点-修改字符串"><a href="#难点-修改字符串" class="headerlink" title="难点(修改字符串)"></a>难点(修改字符串)</h3><ul><li>对于字符串的修改,可以采用以下模板:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, modify_str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;hello, world!\n&quot;<br><br>.eqv c, $t0 # 待加入的字符<br>.eqv shift, $t1 # 偏移量<br><br># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, %str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.text<br>li shift, 3<br>li c, 70 # &#x27;F&#x27;对应ASCII码为70<br>modify_str(sentence, shift, c)<br>printStr(sentence)<br><br># output:<br># helFo, world!<br></code></pre></td></tr></table></figure><h2 id="二分查找的实现与应用"><a href="#二分查找的实现与应用" class="headerlink" title="二分查找的实现与应用"></a>二分查找的实现与应用</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=415&PieId=1202">P2_L1_bsearch - 系统能力课程实验平台 (buaa.edu.cn)</a></p><h3 id="C语言代码-1"><a href="#C语言代码-1" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> <span class="hljs-comment">//自定义函数binary_search()</span><br>&#123;<br>    <span class="hljs-type">int</span> low,high,mid,count=<span class="hljs-number">0</span>,count1=<span class="hljs-number">0</span>;<br>    low=<span class="hljs-number">0</span>;<br>    high=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)    <span class="hljs-comment">//査找范围不为0时执行循环体语句</span><br>    &#123;<br>        count++;    <span class="hljs-comment">//count记录査找次数</span><br>        mid=(low+high)/<span class="hljs-number">2</span>;    <span class="hljs-comment">//求中间位置</span><br>        <span class="hljs-keyword">if</span>(key&lt;a[mid])    <span class="hljs-comment">//key小于中间值时</span><br>            high=mid<span class="hljs-number">-1</span>;    <span class="hljs-comment">//确定左子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;a[mid])    <span class="hljs-comment">//key 大于中间值时</span><br>            low=mid+<span class="hljs-number">1</span>;    <span class="hljs-comment">//确定右子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key==a[mid])    <span class="hljs-comment">//当key等于中间值时，证明查找成功</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            count1++;    <span class="hljs-comment">//count1记录查找成功次数</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(count1==<span class="hljs-number">0</span>)    <span class="hljs-comment">//判断是否查找失敗</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;key);<br>        binary_search(key, arr, m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-7"><a href="#MIPS答案-7" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 4000<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv low, $t0<br>.eqv high, $t1<br>.eqv mid, $t2<br>.eqv count, $t3<br>.eqv count1, $t4<br>.eqv temp, $t5<br>.eqv i, $t6<br>.eqv k, $t7<br>.eqv key, $t8<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %low, %high)<br>%startLabel:<br>bgt %low, %high, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro binary_search(%key, %a, %n)<br>li count, 0<br>li count1, 0<br>li low, 0<br>subi high, %n, 1<br>while_begin(start1, end1, low, high)<br>addi count, count, 1<br>add mid, low, high<br>srl mid, mid, 1 # mid = (low + high) / 2;<br>load_data(%a, mid, temp)<br>blt key, temp, less<br>beq key, temp, same<br>bgt key, temp, greater<br><br>less:<br>subi high, mid, 1<br>j judge_end<br>same:<br>printImmediate(1)<br>printChar(enter)<br>addi count1, count, 1<br>j break_mark<br>greater:<br>addi low, mid, 1<br>judge_end:<br>while_end(start1,end1)<br>break_mark:<br>beq count1, 0, fail<br>j skip0<br>fail:<br>printImmediate(0)<br>printChar(enter)<br>skip0:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(m)<br>for_begin(start2, end2, i, $0, m)<br>inputInt(temp)<br>store_data(arr,i,temp)<br>for_end(start2, end2, i)<br><br>inputInt(n)<br>for_begin(start3,end3,k,$0,n)<br>inputInt(key)<br>binary_search(key, arr, m)<br>for_end(start3,end3,k)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="水仙花数的判断"><a href="#水仙花数的判断" class="headerlink" title="水仙花数的判断"></a>水仙花数的判断</h2><h3 id="C语言代码-2"><a href="#C语言代码-2" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">narcissus</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> a0;<br>    <span class="hljs-type">int</span> a1;<br>    <span class="hljs-type">int</span> a2;<br>    a0 = x % <span class="hljs-number">10</span>;<br>    a1 = (x % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>;<br>    a2 = x / <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span> (square(a0) + square(a1) + square(a2) == x) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (narcissus(i)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-8"><a href="#MIPS答案-8" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv ten, $s2<br>.eqv hundred, $s3<br><br>.eqv a0, $t0<br>.eqv a1, $t1<br>.eqv a2, $t2<br>.eqv i, $t3<br>.eqv sum, $t4<br>.eqv temp, $t5<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro square_add_to(%x, %sum)<br>mult %x, %x<br>mflo temp<br>mult %x, temp<br>mflo temp<br>add sum, sum, temp<br>.end_macro<br><br>.macro narcissus(%x)<br>li sum, 0<br>div %x, ten<br>mfhi a0<br>square_add_to(a0, sum)<br>div %x, hundred<br>mfhi a1<br>div a1, a1, 10<br>square_add_to(a1, sum)<br>div a2, %x, 100<br>square_add_to(a2, sum)<br><br>beq sum, %x, yes<br>j no<br>yes:<br>printInt(%x)<br>printChar(enter)<br>no:<br>.end_macro<br><br>.text<br>li ten, 10<br>li hundred, 100<br><br>inputInt(m)<br>inputInt(n)<br>for_begin(start0,end0,i,m,n)<br>narcissus(i)<br>for_end(start0,end0,i)<br></code></pre></td></tr></table></figure><h3 id="除法操作"><a href="#除法操作" class="headerlink" title="除法操作"></a>除法操作</h3><blockquote><p>实现除法有以下操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 1<br>div $t0, $t1<br>mflo $t2 # $t0 % $t1 的结果存储在低位中<br>mfhi $t3 # $t0 // $t1的结果存储在高位中<br><br># 2<br>div $t2, $t0, $t1 # $t2 = $t0 // $t1 (整数除法)<br><br># 3<br>div $t0, $t1, 100 # $t0 = $t1 // 100 (除以16-bit立即数)<br><br># 4<br>div $t0, $t1, 100000 # $t0 = $t1 // 100000(除以32-bit立即数)<br><br># 5<br>srl $t0, 2 # $t0值向右移两位,即除以4<br></code></pre></td></tr></table></figure><h2 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h2><h3 id="C语言代码-3"><a href="#C语言代码-3" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (flag == n) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>) &#123;<br>            i = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (count == m) &#123;<br>                a[i] = <span class="hljs-number">1</span>;<br>                flag++;<br>                i++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                count = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count++;<br>                i++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (i == n) &#123;<br>            i = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-9"><a href="#MIPS答案-9" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv one, $s2<br><br>.eqv i, $t0<br>.eqv count, $t1<br>.eqv flag, $t2<br>.eqv temp, $t3<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>inputInt(m)<br><br>li i, 0<br>li count, 1<br>li flag, 1<br>li one, 1<br>while:<br>beq flag, n, break_<br>load_data(a, i, temp)<br>beq temp, $0, else<br>add_:<br>addi i, i, 1<br>j while_end<br>else:<br>beq count, m, yes<br>no:<br>addi count, count, 1<br>addi i, i, 1<br>j while_end<br>yes:<br>store_data(a,i,one)<br>addi flag, flag, 1<br>addi i, i, 1<br>printInt(i)<br>printChar(enter)<br>li count, 1<br>while_end:<br>beq i, n, mod<br>j skip<br>mod:<br>li i, 0<br>skip:<br>j while<br><br>break_:<br><br>for_begin(start0, end0, i, $0, n)<br>load_data(a, i, temp)<br>beq temp, $0, find<br>j skip2<br>find:<br>addi i, i, 1<br>printInt(i)<br>j break2<br>skip2:<br>for_end(start0, end0, i)<br><br>break2:<br>done<br><br></code></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="回文串判断"><a href="#回文串判断" class="headerlink" title="回文串判断"></a>回文串判断</h2><blockquote><p>其实用了足够多的封装之后,对于一些简单的MIPS题目已经不用特意写一遍C语言了</p></blockquote><h3 id="MIPS答案-10"><a href="#MIPS答案-10" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 80<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv flag, $s2<br>.eqv i, $t0<br>.eqv temp, $t1<br>.eqv temp1, $t2<br>.eqv temp2, $t3<br>.macro load_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, arr($t9)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>inputChar(temp)<br>store_data(arr, i, temp)<br>for_end(start1, end1, i)<br><br>srl m, n, 1<br>li flag, 1<br>for_begin(start2, end2, i, $0, m)<br>load_data(arr, i, temp1)<br>sub temp, n, i<br>subi temp, temp, 1<br>load_data(arr, temp, temp2)<br>beq temp1, temp2, skip<br>li flag, 0<br>skip:<br>for_end(start2, end2, i)<br><br>beq flag, 1, yes<br>no:<br>printImmediate(0)<br>j flag_end<br>yes:<br>printImmediate(1)<br>flag_end:<br>done<br><br></code></pre></td></tr></table></figure><h2 id="全排列生成"><a href="#全排列生成" class="headerlink" title="全排列生成"></a>全排列生成</h2><blockquote><p>参考往年题中的<strong>倒序全排列</strong></p></blockquote><h2 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><h3 id="MIPS答案-11"><a href="#MIPS答案-11" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 256 # 8 * 8 * 4<br>B:.space 256<br>C:.space 256<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv f, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, n)<br>inputInt(temp)<br>store_arr(A,i,k,temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1,i)<br><br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, n)<br>inputInt(temp)<br>store_arr(B,i,k,temp)<br>for_end(start4, end4, k)<br>for_end(start3,end3,i)<br><br>for_begin(start5,end5,i,$0,n)<br>for_begin(start6, end6, k, $0, n)<br>li temp, 0<br>for_begin(start7, end7, f, $0, n)<br>load_arr(A,i,f,temp1)<br>load_arr(B,f,k,temp2)<br>mult temp1, temp2<br>mflo temp0<br>add temp, temp, temp0<br>for_end(start7, end7, f)<br>store_arr(C,i,k,temp)<br>for_end(start6, end6, k)<br>for_end(start5,end5,i)<br><br>for_begin(start8, end8, i, $0, n)<br>for_begin(start9, end9, k, $0, n)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space)<br>for_end(start9, end9, k)<br>printStr(enter)<br>for_end(start8, end8, i)<br><br>done<br></code></pre></td></tr></table></figure><h2 id="01迷宫-哈密顿回路"><a href="#01迷宫-哈密顿回路" class="headerlink" title="01迷宫(哈密顿回路)"></a>01迷宫(哈密顿回路)</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><blockquote><p>采用<code>DFS</code>(深度优先算法),从起点出发,向四个方向前进,并以没有到达过(<code>vis[i][j]==0</code>)以及不存在障碍(<code>puzzle[i][j]==1</code>)作为可以前进的判断依据,到达终点时将ans加一操作.</p></blockquote><h3 id="C语言代码-4"><a href="#C语言代码-4" class="headerlink" title="C语言代码"></a>C语言代码</h3><blockquote><p>C语言中不建议使用<code>goto</code>语句,但这里为了翻译方便采用了该语句</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> start_x;<br><span class="hljs-type">int</span> start_y;<br><span class="hljs-type">int</span> end_x;<br><span class="hljs-type">int</span> end_y;<br><span class="hljs-type">int</span> puzzle[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> curr_x, <span class="hljs-type">int</span> curr_y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (curr_x == end_x &amp;&amp; curr_y == end_y)&#123;<br>        ans += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">//up </span><br>    <span class="hljs-keyword">if</span> (curr_x == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x<span class="hljs-number">-1</span>,curr_y);<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk1:<br><br>    <span class="hljs-comment">//right</span><br>    <span class="hljs-keyword">if</span> (curr_y == m<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y+<span class="hljs-number">1</span>);<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    brk2:<br><br>    <span class="hljs-comment">// down</span><br>    <span class="hljs-keyword">if</span> (curr_x == n<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x+<span class="hljs-number">1</span>,curr_y);<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk3:<br><br>    <span class="hljs-comment">//left</span><br>    <span class="hljs-keyword">if</span> (curr_y == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y<span class="hljs-number">-1</span>);<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br><br>    brk4:<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; m; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;puzzle[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_y);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_y);<br><br>    start_x -= <span class="hljs-number">1</span>;<br>    start_y -= <span class="hljs-number">1</span>;<br>    end_y -= <span class="hljs-number">1</span>;<br>    end_x -= <span class="hljs-number">1</span>;<br>    vis[start_x][start_y] = <span class="hljs-number">1</span>;<br>    solve(start_x,start_y);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-12"><a href="#MIPS答案-12" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>puzzle:.space 256 # 8 * 8 * 4<br>vis:.space 256<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv start_x, $s2<br>.eqv start_y, $s3<br>.eqv end_x, $s4<br>.eqv end_y, $s5<br>.eqv ans, $s6<br>.eqv one, $s7<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv curr_x, $t3<br>.eqv curr_y, $t4<br>.eqv temp1, $t5<br><br>.text<br>li one, 1<br><br>inputInt(n)<br>inputInt(m)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(puzzle, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>inputInt(start_x)<br>inputInt(start_y)<br>inputInt(end_x)<br>inputInt(end_y)<br><br>subi start_x, start_x, 1<br>subi start_y, start_y, 1<br>subi end_x, end_x, 1<br>subi end_y, end_y, 1<br>move curr_x, start_x<br>move curr_y, start_y<br>store_arr(vis, curr_x, curr_y, one)<br>jal solve<br><br><br>printInt(ans)<br><br>done<br><br>solve:<br>push($ra)<br>bne curr_x, end_x, skip<br>bne curr_y, end_y, skip<br>addi ans, ans, 1<br>pop($ra)<br>jr $ra<br>skip:<br>beqz curr_x, brk1<br>subi temp1, curr_x, 1<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk1<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk1<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk1:<br>addi temp1, curr_y, 1<br>beq temp1, m, brk2<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk2<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk2<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk2:<br>addi temp1, curr_x, 1<br>beq temp1, n, brk3<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk3<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk3<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk3:<br>beqz curr_y, brk4<br>subi temp1, curr_y, 1<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk4<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk4<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk4:<br><br>pop($ra)<br>jr $ra<br></code></pre></td></tr></table></figure><h3 id="易错点-4"><a href="#易错点-4" class="headerlink" title="易错点"></a>易错点</h3><ul><li>当调用递归函数时,若函数中可能出现多次递归,我们必须将:<ul><li>作为函数参数的寄存器入栈再调用递归函数,退出递归后再退栈,保持函数参数不变(<code>$a1,$a2,...</code>)</li><li>用来记录状态的数组在调用递归函数前的修改,应当在退出递归后修改回原值,比如本题中的<code>vis</code></li><li>若递归出现在<code>for</code>循环,<code>while</code>循环中,必须将作为循环参数的<code>i,k</code>等入栈保存,其他递归函数中会修改的寄存器同理(<code>$t0,$t1,...</code>)</li></ul></li></ul><h2 id="矩阵卷积"><a href="#矩阵卷积" class="headerlink" title="矩阵卷积"></a>矩阵卷积</h2><h3 id="C语言代码-5"><a href="#C语言代码-5" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> A[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> B[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> C[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> temp;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> ii;<br><span class="hljs-type">int</span> kk;<br><span class="hljs-type">void</span> <span class="hljs-title function_">evolv</span><span class="hljs-params">(<span class="hljs-type">int</span> A[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> B[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> C[][<span class="hljs-number">100</span>], </span><br><span class="hljs-params">        <span class="hljs-type">int</span> m1, <span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> m2, <span class="hljs-type">int</span> n2)</span> &#123;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1 - m2 + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1 - n2 + <span class="hljs-number">1</span>; k++) &#123;<br>            temp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; m2; ii++) &#123;<br>                <span class="hljs-keyword">for</span> (kk = <span class="hljs-number">0</span>; kk &lt; n2; kk++) &#123;<br>                    <span class="hljs-comment">// printf(&quot;%d %d \n&quot;, ii + i, kk + k);</span><br>                    temp = temp + A[ii+i][kk+k] * B[ii][kk];<br>                &#125;<br>            &#125;<br>            C[i][k] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m1, n1, m2, n2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m2);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][k]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m2; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n2; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;B[i][k]);<br>        &#125;<br>    &#125;<br><br>    evolv(A,B,C,m1,n1,m2,n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1-m2+<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1-n2+<span class="hljs-number">1</span>; k++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, C[i][k]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-13"><a href="#MIPS答案-13" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 2000 # 10 * 10 * 4 = 400<br>B:.space 2000<br>C:.space 2000<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n1, $s0<br>.eqv m1, $s1<br>.eqv m2, $s2<br>.eqv n2, $s3<br><br>.eqv m1_m2_1, $s4<br>.eqv n1_n2_1, $s5<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp3, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.eqv ii, $t7<br>.eqv kk, $t8<br><br>.text<br>inputInt(m1)#行数<br>inputInt(n1)#列数<br>inputInt(m2)<br>inputInt(n2)<br><br># 读取待卷积矩阵<br>for_begin(start1, end1, i, $0, m1)<br>for_begin(start2, end2, k, $0, n1)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>#读取卷积核<br>for_begin(start3, end3, i, $0, m2)<br>for_begin(start4, end4, k, $0, n2)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br>#m1-m2+1<br>sub m1_m2_1, m1, m2<br>addi m1_m2_1, m1_m2_1, 1<br><br>sub n1_n2_1, n1, n2<br>addi n1_n2_1, n1_n2_1, 1<br><br>#卷积<br>for_begin(start5, end5, i, $0, m1_m2_1)<br>for_begin(start6, end6, k, $0, n1_n2_1)<br> li temp, 0<br> for_begin(start7, end7, ii, $0, m2)<br> for_begin(start8, end8, kk, $0, n2)<br> add temp3, ii, i<br> add temp0, kk, k<br> load_arr(A, temp3, temp0, temp1)<br> load_arr(B, ii, kk, temp2)<br> mult temp1, temp2<br> mflo temp0<br> add temp, temp, temp0<br> for_end(start8, end8, kk)<br> for_end(start7, end7, ii)<br> store_arr(C, i, k, temp)<br>for_end(start6,end6,k)<br>for_end(start5, end5, i)<br><br>#打印卷积结果<br>for_begin(start9, end9, i, $0, m1_m2_1)<br>for_begin(start10, end10, k, $0, n1_n2_1)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space) <br>for_end(start10, end10, k)<br>printStr(enter)<br>for_end(start9,end9, i)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="高精度阶乘的计算"><a href="#高精度阶乘的计算" class="headerlink" title="高精度阶乘的计算"></a>高精度阶乘的计算</h2><h3 id="C语言代码-6"><a href="#C语言代码-6" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 10000</span><br><span class="hljs-type">int</span> f[MAX];<br><span class="hljs-type">void</span> <span class="hljs-title function_">Arr_reset</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=m;i&lt;=n;i++)<br>    &#123;<br>        a[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    Arr_reset(f,<span class="hljs-number">0</span>,(<span class="hljs-keyword">sizeof</span>(f)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)));<span class="hljs-comment">//对数组进行初始化</span><br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> jj= <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-comment">//乘以 i4</span><br>        <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=jj;j++)<span class="hljs-comment">//最不易理解的</span><br>        &#123;<br>            <span class="hljs-type">int</span> s=f[j]*i+c;<br>            f[j]=s%<span class="hljs-number">10</span>;<br>            c=s/<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span> (j == jj &amp;&amp; c != <span class="hljs-number">0</span>)&#123;<br>                jj++;<br>            &#125;<br>            <span class="hljs-comment">//算出的 s 是单位数时，会连续覆盖 f[0]</span><br>            <span class="hljs-comment">//否则一个多位数会倒过来存储，如 123，f[0]存 3，f[1]存 2，f[3]存 1</span><br>            <span class="hljs-comment">//因此上式先求余，在求模</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jj=%d\n&quot;</span>, jj);<br>    <span class="hljs-keyword">for</span>(j=MAX<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        <span class="hljs-keyword">if</span>(f[j])<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//忽略前导 0</span><br>    <span class="hljs-keyword">for</span>(i=j;i&gt;=<span class="hljs-number">0</span>;i--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-14"><a href="#MIPS答案-14" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a:.space 4000<br>enter:.word &#x27;\n&#x27;<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>bgt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_begin(%startLabel, %endLabel, %i, %start, %end)<br>li %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_end(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv s, $t2<br>.eqv temp, $t3<br>.eqv c, $t4<br>.eqv jj, $t5<br>.eqv n, $s0<br>.eqv two, $s1<br>.eqv ten, $s2<br>.eqv max, $s3<br>.eqv one, $s4<br>.eqv MAX, 1000<br><br>.text<br>li one, 1<br>li two, 2<br>li ten, 10<br>li max, MAX<br>#for_c_begin(start0, end0, i, $0, MAX)<br>#store_arr(a, i, 0)<br>#for_end(start0, end0, i)<br><br>inputInt(n)<br>store_arr(a, $0, one)<br>li jj, 0<br>for_c_begin(start1, end1, i, two, n) # 2&lt;=i&lt;=n<br>li c, 0<br>for_c_begin(start2, end2, k, $0, jj)<br>load_arr(a, k, temp)<br>mult temp, i<br>mflo s<br>add s, s, c # s = a[k] * i + c<br>div s, ten<br>mfhi temp<br>mflo c # c = s / 10<br>store_arr(a, k, temp) # a[k] = s % 10<br>beqz c, skip<br>bne k, jj, skip<br>addi jj, jj, 1<br>skip: <br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>for_decrease_c_begin(start4, end4, i, jj, $0) #k&gt;=i&gt;=0<br>load_arr(a, i, temp)<br>printInt(temp)<br>for_decrease_end(start4, end4, i)<br><br>printStr(enter)<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-5"><a href="#易错点-5" class="headerlink" title="易错点"></a>易错点</h3><ul><li>超时问题,题目所给字符串为1000,为了避免每次循环都要进行1000次,我们设立一个参数<code>jj</code>,用来记录计算答案可能到达的最高位<ul><li>初始,<code>jj</code>&#x3D;0</li><li>在for循环中,若循环参数<code>j</code>&#x3D;&#x3D;<code>jj</code>,且此时向高一位传递的数不为0(<code>c!=0</code>),则对<code>jj</code>加一操作</li></ul></li><li><code>load_arr</code>与<code>store_arr</code>中不要用mult,这样涉及的寄存器会增多,且指令数会暴增,必须用<code>sll</code>.</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><blockquote><p>管理元素所属集合的数据结构,实现为一个森林,其中每棵树表示一个集合,树中的节点对应集合中的元素.其支持两种操作:</p><ul><li>合并:合并两个元素所属集合</li><li>查询:查询某个元素所属集合</li></ul></blockquote><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] pre;<br><span class="hljs-comment">// 上级数组初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        pre[i] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 寻找上级,并将上一级修改为最高的一级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findPre</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pre[key] == key) &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre[key] = findPre(pre[key]);<br>&#125;<br><br><span class="hljs-comment">// 联合两个节点,使其拥有共同的上级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unite</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rootx</span> <span class="hljs-operator">=</span> findPre(x);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rooty</span> <span class="hljs-operator">=</span> findPre(y);<br>    <span class="hljs-keyword">if</span> (rootx != rooty) &#123;<br>        pre[rootx] = rooty;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog调试系统任务和编译预处理语句</title>
    <link href="/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="monitor"><a href="#monitor" class="headerlink" title="$monitor"></a>$monitor</h2><p>监视被测试模块的所有感兴趣的信号.</p><h2 id="monitor-p1-p2-…pn"><a href="#monitor-p1-p2-…pn" class="headerlink" title="$monitor(p1,p2,…pn)"></a>$monitor(p1,p2,…pn)</h2><p>按照格式字符串打印信号</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$monitor</span>(<span class="hljs-built_in">$time</span>, ,<span class="hljs-string">&quot;rxd=%b txd=%b&quot;</span>,rxd,txd);<br></code></pre></td></tr></table></figure><h2 id="monitor-on-monitor-off"><a href="#monitor-on-monitor-off" class="headerlink" title="$monitor on&#x2F; monitor off"></a>$monitor on&#x2F; monitor off</h2><p>启动&#x2F;关闭监控任务</p><h2 id="time"><a href="#time" class="headerlink" title="$time"></a>$time</h2><p>返回一个64位的整数来表示当前的仿真时刻值(总是输出整数)</p><h2 id="realtime"><a href="#realtime" class="headerlink" title="$realtime"></a>$realtime</h2><p>和$time作用相似,返回的是实型数</p><h2 id="finish"><a href="#finish" class="headerlink" title="$finish"></a>$finish</h2><p>退出仿真器,返回主操作系统</p><h2 id="stop"><a href="#stop" class="headerlink" title="$stop"></a>$stop</h2><p>将EDA工具置为暂停模式</p><h2 id="readmemb"><a href="#readmemb" class="headerlink" title="$readmemb"></a>$readmemb</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br></code></pre></td></tr></table></figure><p>读取数据文件,其中<code>readmemb</code>读取的数字必须是二进制,<code>readmemh</code>读取的数字必须是十六进制.</p><h2 id="random"><a href="#random" class="headerlink" title="$random"></a>$random</h2><p>产生随机数</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">23</span>:<span class="hljs-number">0</span>] <span class="hljs-keyword">rand</span><br><span class="hljs-keyword">rand</span> = <span class="hljs-built_in">$random</span> % <span class="hljs-number">60</span>;<br><span class="hljs-comment">// 产生一个[-59,59]内的随机数</span><br></code></pre></td></tr></table></figure><h1 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h1><h2 id="define"><a href="#define" class="headerlink" title="&#96;define"></a>&#96;define</h2><p>用一个指定的标识符(即名字)来代表一个字符串</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">define</span> 标识符(宏名) 字符串(宏内容)</span><br></code></pre></td></tr></table></figure><p>例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test;<br>    <span class="hljs-keyword">reg</span> a,b,c,d,e,out;<br><span class="hljs-meta">`<span class="hljs-keyword">define</span> expression a + b + c + d</span><br>    <span class="hljs-keyword">assign</span> out = `expression + e;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="timescale"><a href="#timescale" class="headerlink" title="&#96;timescale"></a>&#96;timescale</h2><p>说明在该命令后的模块的事件单位和时间精度</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> &lt;时间单位&gt;/&lt;时间精度&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣双周赛140</title>
    <link href="/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/"/>
    <url>/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-替换为数位和以后的最小元素"><a href="#T1-替换为数位和以后的最小元素" class="headerlink" title="T1:替换为数位和以后的最小元素"></a>T1:<a href="https://leetcode.cn/problems/minimum-element-after-replacement-with-digit-sum/">替换为数位和以后的最小元素</a></h1><blockquote><p>给你一个整数数组 <code>nums</code> 。</p><p>请你将 <code>nums</code> 中每一个元素都替换为它的各个数位之 <strong>和</strong> 。</p><p>请你返回替换所有元素以后 <code>nums</code> 中的 <strong>最小</strong> 元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = inf<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> nums:<br>            tmp = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> x:<br>                tmp += x % <span class="hljs-number">10</span><br>                x= x//<span class="hljs-number">10</span><br>            ans = <span class="hljs-built_in">min</span>(ans, tmp)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>                tmp += x % <span class="hljs-number">10</span>;<br>                x /= <span class="hljs-number">10</span>;<br>            &#125;<br>            ans = Integer.min(ans, tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="T2-高度互不相同的最大塔高和"><a href="#T2-高度互不相同的最大塔高和" class="headerlink" title="T2:高度互不相同的最大塔高和"></a>T2:<a href="https://leetcode.cn/problems/maximize-the-total-height-of-unique-towers/">高度互不相同的最大塔高和</a></h1><blockquote><p>给你一个数组 <code>maximumHeight</code> ，其中 <code>maximumHeight[i]</code> 表示第 <code>i</code> 座塔可以达到的 <strong>最大</strong> 高度。</p><p>你的任务是给每一座塔分别设置一个高度，使得：</p><ol><li>第 <code>i</code> 座塔的高度是一个正整数，且不超过 <code>maximumHeight[i]</code> 。</li><li>所有塔的高度互不相同。</li></ol><p>请你返回设置完所有塔的高度后，可以达到的 <strong>最大</strong> 总高度。如果没有合法的设置，返回 <code>-1</code> 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumTotalSum</span>(<span class="hljs-params">self, maximumHeight: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        maximumHeight.sort(reverse = <span class="hljs-literal">True</span>)<br>        cnt = Counter(maximumHeight)<br>        ans = <span class="hljs-number">0</span><br>        curr = inf<br>        <span class="hljs-keyword">for</span> x, ct <span class="hljs-keyword">in</span> cnt.items():<br>            <span class="hljs-keyword">if</span> curr == inf:<br>                curr = x-ct<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                    ans += x-i<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> curr &lt;= x:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += curr - i <br>                    curr = curr-ct<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += x - i <br>                    curr = x-ct<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">maximumTotalSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] maximumHeight)</span> &#123;<br>        Arrays.sort(maximumHeight);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> maximumHeight.length;<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            b[i] = maximumHeight[n-i-<span class="hljs-number">1</span>];<br>        &#125;<br>        maximumHeight = b;<br>        LinkedHashMap&lt;Integer,Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : maximumHeight) &#123;<br>            <span class="hljs-keyword">if</span> (cnt.containsKey(x)) &#123;<br>                cnt.put(x,cnt.get(x)+<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt.put(x,<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : cnt.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (x &lt; curr) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += x-k;<br>                &#125;<br>                curr = x - cnt.get(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += curr-k;<br>                &#125;<br>                curr = curr - cnt.get(x);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curr &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注:这里一定要用LinkedHashMap,以此保证哈希表的关键字集是有序的(根据插入顺序)</p></blockquote><h2 id="灵茶山艾府解法"><a href="#灵茶山艾府解法" class="headerlink" title="灵茶山艾府解法"></a>灵茶山艾府解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximunTotalSum</span>(<span class="hljs-params">self, h:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>)-&gt;<span class="hljs-built_in">int</span>:<br>        h.sort(reverse=<span class="hljs-literal">True</span>)<br>        n = <span class="hljs-built_in">len</span>(h)<br>        ans = h[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            h[i] = <span class="hljs-built_in">min</span>(h[i-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>, h[i])<br>            ans += h[i]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h1 id="T3-字典序最小的合法序列"><a href="#T3-字典序最小的合法序列" class="headerlink" title="T3:字典序最小的合法序列"></a>T3:<a href="https://leetcode.cn/problems/find-the-lexicographically-smallest-valid-sequence/">字典序最小的合法序列</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] validSequence(String s, String T) &#123;<br>        <span class="hljs-type">char</span>[] s = S.toCharArray();<br>        <span class="hljs-type">char</span>[] t = T.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length;<br>        <br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        suf[n] = m;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] == t[j]) &#123;<br>                j--;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">changed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] == t[j] || !changed &amp;&amp; suf[i+<span class="hljs-number">1</span>] &lt;= j+<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] != t[j]) &#123;<br>                    changed = <span class="hljs-literal">true</span>;<br>                &#125;<br>                ans[j++] = i;<br>                <span class="hljs-keyword">if</span> (j == m) &#123;<br>                    <span class="hljs-keyword">return</span> ans;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充-最少得分子序列"><a href="#补充-最少得分子序列" class="headerlink" title="补充:最少得分子序列"></a>补充:<a href="https://leetcode.cn/problems/subsequence-with-the-minimum-score/">最少得分子序列</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minimumScore</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        Arrays.fill(suf, m);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == t.charAt(j)) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> suf[<span class="hljs-number">0</span>];<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == t.charAt(j)) &#123;<br>                j++;<br>                ans = Integer.min(ans, suf[i+<span class="hljs-number">1</span>] - j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="T4-第一个几乎相等子字符串的下标"><a href="#T4-第一个几乎相等子字符串的下标" class="headerlink" title="T4: 第一个几乎相等子字符串的下标"></a>T4:<a href="https://leetcode.cn/problems/find-the-occurrence-of-first-almost-equal-substring/"> 第一个几乎相等子字符串的下标</a></h1><blockquote><p>利用Z算法，分别求出pattern与s的公共最长前缀数组和公共最长后缀数组，索引从小到大遍历，返回对应前缀+后缀$\geq$len(pattern)-1(即几乎相等)的下标.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_z</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        z = [<span class="hljs-number">0</span>] * n<br>        box_l = box_r = <span class="hljs-number">0</span>  <span class="hljs-comment"># z-box 左右边界</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> i &lt;= box_r:<br>                z[i] = <span class="hljs-built_in">min</span>(z[i - box_l], box_r - i + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 改成手动 if 可以加快速度</span><br>            <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>                box_l, box_r = i, i + z[i]<br>                z[i] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> z<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minStartingIndex</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, pattern: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        pre_z = <span class="hljs-variable language_">self</span>.calc_z(pattern + s)<br>        suf_z = <span class="hljs-variable language_">self</span>.calc_z(pattern[::-<span class="hljs-number">1</span>] + s[::-<span class="hljs-number">1</span>])<br>        suf_z.reverse()  <span class="hljs-comment"># 也可以不反转，下面写 suf_z[-i]</span><br>        m = <span class="hljs-built_in">len</span>(pattern)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, <span class="hljs-built_in">len</span>(s) + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> pre_z[i] + suf_z[i - <span class="hljs-number">1</span>] &gt;= m - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> i - m<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>               <br></code></pre></td></tr></table></figure><h2 id="扩展-Z算法-Z-Algorithm-扩展KMP"><a href="#扩展-Z算法-Z-Algorithm-扩展KMP" class="headerlink" title="扩展:Z算法(Z Algorithm,扩展KMP)"></a>扩展:Z算法(Z Algorithm,扩展KMP)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>对于一个长度为<code>n</code>的字符串s,定义函数<code>z[i]</code>表示<code>s</code>和s[i,n-1]的最长公共前缀(<code>LCP</code>)的长度,则z称为s的Z函数,热别地,<code>z[0]=0</code></p></blockquote><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><blockquote><p>时间复杂度:$O(n^2)$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">z_function_trivial</span>(<span class="hljs-params">s</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    z = [<span class="hljs-number">0</span>] * n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>            z[i] += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><h3 id="线性算法"><a href="#线性算法" class="headerlink" title="线性算法"></a>线性算法</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>我们从1到n-1顺次计算z[i],在计算z[i]的过程中,我们会利用已经计算好的z[0],…z[i-1].</p><p><code>[i,i+z[i]-1]</code>称为i的匹配段(<code>Z-box</code>)</p><p>算法过程中我们维护右端点最靠右的匹配段,记作[l,r],s[l,r]是s的前缀,在计算z[i]时保证l$\leq$i,初始时l&#x3D;r&#x3D;0</p><p>在计算z[i]的过程中:</p><ul><li>如果$i\leq r$,则s[i,r]&#x3D;s[i-l,r-l](字符串相同),因此$z[i]\geq min(z[i-l],r-i+1)$<ul><li>若$z[i-l]&lt;r-i+1$,则z[i]&#x3D;z[i-l]</li><li>否则$z[i-l]\geq r-i+1$,这时z[i]&#x3D;r-i+1,然后暴力枚举下一个字符扩展z[i]直到不能扩展为止</li></ul></li><li>如果$i\geq r$,那么我们直接按照朴素算法,从s[i]开始比较,暴力求出z[i]</li><li>在求出z[i]后,如果i+z[i]-1&gt;r,更新[l,r],即令l&#x3D;i,r&#x3D;i+z[i]-1</li></ul></blockquote><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p><img src="image-20240929164214557.png" alt="Z算法动画"></p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>线性遍历，$O(n)$</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线段树</title>
    <link href="/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] d;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t)&#123;<br>        d[p] = a[s];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    m = s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    build(s,m,p*<span class="hljs-number">2</span>);<br>    build(m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[(p*<span class="hljs-number">2</span>) + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t. <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; r &gt;= t)&#123;<br>        <span class="hljs-keyword">return</span> d[p];<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>), sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改-增加-带懒惰标记"><a href="#修改-增加-带懒惰标记" class="headerlink" title="修改(增加)(带懒惰标记)"></a>修改(增加)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] b;<br><span class="hljs-comment">// 数组b存储懒惰标记</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-comment">// l,r为修改区间,c为修改量,[s,t]为当前节点包含的区间,p为当前节点的编号</span><br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r)&#123;<br>        d[p] += (t-s+<span class="hljs-number">1</span>)*c;<br>        b[p] += c;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p] &amp;&amp; s != t) &#123;<br>        <span class="hljs-comment">// 如果当前节点的懒惰标记非空,则更新当前节点两个字节点的值和懒惰标记值</span><br>        d[p * <span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p * <span class="hljs-number">2</span>] += b[p];<br>        b[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前节点的懒惰标记值清零</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询-带懒惰标记"><a href="#查询-带懒惰标记" class="headerlink" title="查询(带懒惰标记)"></a>查询(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p]) &#123;<br>        <span class="hljs-comment">// 这里不用判断是否是子节点,因为上面查询环节会直接返回值</span><br>        d[p*<span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] += b[p];<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l,r,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改-赋值-带懒惰标记"><a href="#修改-赋值-带懒惰标记" class="headerlink" title="修改(赋值)(带懒惰标记)"></a>修改(赋值)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) &#123;<br>        d[p] = (t-s+<span class="hljs-number">1</span>) *c, b[p] = c,v[p] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p]) &#123;<br>        d[p*<span class="hljs-number">2</span>] = b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>=<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r&gt;m)update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p])&#123;<br>        d[p * <span class="hljs-number">2</span>] += d[p] * (s-m+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += d[p] *(t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l &lt;= m) sum = getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDLBITS-CS450</title>
    <link href="/2024/09/25/HDLBITS-CS450/"/>
    <url>/2024/09/25/HDLBITS-CS450/</url>
    
    <content type="html"><![CDATA[<h1 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h1><p><img src="image-20240925222315525.png" alt="timer"></p><blockquote><p>模拟一个计时器,当Load为1时,载入data,指定其为倒计时的时间;当load为0时,时间减一.当倒计时结束时将tc输出为高电平</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br><span class="hljs-keyword">input</span> clk, <br><span class="hljs-keyword">input</span> load, <br><span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data, <br><span class="hljs-keyword">output</span> tc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] ct;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<span class="hljs-keyword">begin</span><br>            ct &lt;= data;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (ct == <span class="hljs-number">0</span>)<span class="hljs-keyword">begin</span><br>                ct &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                ct &lt;= ct - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> tc = (ct ==<span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="counter-2bc"><a href="#counter-2bc" class="headerlink" title="counter 2bc"></a>counter 2bc</h1><p><img src="image-20240926161655168.png" alt="counter 2bc"></p><blockquote><p>模拟一个二位计数器,当<code>train_valid</code>为高电平时,计数器根据<code>train_taken</code>改变状态,如果高电平则加一,反之减一.当计数器减少到0时,将不会再减少,而是保持原状;增加到3时,将不会再增加,而是保持原状.<code>areset</code>为异步复位,将计数器复位到<code>2&#39;b01</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            state &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                    state &lt;= state &lt; <span class="hljs-number">3</span> ? state + <span class="hljs-number">1</span> : <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    state &lt;= state &gt; <span class="hljs-number">0</span> ? state-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                state &lt;= state;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="history-shift"><a href="#history-shift" class="headerlink" title="history shift"></a>history shift</h1><p><img src="image-20240926162359702.png" alt="history shift1"></p><p><img src="image-20240926162425714.png" alt="history shift2"></p><blockquote><p>32位历史移位寄存器,并搭配回滚功能.</p><p>当<code>predict_valid</code>为高电平时,表示当前正处于预测状态,寄存器从LSB一侧移入一位预测的结果(<code>predict_taken</code>)</p><p>当<code>mispredicted</code>为高电平时,意味着预测发生错误,此时寄存器必须回滚到发生错误之前的状态(这里原文说的是”冲刷流水线”),并丢弃那些错误发生之后的状态(younger)</p><p>当<code>predict_valid</code>,<code>mispredicted</code>同时发生,后者优先级更高</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span> predict_valid,<br>    <span class="hljs-keyword">input</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] train_history<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history = <span class="hljs-number">32&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                predict_history &lt;= predict_history;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="gshare"><a href="#gshare" class="headerlink" title="gshare"></a>gshare</h1><p><img src="%E5%B1%8F%E5%B9%95%E6%88%AA%E5%9B%BE_26-9-2024_162629_hdlbits.01xz.net.jpeg" alt="gshare"></p><blockquote><p>根据题意,我们要增加128个2位PHT(pattern history table,模式匹配表),PHT根据7位<code>train_history</code>与7位<code>train_pc</code>异或结果进行寻址</p><p>电路分为两大部分:预测+训练.两者分别参考<em>history shift</em>与<em>counter 2bc</em></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span>  predict_valid,<br>    <span class="hljs-keyword">input</span>  [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_pc,<br>    <span class="hljs-keyword">output</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_history,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_pc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] PHT[<span class="hljs-number">127</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)<span class="hljs-keyword">begin</span><br>              PHT[i] &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid &amp;&amp; train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid) <span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>], predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b11</span> ? <br>                <span class="hljs-number">2&#x27;b11</span> : PHT[train_history ^ train_pc] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b0</span> ? <br>                <span class="hljs-number">2&#x27;b0</span> : PHT[train_history ^ train_pc] - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>                    <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> predict_taken = PHT[predict_history ^ predict_pc][<span class="hljs-number">1</span>];<br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 深克隆与浅克隆</title>
    <link href="/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    <url>/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-深克隆与浅克隆"><a href="#Java-深克隆与浅克隆" class="headerlink" title="Java 深克隆与浅克隆"></a>Java 深克隆与浅克隆</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><blockquote><p>在克隆对象时,只复制对象本身及其内部引用的基本数据类型字段的值,而不复制引用类型字段所指向的对象.这意味着克隆后的对象和原始对象会共享一部分引用对象</p></blockquote><p>下面是一份Java代码样例.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>        <span class="hljs-keyword">return</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>,<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> +  adv2.getName());<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*output:</span><br><span class="hljs-comment">10 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><blockquote><p>可以看到,代码对Adventurer类进行了<code>clone()</code>方法的重载,但并没有对其引用类<code>Weapon</code>类进行克隆.这样的克隆方法只复制了<code>Adventurer</code>类所持有的<code>name</code>,而没有复制<code>Weapon</code>.</p></blockquote><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><blockquote><p>我们对重载<code>clone()</code>方法做修改,使其可以复制引用类Weapon类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我们调用<code>Weapon</code>的创建方法,使其复制了一个新的Weapon并将其作为复制对象的引用类.代码重新运行的结果如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8</span> <span class="hljs-number">10</span><br>xiaohong xiaoming<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,对adv2(第二个<code>Adventurer</code>类)的<code>Weapon</code>进行修改,并不会改变<code>adv1</code>的Weapon的<code>atk</code>值,说明两个<code>Adventurer</code>类所引用的<code>Weapon</code>类已不是同一个.</p></blockquote><h2 id="深克隆方法"><a href="#深克隆方法" class="headerlink" title="深克隆方法"></a>深克隆方法</h2><p>在 Java 中，常见的实现深克隆的方式有：</p><ol><li>通过继承 <code>Cloneable</code> 接口，重写 <code>clone()</code> 方法实现深克隆；</li><li>通过序列化与反序列化的方式实现深克隆；</li><li>第三方工具类实现深克隆，克隆对象需继承 <code>Serializable</code> 接口。</li></ol><h3 id="Override-clone"><a href="#Override-clone" class="headerlink" title="Override clone()"></a>Override clone()</h3><blockquote><p>前文已经介绍这种方法.</p><p>在<code>Object</code>类中的<code>clone()</code>方法的声明中包含了<code>throws CloneNotSupportedException</code>，因此如果你的类实现了<code>Cloneable</code>接口并重写了<code>clone()</code>方法，而在该方法中调用了<code>super.clone()</code>，那么你的方法也需要声明会抛出<code>CloneNotSupportedException</code>异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<span class="hljs-comment">// 复制本类</span><br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<span class="hljs-comment">// 复制引用类</span><br>    <span class="hljs-keyword">return</span> copy;<span class="hljs-comment">//返回复制对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Serialize-and-Deserialize"><a href="#Serialize-and-Deserialize" class="headerlink" title="Serialize and Deserialize"></a>Serialize and Deserialize</h3><blockquote><p>要实现序列化,我们首先改变<code>Adventurer</code>类与<code>Weapon</code>类的接口,将其修改为<code>Serializable</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br></code></pre></td></tr></table></figure><blockquote><p>通过新建<code>DeepCopyCloneUtil</code>类搭建<code>deepClone(T object)</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在<code>main()</code>中运行以下语句:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>    adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>    adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>    System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>    System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>得到结果为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">liming wangming<br><span class="hljs-number">23</span> <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><h3 id="Third-Party-Tools"><a href="#Third-Party-Tools" class="headerlink" title="Third-Party Tools"></a>Third-Party Tools</h3><blockquote><p>打开IDEA,文件-&gt;项目结构-&gt;库,点击”+”,选择”来自Maven”,输入com.google.code.gson进行搜索,下载对应安装包,对应导入语句为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br></code></pre></td></tr></table></figure><blockquote><p>我们利用Gson这个第三方库实现深克隆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br></code></pre></td></tr></table></figure><blockquote><p>运行结果:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Bob Alice<br><span class="hljs-number">19</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="附-整体代码"><a href="#附-整体代码" class="headerlink" title="附:整体代码"></a>附:整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>        copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>        <span class="hljs-keyword">return</span> copy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> + adv2.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>            adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>            adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>            System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>            System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>        adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>        adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>        System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>        System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">8 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">liming wangming</span><br><span class="hljs-comment">23 999</span><br><span class="hljs-comment">Bob Alice</span><br><span class="hljs-comment">19 100</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P0总结</title>
    <link href="/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="P0Q4-Logisim中的FSM"><a href="#P0Q4-Logisim中的FSM" class="headerlink" title="P0Q4:Logisim中的FSM"></a>P0Q4:Logisim中的FSM</h2><blockquote><p>通过搭建Mealy状态机来实现正则表达式的检测</p></blockquote><blockquote><p>首先要分清Mealy状态机和Moore状态机在Logisim电路搭建中的区别</p></blockquote><h3 id="Mealy状态机与Moore状态机"><a href="#Mealy状态机与Moore状态机" class="headerlink" title="Mealy状态机与Moore状态机"></a>Mealy状态机与Moore状态机</h3><h4 id="Mealy状态机"><a href="#Mealy状态机" class="headerlink" title="Mealy状态机"></a>Mealy状态机</h4><p><img src="image-20240924155626167.png" alt="Mealy状态机基本框架(同步复位)"></p><blockquote><p>Mealy状态机的输出由当前状态和输入两者共同决定</p></blockquote><h4 id="Moore状态机"><a href="#Moore状态机" class="headerlink" title="Moore状态机"></a>Moore状态机</h4><p><img src="image-20240924160204641.png" alt="Moore状态机框架(异步复位)"></p><blockquote><p>Moore状态机的输出由当前状态决定</p></blockquote><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>对于本题Mealy状态机,我们分以下四步完成搭建.</p><ol><li>确定状态编码,画出状态转移</li><li>搭建Mealy状态机框架,确定复位方式</li><li>实现状态转移的Logisim电路</li><li>实现输出逻辑的Logisim电路</li></ol><h4 id="确定状态编码-画出状态转移"><a href="#确定状态编码-画出状态转移" class="headerlink" title="确定状态编码,画出状态转移"></a>确定状态编码,画出状态转移</h4><table><thead><tr><th>编码</th><th>状态</th></tr></thead><tbody><tr><td>S0</td><td>IDLE(空闲,当reset置1时回到此状态)</td></tr><tr><td>S1</td><td>“b”</td></tr><tr><td>S2</td><td>“bb”</td></tr><tr><td>S3</td><td>“ba”,”bc”,”bba”或”bbc”</td></tr><tr><td>S4</td><td>满足正则表达式的状态</td></tr></tbody></table><p><img src="55c3cda2c7b623233f71ab3df85d9dc.jpg" alt="状态转移图"></p><h4 id="搭建Mealy状态机框架-确定复位方式"><a href="#搭建Mealy状态机框架-确定复位方式" class="headerlink" title="搭建Mealy状态机框架,确定复位方式"></a>搭建Mealy状态机框架,确定复位方式</h4><p><img src="image-20240924162641868.png" alt="Mealy状态机+同步复位"></p><h4 id="实现状态转移的Logisim电路"><a href="#实现状态转移的Logisim电路" class="headerlink" title="实现状态转移的Logisim电路"></a>实现状态转移的Logisim电路</h4><h5 id="确定In与state"><a href="#确定In与state" class="headerlink" title="确定In与state"></a>确定In与state</h5><blockquote><p>通过comparator联通对应的tunnel</p></blockquote><p><img src="image-20240924163022813.png" alt="确定输入In"></p><p><img src="image-20240924163130250.png" alt="确定上一个状态state"></p><h5 id="根据状态转移图搭建变换关系电路"><a href="#根据状态转移图搭建变换关系电路" class="headerlink" title="根据状态转移图搭建变换关系电路"></a>根据状态转移图搭建变换关系电路</h5><blockquote><p>通过与非门与multiplexer,实现变换关系.这里我们以s1为例说明,若s1与b均为1,则nxt置2,反之置为0.</p></blockquote><p><img src="image-20240924163249957.png" alt="S1状态可能出现的下一个状态"></p><h5 id="输出下一个状态"><a href="#输出下一个状态" class="headerlink" title="输出下一个状态"></a>输出下一个状态</h5><blockquote><p>利用或门性质,对于这13个输入,只有其中一个是有效的,其余皆为0(我在这里还加入了一个实际上无效果的$s4\rightarrow s0$,便于检查)</p></blockquote><p><img src="image-20240924163603386.png" alt="输出下一个状态"></p><h4 id="实现输出逻辑的Logisim电路"><a href="#实现输出逻辑的Logisim电路" class="headerlink" title="实现输出逻辑的Logisim电路"></a>实现输出逻辑的Logisim电路</h4><blockquote><p>考虑输入和当前状态两者,只有它们所决定的下一个状态为s4时,output才为1,否则为0</p></blockquote><p><img src="image-20240924163830605.png" alt="输出逻辑"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>状态存储器的复位方式包括<strong>异步复位</strong>和<strong>同步复位</strong>，二者的定义分别是什么？两种复位方式在 Verilog 中可以通过什么语句句式实现？在 Logisim 中又可以通过什么样的电路框架实现？</p><blockquote><p>同步复位:当时钟信号的上升沿到来时,若复位信号有效,对系统进行复位.</p><p>异步复位:当复位信号有效时,立即对系统进行复位.这一过程与时钟信号无关.</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 同步复位</span><br><span class="hljs-keyword">module</span> synchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 异步复位</span><br><span class="hljs-keyword">module</span> asynchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><blockquote><p>在Logisim中,寄存器的clear端口可以很方便地实现异步复位,而同步复位需要在信号输入D端口前加上一个multplexer,由areset决定信号不变还是置0,待下一次时钟信号上升沿输入寄存器</p></blockquote><p><img src="image-20240924165125605.png" alt="异步复位"></p><p><img src="image-20240924165228120.png" alt="同步复位"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>在 Verilog 中我们可以通过<code>initial</code>块对状态存储器的初值进行定义，在 Logisim 中我们可以通过哪些电路框架实现赋初值的功能？</p><blockquote><p>要实现对于是否处于初始状态的判断,我们需要用到Counter和plexer,基本逻辑框架如下</p></blockquote><p><img src="image-20240924170237417.png" alt="使用Counter实现初始赋值"></p><blockquote><p>基于此,我们可以实现一个带有初始赋值功能的寄存器</p></blockquote><p><img src="image-20240924170627688.png" alt="带有初始赋值功能的寄存器"></p><h2 id="P0Q1-CRC-校验码计算电路的设计与测试"><a href="#P0Q1-CRC-校验码计算电路的设计与测试" class="headerlink" title="P0Q1:CRC 校验码计算电路的设计与测试"></a>P0Q1:CRC 校验码计算电路的设计与测试</h2><h4 id="设计模二除法器"><a href="#设计模二除法器" class="headerlink" title="设计模二除法器"></a>设计模二除法器</h4><p><img src="image-20240924172513329.png" alt="模二除法器端口"></p><blockquote><p>注:本题不需要用到D端口</p></blockquote><p><img src="image-20240924172631774.png" alt="模二除法器"></p><h4 id="使用四位模二除法器搭建-8-位-CRC-校验码计算电路"><a href="#使用四位模二除法器搭建-8-位-CRC-校验码计算电路" class="headerlink" title="使用四位模二除法器搭建 8 位 CRC 校验码计算电路"></a>使用四位模二除法器搭建 8 位 CRC 校验码计算电路</h4><p><img src="image-20240924172846401.png" alt="CRC校验码计算电路"></p><h2 id="P0Q2-实现GRF"><a href="#P0Q2-实现GRF" class="headerlink" title="P0Q2:实现GRF"></a>P0Q2:实现GRF</h2><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p><img src="image-20240924194642759.png" alt="端口"></p><p><img src="image-20240924194631439.png" alt="功能"></p><p><img src="image-20240924185937157.png" alt="端口电路">    </p><h3 id="主要部件"><a href="#主要部件" class="headerlink" title="主要部件"></a>主要部件</h3><p><img src="image-20240924185908829.png" alt="32个32位寄存器"></p><p><img src="image-20240924185924211.png" alt="选择器组件"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h4><blockquote><p>在选择器组件中,我们必须将DMX(demultiplexer)中的three-state设置为yes</p><p>启用three-state后,会控制demultiplexer的输入输出端口进入高阻态</p></blockquote><p><img src="image-20240924193047096.png" alt="示例电路"></p><blockquote><p>先设定DMX的three-state为no,WE为1,IN为1,SEL为0,在时钟信号上升沿:</p></blockquote><p><img src="image-20240924193237747.png" alt="OUT1为高电平"></p><blockquote><p>可以看到寄存器1存储值为1,OUT1为高电平</p></blockquote><blockquote><p>接着再令SEL为1,在下一个时钟上升沿:</p></blockquote><p><img src="image-20240924193352492.png" alt="OUT1恢复为低电平,OUT2变为高电平"></p><blockquote><p>可以看到OUT1恢复为低电平,OUT2变为高电平,这其实并不符合我们的本意.OUT1此刻应该保持为高电平,且寄存器1不应该改变值为0.</p></blockquote><blockquote><p>最简便的对策就是勾选three-state,这样DMX的输出端口在未被SEL信号选中的时候会输出高阻值(X),避免对连接的寄存器和输出端口产生影响.</p></blockquote><p>P0附加题:ftoi</p><p><img src="image-20240925081703388.png" alt="主电路"></p><p><img src="image-20240925081714186.png" alt="normalize"></p><p><img src="image-20240925081724381.png" alt="补码器"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次上机</title>
    <link href="/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/"/>
    <url>/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><blockquote><p>搭建一个能处理三个输入指令的电路</p></blockquote><table><thead><tr><th>00</th><th>输出0</th></tr></thead><tbody><tr><td>01</td><td>输出上一次输出+1($a_n&#x3D;a_{n-1}+1$)</td></tr><tr><td>10</td><td>输出之前输出之和($a_n&#x3D;\mathop\Sigma\limits^{n-1}_{i&#x3D;0}a_i$)</td></tr></tbody></table><p><img src="image-20240923220646182.png" alt="image-20240923220646182"></p><p><img src="image-20240923220711838.png" alt="image-20240923220711838"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><blockquote><p>向量相乘</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out<br>    );<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] t;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(vector_a <span class="hljs-keyword">or</span> vector_b)<span class="hljs-keyword">begin</span><br>      t = <span class="hljs-number">5&#x27;b0</span>;<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>        t = t + (vector_a[i] * vector_b[i]);<br>      <span class="hljs-keyword">end</span><br>      out = t;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct_tb();<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b;<br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>      a=<span class="hljs-number">32&#x27;b0</span>;<br>      b=<span class="hljs-number">32&#x27;b0</span>;<br>      #<span class="hljs-number">100</span><br>      a=<span class="hljs-number">32&#x27;d10</span>;<br>      b=<span class="hljs-number">32&#x27;d10</span>;<br>    <span class="hljs-keyword">end</span><br>    dotProduct uvv(<span class="hljs-variable">.vector_a</span>(a), <span class="hljs-variable">.vector_b</span>(b), <span class="hljs-variable">.out</span>(out));<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><blockquote><p>MIPS求数组中最长连续递增子数组</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C语言示例代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>, curr;<br>    <span class="hljs-keyword">while</span> (n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;curr);<br>        <span class="hljs-keyword">if</span> (curr &gt; last)&#123;<br>            len += <span class="hljs-number">1</span>;<br>            max = len &gt; max ? len : max;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            len = <span class="hljs-number">1</span>;<br>        &#125;<br>        last = curr;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, max);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv max, $s1<br>.eqv len, $s2<br>.eqv curr, $s3<br>.eqv last, $s4<br><br>.macro printInt(%int)<br>move $a0, %int<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro forLoop(%ct,%n,%startLabel,%endLabel)<br>%startLabel:<br>beq %ct, %n, %endLabel<br>.end_macro<br><br>.macro forEnd(%ct,%startLabel,%endLabel)<br>addi %ct, %ct, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>li last, -1<br>li $t0, 0<br>inputInt(n)<br>forLoop($t0,n,start,end)<br>inputInt(curr)<br>ble curr, last, less<br>add len, len, 1<br>bge max, len, skip<br>move max, len<br>skip:<br>j tail<br>less:<br>li len, 1<br>tail:<br>move last, curr<br>forEnd($t0,start,end)<br><br>printInt(max)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS</title>
    <link href="/2024/09/23/MIPS/"/>
    <url>/2024/09/23/MIPS/</url>
    
    <content type="html"><![CDATA[<h2 id="数据声明"><a href="#数据声明" class="headerlink" title="数据声明"></a>数据声明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>pi:.double 3.145926<br>str:.asciiz &quot;hello, world\n&quot;<br>i:.word 3 <br>array1:.byte &#x27;a&#x27;,&#x27;b&#x27;#声明一个存储2个字符的数组<br>array2:.space 40#声明一个存放40字节的空间<br></code></pre></td></tr></table></figure><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub$t2,$t3,$t4#  $t2 = $t3 - $t4<br>addi$t2,$t3, 5#  $t2 = $t3 + 5;   &quot;add immediate&quot; (no sub immediate)<br>addu$t1,$t6,$t7#  $t1 = $t6 + $t7;   add as unsigned integers<br>subu$t1,$t6,$t7#  $t1 = $t6 + $t7;   subtract as unsigned integers<br><br>mult$t3,$t4#  multiply 32-bit quantities in $t3 and $t4, and store 64-bit<br>#  result in special registers Lo and Hi:  (Hi,Lo) = $t3 * $t4<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 运算结果存储在hi,lo（hi高位数据， lo地位数据）<br>div$t5,$t6#  Lo = $t5 / $t6   (integer quotient)<br>#  Hi = $t5 mod $t6   (remainder)<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 商数存放在 lo, 余数存放在 hi<br>mfhi$t0#  move quantity in special register Hi to $t0:   $t0 = Hi<br># 不能直接获取 hi 或 lo中的值， 需要mfhi, mflo指令传值给寄存器<br>mflo$t1#  move quantity in special register Lo to $t1:   $t1 = Lo<br>#  used to get at result of product or quotient<br><br>move$t2,$t3#  $t2 = $t3<br></code></pre></td></tr></table></figure><h2 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>myFloat:.float 123.456<br>pi:.double 3.1415926<br>zeroDouble:.double 0<br>enter:.asciiz &quot;\n&quot;<br>i:.word 3<br>.macro ent<br>li $v0, 4<br>la $a0, enter<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro <br><br>.macro writeInt(%k)<br>move $a0, %k<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.text<br>#print integer<br>li $v0, 1<br>li $a0, 12<br>syscall<br><br>ent<br>#print float<br>li $v0, 2<br>ldc1 $f12, myFloat<br>syscall<br><br>ent<br>#print double<br>li $v0,3<br>ldc1 $f2, pi<br>ldc1 $f0, zeroDouble<br>add.d $f12, $f2, $f0<br>syscall<br><br>ent<br>#use macro as a write function<br>li $t0, 4<br>writeInt($t0)<br><br>ent<br>#read and then print integer<br>li $v0, 5<br>syscall<br>add $a0, $0, $v0<br>li $v0, 1<br>syscall<br><br>ent<br>#read string<br>li $v0, 8<br>li $a1, 100<br>syscall<br>li $v0, 4<br>syscall<br></code></pre></td></tr></table></figure><h2 id="macro"><a href="#macro" class="headerlink" title="macro"></a>macro</h2><blockquote><p>宏</p></blockquote><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环-从0到n"><a href="#for循环-从0到n" class="headerlink" title="for循环(从0到n)"></a>for循环(从0到n)</h3><blockquote><p>C语言:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %n)<br>li $t7, 0<br>%startLabel:<br>bge $t7, %n, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环-从low到high"><a href="#for循环-从low到high" class="headerlink" title="for循环(从low到high)"></a>for循环(从low到high)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = low; i &lt; high; i++)&#123;<br>    <span class="hljs-comment">// body, 循环high-low次</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bge $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="while循环-两数比较"><a href="#while循环-两数比较" class="headerlink" title="while循环(两数比较)"></a>while循环(两数比较)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span> (num1 &lt; num2)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro while_begin(%startLabel, %endLabel, %num1, %num2)<br>%startLabel:<br>bge %num1, %num2, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Commitizen的使用</title>
    <link href="/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Commitizen的使用"><a href="#Commitizen的使用" class="headerlink" title="Commitizen的使用"></a>Commitizen的使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g commitizen<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>用以下指令代替git commit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cz</span><br></code></pre></td></tr></table></figure><h3 id="选择提交类型"><a href="#选择提交类型" class="headerlink" title="选择提交类型"></a>选择提交类型</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">feat:</span> A <span class="hljs-built_in">new</span> feature<br><span class="hljs-symbol">fix:</span> A bug fix<br><span class="hljs-symbol">docs:</span> Documentation only changes<br><span class="hljs-symbol">style:</span> Changes that <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> affect the meaning <span class="hljs-keyword">of</span> the code<br><span class="hljs-symbol">refactor:</span> A code change that neither fixes a bug nor adds a feature<br><span class="hljs-symbol">perf:</span> A code change that improves performance<br><span class="hljs-keyword">Select</span> the type <span class="hljs-keyword">of</span> change that you<span class="hljs-comment">&#x27;re commiting:</span><br></code></pre></td></tr></table></figure><h3 id="提交范围"><a href="#提交范围" class="headerlink" title="提交范围"></a>提交范围</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">scope</span> of <span class="hljs-keyword">this</span> change:<br></code></pre></td></tr></table></figure><p>通过回车键跳过,通过输入|换行</p><h3 id="简短描述"><a href="#简短描述" class="headerlink" title="简短描述"></a>简短描述</h3><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><h3 id="破坏性变更"><a href="#破坏性变更" class="headerlink" title="破坏性变更"></a>破坏性变更</h3><p>破坏性变更:本次提交会影响到其它部分的功能与之前的版本不兼容</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>本次提交是否解决了某个Issue</p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git指令</title>
    <link href="/2024/09/22/Git%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/09/22/Git%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add *.c<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># -p代表显示每次提交的内容差异,-2表示仅显示最近两次的提交</span><br>git <span class="hljs-built_in">log</span> -<span class="hljs-built_in">stat</span><br><span class="hljs-comment">#统计数据</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br>git <span class="hljs-built_in">log</span> --since =2.weeks<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -amend<br><span class="hljs-comment">#撤销</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br><span class="hljs-comment">#查看远程仓库</span><br>git remote add pb https://...<br><span class="hljs-comment"># pb是简写</span><br>git fetch [remote-name]<br><br>git push origin master<br><br>git show<br><br>git remote rename pb paul<br><span class="hljs-comment"># 重命名</span><br>git remote <span class="hljs-built_in">rm</span> paul<br><span class="hljs-comment"># 删除</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag<br><span class="hljs-comment"># 列出标签</span><br>git tag v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b iss53<br><span class="hljs-comment">#创建并切换到分支</span><br>git branch -d hotfix<br><span class="hljs-comment">#删除</span><br>git branch --merged<br>git branch --no-merged<br>git merge A.txt<br><span class="hljs-comment">#合并</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br><span class="hljs-comment">#从服务器上抓取数据</span><br>git checkout --track origin/serverfix<br>git checkout -b sf origin/serverfix<br><span class="hljs-comment"># 拉取分支,sf是自定义名</span><br>git branch -vv<br><span class="hljs-comment">#查看追踪分支</span><br>git branch -u orgin.serverfix<br><span class="hljs-comment"># 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br><span class="hljs-comment"># 从服务器上抓取本地没有的数据</span><br>git pull<br><span class="hljs-comment"># 含义是git fetch + git merge</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete serverfix<br><span class="hljs-comment"># 删除远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase master<br><span class="hljs-comment"># 将当前分支变基到master分支上</span><br></code></pre></td></tr></table></figure><p><img src="image-20240919142734429.png" alt="image-20240919142734429"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature<br>git rebase master<br></code></pre></td></tr></table></figure><p><img src="image-20240919142743629.png" alt="image-20240919142743629"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> /opt/git/project.git<br>git <span class="hljs-built_in">clone</span> file:///opt/git/project.git<br>git remote add local_proj /opt/git/project.git<br><span class="hljs-comment"># 增加本地版本库到现有的Git项目</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r test.git meteor041@github.com:meteor041/test.git<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~./ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 查看密钥</span><br>ssh-keygen<br><span class="hljs-comment"># chuang&#x27;jian</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣周赛415(字典树,KMP)</title>
    <link href="/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/"/>
    <url>/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/</url>
    
    <content type="html"><![CDATA[<h1 id="力扣周赛415"><a href="#力扣周赛415" class="headerlink" title="力扣周赛415"></a>力扣周赛415</h1><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><blockquote><p>T3数据量较小,可以使用字典树进行查找,由于可以查找前缀,将用于标记字符串结尾的EndNode删去,并将查找方法的返回值改为int类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q=newNode;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trietree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String s : words)&#123;<br>            trietree.insert(s);<br>            maxLen = Math.max(maxLen, s.length());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; target.length(); i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(i + maxLen, target.length());<br>            nextRight = Math.max(nextRight, left + trietree.search(target.substring(left,right)));<br>            <span class="hljs-keyword">if</span> (currRight == i)&#123;<br>                <span class="hljs-keyword">if</span> (nextRight == currRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    currRight = nextRight;<br>                &#125;<br>                step++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> step;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附-字典树模板"><a href="#附-字典树模板" class="headerlink" title="附:字典树模板"></a>附:字典树模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">27</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&#123;<br>    EndNode()&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q = q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br>        q.children[<span class="hljs-number">26</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndNode</span>();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> q.children[<span class="hljs-number">26</span>] != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trieTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        trieTree.insert(<span class="hljs-string">&quot;abcde&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcd&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;fjklnhmasdjk&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abc&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcde&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcdef&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><blockquote><p>字符串哈希</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1_070_777_777</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">char</span>[] t = target.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> t.length;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">8e8</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt((<span class="hljs-type">int</span>) <span class="hljs-number">1e8</span>);<br>        <span class="hljs-type">int</span>[] powBase = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] preHash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        powBase[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            powBase[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)((<span class="hljs-type">long</span>) powBase[i] * BASE % MOD);<br>            preHash[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)(((<span class="hljs-type">long</span>) preHash[i] * BASE + t[i]) % MOD);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            maxLen = Math.max(maxLen, w.length());<br>        &#125;<br>        Set&lt;Integer&gt;[] sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxLen];<br>        Arrays.setAll(sets, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; w.length(); j++)&#123;<br>                h = (h * BASE + w.charAt(j)) % MOD;<br>                sets[j].add((<span class="hljs-type">int</span>) h);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> calcSz(i, preHash, powBase, sets);<br>            nextRight = Math.max(nextRight, i+sz);<br>            <span class="hljs-keyword">if</span> (i == curRight)&#123;<br>                <span class="hljs-keyword">if</span> (i == nextRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                curRight = nextRight;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calcSz</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>[] preHash, <span class="hljs-type">int</span>[] powBase, Set&lt;Integer&gt;[] sets)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(preHash.length - <span class="hljs-number">1</span> - i, sets.length) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left + <span class="hljs-number">1</span> &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">subHash</span> <span class="hljs-operator">=</span> ( ((<span class="hljs-type">long</span>) preHash[i + mid] - (<span class="hljs-type">long</span>) preHash[i] * powBase[mid]) % MOD + MOD) % MOD;<br>            <span class="hljs-keyword">if</span> (sets[mid-<span class="hljs-number">1</span>].contains((<span class="hljs-type">int</span>) subHash))&#123;<br>                left = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><h3 id="前缀函数"><a href="#前缀函数" class="headerlink" title="前缀函数"></a>前缀函数</h3><h4 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h4><blockquote><p>计算字符串前k位多少位前缀和与后缀和相等,如”abcabcd”:[0,0,0,1,2,3,0]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, p = j;<br>                <span class="hljs-keyword">while</span> (p &lt;= i) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[k++] != arr[p++]) &#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    ret[i] = k;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(arr)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><blockquote><p>对于$ret<a href="k%3E1">k</a>$,它只可能比$ret[k-1]$多1,或者维持不变或减少,这里我们改为字符串输入,并使用subString()和equals()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s.substring(<span class="hljs-number">0</span>, j).equals(s.substring(i-j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>))) &#123;<br>                    ret[i] = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcd&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最终算法"><a href="#最终算法" class="headerlink" title="最终算法"></a>最终算法</h4><blockquote><p>考虑当$s[i+1] \neq s[ret[i]]$时如何跳转,令j为$s[i+1] \neq s[ret[i]]$时选择的第二长度</p><p>状态转移:$j^{(n)}&#x3D;\pi[j^{(n-1)}-1]$</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;<br>                j = ret[j-<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            ret[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcde&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><blockquote><p>Knuth-Morris-Pratt算法</p><p>给定一个文本text和字符串pattern,找到pattern在text中的所有出现</p><p>构造一个字符串:pattern+”#”+text,调用计算前缀函数的方法,获得结果数组,对于$i&gt;pattern.length()$,若$ret[i]&#x3D;&#x3D;pattern.length()$,则可以判断在text中的第$i-2\cdot pattern.length()$处出现pattern字符串</p><p>时间复杂度$O(n+m)$,空间复杂度$O(n+m)$(n,m分别为text,pattern的长度)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMP</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String text, String pattern)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> pattern + <span class="hljs-string">&quot;#&quot;</span> + text;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz1</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz2</span> <span class="hljs-operator">=</span> pattern.length();<br>        List&lt;Integer&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] lps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(p);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sz2 + <span class="hljs-number">1</span>; i &lt;= sz1 + sz2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (lps[i] == sz2) &#123;<br>                v.add(i-<span class="hljs-number">2</span> * sz2);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aab&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aabaabaabbcdaab&quot;</span>;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KMP</span>().search(t, p));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合逻辑电路</title>
    <link href="/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <url>/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><ul><li><p>一个PN结就是一只晶体二极管</p></li><li><p>正向导通:外加正向电压大于开启电压$V_D$,二极管导通,$U_D&#x3D;V_D$</p></li><li><p>反向截止:外加反向电压或电压小于开启电压$V_D$,二极管截止,$I_D&#x3D;0$</p></li><li><p>击穿:外加反向电压超过一个阈值$V_Z$时,二极管会被击穿,压降是$V_Z$</p></li></ul><p><img src="image-20240918174155826.png" alt="image-20240918174155826"></p><h2 id="晶体三极管"><a href="#晶体三极管" class="headerlink" title="晶体三极管"></a>晶体三极管</h2><p>图为NPN型</p><p><img src="image-20240918174330224.png" alt="image-20240918174330224"></p><p><img src="image-20240918174340598.png" alt="image-20240918174340598"></p><h2 id="与门"><a href="#与门" class="headerlink" title="与门"></a>与门</h2><p><img src="image-20240923172530685.png" alt="image-20240923172530685"></p><h2 id="或门"><a href="#或门" class="headerlink" title="或门"></a>或门</h2><p><img src="image-20240923172555968.png" alt="image-20240923172555968"></p><h2 id="非门"><a href="#非门" class="headerlink" title="非门"></a>非门</h2><p><img src="image-20240923172709926.png" alt="image-20240923172709926"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅲ</title>
    <link href="/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/"/>
    <url>/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅲ-addi-j"><a href="#构建单周期CPU记录Ⅲ-addi-j" class="headerlink" title="构建单周期CPU记录Ⅲ(addi, j)"></a>构建单周期CPU记录Ⅲ(addi, j)</h1><h2 id="addi"><a href="#addi" class="headerlink" title="addi"></a>addi</h2><p>对于addi,不需要新增器件,addi与add的不同,本质上是将其中一个寄存器换成了立即数.</p><p>比较两者的机器码</p><table><thead><tr><th><img src="image-20240912170401633.png" alt="add"></th></tr></thead><tbody><tr><td><img src="image-20240912170419516.png" alt="addi"></td></tr></tbody></table><p>可以发现:</p><ul><li>rs不变</li><li>rt的作用从原来的提供加数,变为赋值地址</li><li>rd消失,立即数代替rt成为加数</li></ul><p>因此修改如下:</p><ul><li>A1端口不变,仍然连接Instr[25:21]</li><li>SrcB不再接收Instr[20:16]的值,而是立即数</li><li>A3端口不再接收Instr[15:11]的值,而是Instr[20:16]</li></ul><p>我们对ALUSrc,RegDst两个信号作出修改</p><h2 id="j"><a href="#j" class="headerlink" title="j"></a>j</h2><p>对NXTAD(对下一个地址的计算器)做出修改,新增Jump信号</p><p><img src="image-20240912172223432.png" alt="NXTAD(新增Jump信号)"></p><h1 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h1><p><img src="image-20240912172136927.png" alt="整体"></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><table><thead><tr><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th></th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td></td></tr><tr><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> classListOfGenerics&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T item)</span> &#123; array.add(item)&#125;;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123; <span class="hljs-keyword">return</span> array.get(index)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不能创建泛型数组,一般解决方案是在任何想要创建泛型数组的地方使用ArrayList</p></blockquote><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Banana</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jonathan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Apple</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CovariantArrays</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Fruit[] fruit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>[<span class="hljs-number">10</span>];<br>        fruit[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Banana</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实际数组类型是Apple[],只能在其中放置Apple及其子类,若放入Fruit对象,会在运行时抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// incompatible types</span><br>List&lt;Fruit&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>Apple的List与Fruit的List不同.即使Apple是Fruit的子类,两者在类型上也不等价.</p></blockquote><blockquote><p>使用通配符解决该问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span>&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br><span class="hljs-comment">// correct</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅱ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq"><a href="#构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq" class="headerlink" title="构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)"></a>构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)</h1><h2 id="新增信号"><a href="#新增信号" class="headerlink" title="新增信号"></a>新增信号</h2><h3 id="RegDst"><a href="#RegDst" class="headerlink" title="RegDst"></a>RegDst</h3><p>1:从指令15:11位中读取数据到A3端口</p><p>0:从指令20:16位中读取数据到A3端口</p><h3 id="ALUSrc"><a href="#ALUSrc" class="headerlink" title="ALUSrc"></a>ALUSrc</h3><ul><li>1:从EXT中读取符号扩展的立即数</li><li>0:从寄存器文件RD2端口中读取数据</li></ul><h3 id="MemtoReg"><a href="#MemtoReg" class="headerlink" title="MemtoReg"></a>MemtoReg</h3><ul><li>1:将从数据存储器中读取的数据输出到WD3</li><li>0:将从ALU中读取的数据输出到WD3</li></ul><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><table><thead><tr><th>指令</th><th>RegDst</th><th>ALUSrc</th><th>MemtoReg</th><th>ALUControl</th></tr></thead><tbody><tr><td>R指令(add, sub, and, or, slt)</td><td>1</td><td>0</td><td>0</td><td>varies</td></tr><tr><td>lw,sw</td><td>0</td><td>1</td><td>1</td><td>010(+)</td></tr><tr><td>beq</td><td>x</td><td>0</td><td>x</td><td>110(-)</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><table><thead><tr><th>ALUOp</th><th>含义</th><th>ALUOp</th><th>含义</th></tr></thead><tbody><tr><td>00</td><td>加法</td><td>10</td><td>依赖于func</td></tr><tr><td>01</td><td>减法</td><td>11</td><td>无定义</td></tr></tbody></table><table><thead><tr><th>ALUOp</th><th>Funct</th><th>ALUControl</th></tr></thead><tbody><tr><td>00</td><td>X</td><td>010(加)</td></tr><tr><td>X1</td><td>X</td><td>110(减)</td></tr><tr><td>1X</td><td>100000(add)</td><td>010(加)</td></tr><tr><td>1X</td><td>100010(sub)</td><td>110(减)</td></tr><tr><td>1X</td><td>100100(and)</td><td>000(与)</td></tr><tr><td>1X</td><td>100101(or)</td><td>001(或)</td></tr><tr><td>1X</td><td>101010(slt)</td><td>111(小于置位)</td></tr></tbody></table><ul><li>这里引用图表来自黑皮书,采用两级判断(先判断ALUOp,再判断ALUControl值),这里我采用另一种方法,对于非R型指令直接输出ALUControl,对R型指令两级判断.(见后图CU)</li></ul><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100000(add,5:0)</p><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100010(sub,5:0)</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100100(and,5:0)</p><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100101(or, 5:0)</p><h3 id="slt"><a href="#slt" class="headerlink" title="slt"></a>slt</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 101010(slt, 5:0)</p><h3 id="beq"><a href="#beq" class="headerlink" title="beq"></a>beq</h3><p>000100(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><h3 id="ALU-1"><a href="#ALU-1" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911230937221.png" alt="ALU"></p><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p><img src="image-20240911225650083.png" alt="CU"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911225716228.png" alt="整体"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅰ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅰ-初步-包括lw和sw"><a href="#构建单周期CPU记录Ⅰ-初步-包括lw和sw" class="headerlink" title="构建单周期CPU记录Ⅰ(初步,包括lw和sw)"></a>构建单周期CPU记录Ⅰ(初步,包括lw和sw)</h1><h2 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h2><h3 id="PC-Program-Counter-程序计数器"><a href="#PC-Program-Counter-程序计数器" class="headerlink" title="PC(Program Counter,程序计数器)"></a>PC(Program Counter,程序计数器)</h3><p><img src="image-20240911170903742.png" alt="image-20240911170903742"></p><h3 id="IM-Instuction-Memory-指令存储器"><a href="#IM-Instuction-Memory-指令存储器" class="headerlink" title="IM(Instuction Memory,指令存储器)"></a>IM(Instuction Memory,指令存储器)</h3><p><img src="image-20240911200511537.png" alt="image-20240911200511537"></p><h3 id="GRF-Register-File-寄存器文件"><a href="#GRF-Register-File-寄存器文件" class="headerlink" title="GRF(Register File,寄存器文件)"></a>GRF(Register File,寄存器文件)</h3><p><img src="image-20240911200549683.png" alt="image-20240911200549683"></p><h3 id="DM-Data-Memory-数据存储器"><a href="#DM-Data-Memory-数据存储器" class="headerlink" title="DM(Data Memory,数据存储器)"></a>DM(Data Memory,数据存储器)</h3><p><img src="image-20240911200524349.png" alt="image-20240911200524349"></p><h2 id="附加部件"><a href="#附加部件" class="headerlink" title="附加部件"></a>附加部件</h2><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911200643385.png" alt="image-20240911200643385"></p><h3 id="SPLT-splitter-分离器"><a href="#SPLT-splitter-分离器" class="headerlink" title="SPLT(splitter,分离器)"></a>SPLT(splitter,分离器)</h3><p><img src="image-20240911200703680.png" alt="image-20240911200703680"></p><h3 id="EXT-extender-扩位器"><a href="#EXT-extender-扩位器" class="headerlink" title="EXT(extender,扩位器)"></a>EXT(extender,扩位器)</h3><p><img src="image-20240911200729925.png" alt="image-20240911200729925"></p><h3 id="NXTAD-Next-Address-下一个地址的计算器"><a href="#NXTAD-Next-Address-下一个地址的计算器" class="headerlink" title="NXTAD(Next Address,下一个地址的计算器)"></a>NXTAD(Next Address,下一个地址的计算器)</h3><p><img src="image-20240911200825778.png" alt="image-20240911200825778"></p><h2 id="信号控制分析"><a href="#信号控制分析" class="headerlink" title="信号控制分析"></a>信号控制分析</h2><h3 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h3><table><thead><tr><th>指令</th><th>RegWrite</th><th>ALUControl[2:0]</th><th>MemWrite</th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>010</td><td>0</td></tr><tr><td>sw</td><td>0</td><td>010</td><td>1</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="信号说明"><a href="#信号说明" class="headerlink" title="信号说明"></a>信号说明</h3><h4 id="RegWrite"><a href="#RegWrite" class="headerlink" title="RegWrite"></a>RegWrite</h4><ul><li><p>连接WE3端口</p></li><li><p>1:将数据写入寄存器</p></li><li><p>0:没有写入寄存器文件的数据</p></li></ul><h4 id="ALUControl"><a href="#ALUControl" class="headerlink" title="ALUControl"></a>ALUControl</h4><ul><li>010:ALU实现加法</li></ul><h4 id="MemWrite"><a href="#MemWrite" class="headerlink" title="MemWrite"></a>MemWrite</h4><ul><li>1:向存储器写入数据</li><li>0:没有向存储器写入数据</li></ul><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p>据此,我们可以搭建一个初步的信号控制</p><p>lw:100011(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p>sw:101011 (31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p><img src="image-20240911203252095.png" alt="image-20240911203252095"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911203327623.png" alt="image-20240911203327623"></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="使用Python批量构造代码"><a href="#使用Python批量构造代码" class="headerlink" title="使用Python批量构造代码"></a>使用Python批量构造代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">s =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;4\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Register\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(T_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Y, Z = <span class="hljs-number">90</span>, <span class="hljs-number">30</span><br><span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    Y += <span class="hljs-number">80</span><br>    T = Y-<span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;Y_&quot;</span>,<span class="hljs-built_in">str</span>(Y)).replace(<span class="hljs-string">&quot;T_&quot;</span>, <span class="hljs-built_in">str</span>(T)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(X)).replace(<span class="hljs-string">&quot;Z_&quot;</span>,<span class="hljs-built_in">str</span>(Z)))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;&lt;comp lib=\&quot;0\&quot; loc=\&quot;(80,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(130,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>H = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    H += <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;H_&quot;</span>,<span class="hljs-built_in">str</span>(H)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(x)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Array</title>
    <link href="/2024/09/11/Java-Array/"/>
    <url>/2024/09/11/Java-Array/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NewClass[] a;<br>NewClass[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>[<span class="hljs-number">10</span>];<br>NewClass[] c = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br>NewClass[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br></code></pre></td></tr></table></figure><h2 id="返回数组"><a href="#返回数组" class="headerlink" title="返回数组"></a>返回数组</h2><ul><li>Java可以直接返回数组</li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] b = &#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Arrays实用功能"><a href="#Arrays实用功能" class="headerlink" title="Arrays实用功能"></a>Arrays实用功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><blockquote><p>以单个元素填充数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>Arrays.fill(m1,<span class="hljs-number">1</span>);<br>System.out.println(Arrays.toString(m1));<br><span class="hljs-comment">// output: [1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.sort(s1);<br>System.out.println(Arrays.toString(s1));<br><br><span class="hljs-comment">// [2, 5, 6, 7, 7, 8, 9, 10, 34]</span><br></code></pre></td></tr></table></figure><h3 id="equals-deepEquals"><a href="#equals-deepEquals" class="headerlink" title="equals() &amp; deepEquals()"></a>equals() &amp; deepEquals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br>System.out.println(Arrays.equals(a1,a2));<br><span class="hljs-comment">// true</span><br><span class="hljs-type">int</span>[][] deep1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] deep2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.deepEquals(deep1, deep2));<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="copyOf-copyOfRange"><a href="#copyOf-copyOfRange" class="headerlink" title="copyOf() &amp; copyOfRange()"></a>copyOf() &amp; copyOfRange()</h3><blockquote><p>复制数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">4</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">3</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8,9,7]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">9</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="toString-deepToString"><a href="#toString-deepToString" class="headerlink" title="toString() &amp; deepToString()"></a>toString() &amp; deepToString()</h3><blockquote><p>方便打印数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[][] d1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.toString(p1));<br>System.out.println(Arrays.deepToString(d1));<br><span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">//[[1, 2], [3, 4], [5, 6]]</span><br></code></pre></td></tr></table></figure><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch()"></a>binarySearch()</h3><blockquote><p>二分法查找,类同于Python中的bisect.bisect_left()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] pos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">90</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">76</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">54</span>,<span class="hljs-number">34</span>&#125;;<br>Arrays.sort(pos);<br>System.out.println(Arrays.toString(pos));<br>System.out.println(Arrays.binarySearch(pos,<span class="hljs-number">78</span>));<br><span class="hljs-comment">// [1, 3, 4, 5, 5, 6, 7, 8, 34, 54, 67, 76, 78, 90]</span><br><span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h3 id="asList"><a href="#asList" class="headerlink" title="asList()"></a>asList()</h3><blockquote><p>常用于声明对象组成的列表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; l1 = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>System.out.println(l1);<br><span class="hljs-comment">// [1, 2, 3]</span><br>List&lt;Student&gt; l2 = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-number">21</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">19</span>));<br>System.out.println(l2);<br><span class="hljs-comment">// [xiaoming 21, xiaomei 19]</span><br></code></pre></td></tr></table></figure><h3 id="setAll"><a href="#setAll" class="headerlink" title="setAll()"></a>setAll()</h3><blockquote><p>使用提供的生成器函数设置指定数组的所有元素以计算每个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt;[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxlen];<br>Arrays.setAll(s, i -&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;());<br>s[<span class="hljs-number">0</span>].add(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2024/09/11/Java-String/"/>
    <url>/2024/09/11/Java-String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>String对象不可变</strong></p><p>(修改字符串的方法实质上是生成了一个新的String对象)</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><table><thead><tr><th>new StringBuilder(String s)</th><th>生成方法</th></tr></thead><tbody><tr><td>append()</td><td>增加字符</td></tr><tr><td>deleteCharAt(int index)</td><td>删除指定索引的字符</td></tr><tr><td>toString()</td><td>生成字符串</td></tr><tr><td>reverse()</td><td>逆转</td></tr><tr><td>replace(int start, int end, String str)</td><td>替换</td></tr><tr><td>delete(int start, int end)</td><td>删除</td></tr><tr><td>insert(int offset, String str)</td><td>插入</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        result.append(rand.nextInt(<span class="hljs-number">100</span>));<br>        result.append(<span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    result.delete(result.length()-<span class="hljs-number">2</span>, result.length());<br>    result.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无意识递归"><a href="#无意识递归" class="headerlink" title="无意识递归"></a>无意识递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfiniteRecursion</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; InfiniteRecursion address: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;InfiniteRecursion&gt; v = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;InfiniteRecursion&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InfiniteRecursion</span>());<br>        &#125;<br>        System.out.println(v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// println(v)中调用了InfiniteRecursion类的toString方法,toString方法让this发生了自动类型转换,继续实现toString方法,就这样实现了无限递归.</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>参数,重载版本</th><th>应用</th></tr></thead><tbody><tr><td>length()</td><td></td><td>字符个数</td></tr><tr><td>charAt()</td><td>Int索引</td><td>该缩影位置上的char</td></tr><tr><td>getChar(),getBytes()</td><td></td><td>复制</td></tr><tr><td>toCharArray()</td><td></td><td>生成char[]</td></tr><tr><td>equals(),equalsIgnoreCase()</td><td></td><td>比较字符串</td></tr><tr><td>compareTo()</td><td></td><td>按词典序比较字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> net.mindview.util.Print.print;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good,world&quot;</span>, s2=<span class="hljs-string">&quot;hello,world&quot;</span>;<br>        print(s1.regionMatches(<span class="hljs-number">5</span>,s2,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//true</span><br>        print(s1.startsWith(<span class="hljs-string">&quot;g&quot;</span>)); <span class="hljs-comment">//true</span><br>        print(s1.endsWith(<span class="hljs-string">&quot;g&quot;</span>));<span class="hljs-comment">//false</span><br>        print(s1.length());<span class="hljs-comment">//10</span><br>        print(s1.charAt(<span class="hljs-number">0</span>));<br>        print(s1.compareTo(s2));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zzz&quot;</span>, s4 = <span class="hljs-string">&quot;AAA&quot;</span>;<br>        print(s1.compareTo(s3));<br>        print(s1.compareToIgnoreCase(s4));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a>格式化说明符</h2><table><thead><tr><th align="center">类型转换字符</th><th></th><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">d</td><td>十进制</td><td align="center">e</td><td>浮点数(科学计数)</td></tr><tr><td align="center">c</td><td>Unicode字符</td><td align="center">x</td><td>十六进制</td></tr><tr><td align="center">b</td><td>Boolean</td><td align="center">h</td><td>散列码</td></tr><tr><td align="center">s</td><td>String</td><td align="center">%</td><td>%</td></tr><tr><td align="center">f</td><td>浮点数</td><td align="center"></td><td></td></tr></tbody></table><h2 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">-?查找带负号的数<br><span class="hljs-string">\\d</span> 表示一位数字<br><span class="hljs-string">\\\\</span> 普通反斜线<br>-?<span class="hljs-string">\\d+</span><br>(-|<span class="hljs-string">\\+)?</span> 一个-或者一个+<br><span class="hljs-string">\\W</span> 非单词字符<br><span class="hljs-string">\\w</span> 单词字符<br><span class="hljs-string">\?</span> 问号<br></code></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><table><thead><tr><th>B</th><th>指定字符</th></tr></thead><tbody><tr><td>\xhh</td><td>十六进制值为oxhh的字符</td></tr><tr><td>\uhhhh</td><td>十六进制值为oxhhhh的字符</td></tr><tr><td>\t</td><td>Tab</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\e</td><td>转义</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table><thead><tr><th>.</th><th>任意字符</th></tr></thead><tbody><tr><td>[abc]</td><td>a|b|c</td></tr><tr><td>[^abc]</td><td>否定</td></tr><tr><td>[a-zA-Z]</td><td>a-z,A-Z范围</td></tr><tr><td>[abc[hij]]</td><td>a|b|c|h|i|j</td></tr><tr><td>[a-z&amp;&amp;[hij]]</td><td>h|i|j</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>词字符</td></tr><tr><td>\W</td><td>非词字符</td></tr></tbody></table><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><table><thead><tr><th>^</th><th>一行的起始</th></tr></thead><tbody><tr><td>$</td><td>一行的结束</td></tr><tr><td>\b</td><td>词的边界</td></tr><tr><td>\B</td><td>非词的边界</td></tr><tr><td>\G</td><td>前一个匹配的结束</td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li>贪婪型:尽可能多的匹配</li><li>勉强型:匹配最少的字数</li><li>占有型:防止回溯,java中才有</li></ul><table><thead><tr><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>符合匹配</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>一个或零个X</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>一个或多个X</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次,且不超过m次</td></tr></tbody></table><h3 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile()"></a>Pattern.compile()</h3><p>编译正则表达式</p><h3 id="Pattern-matcher"><a href="#Pattern-matcher" class="headerlink" title="Pattern.matcher()"></a>Pattern.matcher()</h3><p>生成Matcher对象</p><h3 id="Matcher-matches"><a href="#Matcher-matches" class="headerlink" title="Matcher.matches()"></a>Matcher.matches()</h3><p>判断整个输入字符串是否匹配正则表达式模式</p><h3 id="Matcher-find-Matcher-find-int-i"><a href="#Matcher-find-Matcher-find-int-i" class="headerlink" title="Matcher.find()&#x2F;Matcher.find(int i)"></a>Matcher.find()&#x2F;Matcher.find(int i)</h3><p>查找(int i可以指定起始位置)</p><h3 id="Pattern标记"><a href="#Pattern标记" class="headerlink" title="Pattern标记"></a>Pattern标记</h3><table><thead><tr><th>编译标记</th><th>效果</th></tr></thead><tbody><tr><td>Pattern.CANON_EQ</td><td>规范的等价性</td></tr><tr><td>Pattern.CASE_INSENSITIVE(?i)</td><td>大小写不敏感</td></tr><tr><td>Pattern.COMMENTS(?x)</td><td>忽略空格符,注释</td></tr><tr><td>Pattern.DOTALL(?x)</td><td>“.”匹配所有字符,包括行终结符</td></tr><tr><td>Pattern.MULTILINE(?m)</td><td>^,$匹配一行的开始和结束</td></tr><tr><td>Pattern.UNICODE_CASE(?u)</td><td>大小写不敏感按照Unicode标准</td></tr><tr><td>Pattern.UNIX_LINES(?d)</td><td>.,^,$均只识别行终结符\n</td></tr></tbody></table><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(SimpleRead.input);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stdin.nextLine();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stdin.nextInt();<br><span class="hljs-type">double</span> <span class="hljs-variable">favourite</span> <span class="hljs-operator">=</span> stdin.nextDouble();<br></code></pre></td></tr></table></figure><ul><li>Scanner的构造器可以接受任何类型的输入对象,包括File对象,InputStream对象,String或Readable对象.</li></ul><h3 id="useDelimiter"><a href="#useDelimiter" class="headerlink" title="useDelimiter()"></a>useDelimiter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDelimiter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-string">&quot;12, 42, 12&quot;</span>);<br>        scanner.useDelimiter(<span class="hljs-string">&quot;\\s*,\\s*&quot;</span>);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt())&#123;<br>            System.out.println(scanner.nextInt());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*out:</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">42</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/11/hello-world/"/>
    <url>/2024/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
