<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>面向对象设计第一次作业及评测机思路</title>
    <link href="/2025/03/03/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E5%8F%8A%E8%AF%84%E6%B5%8B%E6%9C%BA%E6%80%9D%E8%B7%AF/"/>
    <url>/2025/03/03/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E8%AE%BE%E8%AE%A1%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%BD%9C%E4%B8%9A%E5%8F%8A%E8%AF%84%E6%B5%8B%E6%9C%BA%E6%80%9D%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="结构分析"><a href="#结构分析" class="headerlink" title="结构分析"></a>结构分析</h1><ul><li>表达式 = 项 +|- 项 +|- …</li><li>项 = 因子 <em> 因子 </em> …</li><li>因子有三种:<ul><li>常数因子: +|- 常数</li><li>表达式因子: +|- (…) <sup><a href="#fn_ 常数" id="reffn_ 常数"> 常数</a></sup></li><li>变量因子: +|- x <sup><a href="#fn_ 常数" id="reffn_ 常数"> 常数</a></sup></li></ul></li></ul><h1 id="功能实现"><a href="#功能实现" class="headerlink" title="功能实现"></a>功能实现</h1><p>本次代码基于训练题给出的代码框架进行增添完善,主要增加实现的功能为:</p><ol><li>增加对变量因子和表达式因子的识别,加强对部分符号如”x”,”(“,”)”,”^”等的处理.</li><li>修改<code>Parser</code>的<code>parseExpr</code>等方法,处理好正负号的潜在问题.</li><li>构造<code>ExpressionNode</code>类,构建结点树来表达字符串,并提供<code>evaluate()</code>接口对表达式进行计算.</li><li>构造<code>Printer</code>类,提供<code>printExpr</code>方法,对结点树的计算结果(以<code>HashMap</code>为呈现形式)转换为字符串,并打印.</li></ol><h1 id="代码思路"><a href="#代码思路" class="headerlink" title="代码思路"></a>代码思路</h1><h2 id="词法分析器Lexer"><a href="#词法分析器Lexer" class="headerlink" title="词法分析器Lexer"></a>词法分析器Lexer</h2><p>词法分析器的主要函数包含<code>getNumber/Var()</code>,<code>next()</code>,<code>peek()</code>.</p><p>其中的重要参数为<code>curToken</code>和<code>pos</code>,<code>curToken</code>表示即将进入处理序列的字符,可以通过<code>peek()</code>方法获取,<code>pos</code>表示当前待处理的因子的起始位置,<code>getNumber/Var()</code>被调用时会从pos位置开始接受数字/变量</p><h2 id="解析器Parser"><a href="#解析器Parser" class="headerlink" title="解析器Parser"></a>解析器Parser</h2><p>解析器用于将输入的数据转化为所需要的数据结构(这里我们用的是<code>HashMap</code>作为数据结构).其方法包括<code>parseExpr()</code>,<code>parseTerm()</code>,<code>parseFactor()</code></p><h3 id="对于正负号的处理"><a href="#对于正负号的处理" class="headerlink" title="对于正负号的处理"></a>对于正负号的处理</h3><p>根据题目要求,我们可以构造一些极端的样例,例如<code>++-3</code>,<code>--(+-9)</code>.这类正负号叠加使用的情况要求程序能够细化对符号的处理.</p><p>根据规则,每个正负号都有各自的归属,例如:<code>++-3</code>,第一个<code>+</code>置于表达式中,赋给第一个项;第二个<code>+</code>置于项中,赋给第一个因子;第三个<code>-</code>置于因子中,表示<code>-3</code>.因此,我们可以在<code>parseExpr</code>和<code>parseTerm</code>新增代码.<code>parseExpr()</code>中,我们在调用<code>parseTerm()</code>之前先判断是否存在负号.如果存在,则设置一个存储-1的常数节点,再调用<code>parseTerm()</code>得到存储项的节点,由这两个节点相乘得到一个乘法节点,然后返回这个乘法节点.<code>parseTerm()</code>同理.</p><p>另外,我们在<code>parseNumber()</code>中加入对正负号和前导零的处理逻辑,这比较简单,不做赘述.</p><h1 id="评测机搭建思路"><a href="#评测机搭建思路" class="headerlink" title="评测机搭建思路"></a>评测机搭建思路</h1><h1 id="改进思路"><a href="#改进思路" class="headerlink" title="改进思路"></a>改进思路</h1><h2 id="正则表达式实现"><a href="#正则表达式实现" class="headerlink" title="正则表达式实现"></a>正则表达式实现</h2>]]></content>
    
    
    <categories>
      
      <category>面向对象设计</category>
      
    </categories>
    
    
    <tags>
      
      <tag>OO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>现代优化算法</title>
    <link href="/2025/01/17/%E7%8E%B0%E4%BB%A3%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/"/>
    <url>/2025/01/17/%E7%8E%B0%E4%BB%A3%E4%BC%98%E5%8C%96%E7%AE%97%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="模拟退火算法"><a href="#模拟退火算法" class="headerlink" title="模拟退火算法"></a>模拟退火算法</h1><p>假设材料在状态i之下的能量为$E(i)$,那么材料在温度$T$时从状态$i$进入状态$j$就遵循如下规律:</p><ol><li><p>如果$E(j)\leq E(i)$,则接受该状态被转换</p></li><li><p>如果$E(j)&gt;E(i)$,则状态一如下概率被接受:</p><script type="math/tex; mode=display">e^{\dfrac{E(i)-E(j)}{KT}}</script></li></ol><p>材料达到热平衡时,材料处于状态$i$的概率满足玻尔兹曼分布</p><script type="math/tex; mode=display">P_T(X=i)=\dfrac{e^{-\dfrac{E(i)}{KT}}}{\sum_{j\in S}e^{-\dfrac{E(j)}{KT}}}</script><p>X为材料当前状态的随机变量,S为状态空间集合</p><p>显然:</p><script type="math/tex; mode=display">\lim_{T\rightarrow \infty}\dfrac{e^{_\dfrac{E(i)}{KT}}}{\sum_{j\in S}e^{-\dfrac{E(j)}{KT}}}=\dfrac{1}{|S|}</script><p>|S|为集合S中状态的数量</p><p>这表明所有状态在高温下具有相同的概率.而当温度下降时,有</p><script type="math/tex; mode=display">\lim_{T\rightarrow 0}\dfrac{e^{\dfrac{K(i)-E_{\min}}{KT}}}{\sum_{j\in S}e^{-\dfrac{E(j)-E_{\min}}{KT}}}=\begin{cases}\dfrac{1}{|S_{\min}|},i\in S_{\min}\\0,else\end{cases}</script><p>$E_{\min}=\min_{j\in S}E(j)且S_{\min}=\{i|E(i)=E_\min\}$</p><p><strong>假定要解决的问题是寻找最小值的优化问题.</strong></p><p>考虑一个组合优化问题,优化函数$f:x\rightarrow R^+$,其中$x\in S$,表示优化问题的一个可行解,$R^+=\{y|y\in R,y\geq 0\}$,S表示函数的定义域,$N(x)\subseteq S$表示x的一个邻域集合</p><p>给定一个初始温度$T_0$和该优化问题的一个初始解$x(0)$,并由$x(0)$生成下一个解$x’\in N[x(0)]$,是否接受$x’$作为一个新界$x(1)$依赖于如下概率:</p><script type="math/tex; mode=display">P(x(0)\rightarrow x')=\begin{cases}1,&f(x')<f(x(0))\\e^{-\dfrac{f(x')-f(x(0))}{T_0}}&else\\\end{cases}</script><p><strong>在温度$T_i$下,经过很多次的转移之后,降低温度$T_i$,得到$T_{i+1}&lt;T_i$,在$T_{i+1}$下重复上述过程,因此整个优化过程就是不断寻找新解和缓慢降温的交替过程.</strong></p><p>在温度$T_i$下的平衡态$x_i$的分布由下式给出:</p><script type="math/tex; mode=display">P_i(T_i)=\dfrac{e^{-\dfrac{f(x_i)}{T_i}}}{\mathop\sum\limits_{j\in S}e^{-\dfrac{f(x_j)}{T_i}}}</script><p><strong>伪代码</strong>如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">double</span> T = <span class="hljs-number">2000</span>;<br><span class="hljs-type">double</span> dT = <span class="hljs-number">0.99</span>;<br><span class="hljs-type">double</span> eps = <span class="hljs-number">1e-14</span>;<br><span class="hljs-keyword">while</span> (T &lt; eps) &#123;<br>    <span class="hljs-comment">// 退火操作</span><br>    T = T * dT;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="遗传算法"><a href="#遗传算法" class="headerlink" title="遗传算法"></a>遗传算法</h1><ol><li>根据具体问题确定可行解域,确定一种编码方式,能用数值串或者字符串表示可行解域的每一解</li><li>对每一解应用一个度量好坏的依据,它用一函数表示,叫做适应度函数,一般由目标函数构成</li><li>确定进化参数群体规模M,交叉概$p_e$,变异概率$p_m$,进化终止条件</li></ol><p>求解的遗传算法的参数设定如下:</p><p>种群大小M=50,最大代数G=1000;</p><p>交叉率$p_e$=1,交叉概率为1保证种群的充分进化</p><p>变异率$p_m$=0.1,一般而言,变异发生的可能性较小.</p><ol><li><p>编码策略</p><p>采用十进制编码,用随机数列$\omega_1,\omega_2,\cdots,\omega_{102}$作为染色体,其中$0\leq \omega_i\leq 1(i=2,3,\cdots ,101),\omega_1=0,\omega_{102}=1$,每一个随机序列都和种群中的一个个体相对应.</p></li><li><p>初始种群</p><p>改良圈算法</p></li><li><p>目标函数</p><script type="math/tex; mode=display">\min f(\pi_1,\pi_2,\cdots,\pi_{102})=\sum^{102}_{i=1}d_{\pi_i\pi_{i+1}}</script></li><li><p>交叉操作</p><p>采用<strong>单点交叉</strong>,对于选定的两个父代个体$f_1=\omega_1\omega_2\cdots\omega_{102},f_2=\omega_1’\omega_2’\cdots \omega_{102}’$,随机选取第$t$个基因处作为交叉点,则经过交叉运算后得到的子代个体为$s_1$和$s_2$,$s_1.$基因由$f_1$的前$t$个基因和$f_2$的后$102-t$个基因构成,$s_2$的基因由$f_2$的前$t$个基因和$f_1$的后$102-t$个基因构成</p></li><li><p>变异操作</p><p>随机地选取三个整数$u,v,w$,满足$1&lt;u&lt;v&lt;w&lt;102$,把$u,v$之间地基因段插到$w$后面</p></li><li><p>选择</p><p>采用确定性的选择策略,即在父代种群和自带种群中选择目标函数值最小的M个个体进化到下一代,这样可以保证父代的优良特性被保存下来</p></li></ol><p><img src="image-20250119164222441.png" alt="MATLAB ga参数"></p><p><img src="image-20250119164255970.png" alt="MATLAB ga输出"></p>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-主成分分析(PCA)</title>
    <link href="/2025/01/15/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/"/>
    <url>/2025/01/15/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E4%B8%BB%E6%88%90%E5%88%86%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<p>PCA是什么?</p><p><strong>找新的坐标轴</strong></p><ol><li>去中心化</li><li>找坐标系</li></ol><h2 id="关键概念"><a href="#关键概念" class="headerlink" title="关键概念"></a>关键概念</h2><p><strong>协方差</strong>:</p><p>$cov(x,y)=\dfrac{\sum^n_{i=1}(x_i-\bar x)(y_i-\bar y)}{n-1}$</p><p><strong>协方差矩阵</strong>:</p><p>$\begin{aligned}C&amp;=\begin{vmatrix}cov(x,x)&amp;cov(x,y)\\cov(x,y)&amp;cov(y,y)\end{vmatrix}\\&amp;=\dfrac{1}{n-1}\begin{bmatrix}x_1&amp;x_2&amp;x_3&amp;x_4\\y_1&amp;y_2&amp;y_3&amp;y_4\end{bmatrix}\begin{bmatrix}x_1&amp;y_1\\x_2&amp;y_2\\x_3&amp;y_3\\x_4&amp;y_4\\\end{bmatrix}\\&amp;=\dfrac{1}{n-1}DD^T\end{aligned}$</p><script type="math/tex; mode=display">\begin{aligned}C'&=\dfrac{1}{n-1}D'D'^T\\&=\dfrac{1}{n-1}RSD(RSD)^T\\&=RS\dfrac{1}{n-1}S^TR^T\\&=RSS^TR^T\\&=RLR^{-1}\\L&=SS^T=\begin{bmatrix}a^2&0\\0&b^2\end{bmatrix}\end{aligned}</script><h2 id="基本过程"><a href="#基本过程" class="headerlink" title="基本过程"></a>基本过程</h2><p>从二维数据入手:</p><ol><li>求出点的中心,将中心移动至坐标原点</li><li>找到一条有着最大投影点到原点距离平方和的线</li><li>PC的特征值为最佳拟合线距离的平方和</li><li>PC奇异值为PC的特征值的平方根</li></ol><h2 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-params">[V,S,E]</span>=<span class="hljs-title">princa</span><span class="hljs-params">(X)</span></span><br>[m,n]=<span class="hljs-built_in">size</span>(X); <span class="hljs-comment">%计算矩阵的行m和列n</span><br> <br><span class="hljs-comment">%-------------第一步：标准化矩阵-----------------%</span><br>mv=<span class="hljs-built_in">mean</span>(X); <span class="hljs-comment">%计算各变量的均值</span><br>st=std(X); <span class="hljs-comment">%计算各变量的标准差</span><br>X=(X-<span class="hljs-built_in">repmat</span>(mv,m,<span class="hljs-number">1</span>))./<span class="hljs-built_in">repmat</span>(st,m,<span class="hljs-number">1</span>); <span class="hljs-comment">%标准化矩阵X</span><br> <br><span class="hljs-comment">%-------------第二步：计算相关系数矩阵-----------------%</span><br><span class="hljs-comment">% R1=X&#x27;*X/(m-1); %方法一：协方差矩阵计算公式</span><br><span class="hljs-comment">% R2=cov(X);     %方法二：协方差矩阵计算函数</span><br>R=corrcoef(X); <span class="hljs-comment">%方法三：相关系数矩阵函数</span><br> <br><span class="hljs-comment">%-------------第三步：计算特征向量和特征值-----------------%</span><br>[V,D]=eig(R);       <span class="hljs-comment">%计算矩阵R的特征向量矩阵V和特征值矩阵D,特征值由小到大</span><br>V=(<span class="hljs-built_in">rot90</span>(V))&#x27;;      <span class="hljs-comment">%将特征向量矩阵V从大到小排序</span><br>D=<span class="hljs-built_in">rot90</span>(<span class="hljs-built_in">rot90</span>(D));  <span class="hljs-comment">%将特征值矩阵由大到小排序</span><br>E=<span class="hljs-built_in">diag</span>(D);          <span class="hljs-comment">%将特征值矩阵转换为特征值向量</span><br> <br><span class="hljs-comment">%-------------第四步：计算贡献率和累计贡献率-----------------%</span><br>ratio=<span class="hljs-number">0</span>; <span class="hljs-comment">%累计贡献率</span><br><span class="hljs-keyword">for</span> k=<span class="hljs-number">1</span>:n<br>    r=E(k)/sum(E);   <span class="hljs-comment">%第k主成份贡献率</span><br>    ratio=ratio+r;  <span class="hljs-comment">%累计贡献率</span><br>    <span class="hljs-keyword">if</span>(ratio&gt;=<span class="hljs-number">0.9</span>)  <span class="hljs-comment">%取累计贡献率大于等于90%的主成分</span><br>        <span class="hljs-keyword">break</span>;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br> <br><span class="hljs-comment">%-------------第五步：计算得分-----------------%</span><br>S=X*V;<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>气体分子速率推导</title>
    <link href="/2024/12/29/%E6%B0%94%E4%BD%93%E5%88%86%E5%AD%90%E9%80%9F%E7%8E%87%E6%8E%A8%E5%AF%BC/"/>
    <url>/2024/12/29/%E6%B0%94%E4%BD%93%E5%88%86%E5%AD%90%E9%80%9F%E7%8E%87%E6%8E%A8%E5%AF%BC/</url>
    
    <content type="html"><![CDATA[<p>$f(v)=4\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv^2}{2kT}}v^2$</p><h2 id="最概然速率推导"><a href="#最概然速率推导" class="headerlink" title="最概然速率推导"></a>最概然速率推导</h2><p>$v=v_p时,\dfrac{df(v)}{dv}=0$</p><script type="math/tex; mode=display">\begin{aligned}\dfrac{df(v)}{dv}|_{v=v_p}&=\left[8\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv^2}{2kT}}v + 4\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv^2}{2kT}}v^2\cdot(-\dfrac{2mv}{2kT})\right]|{v=v_0}\\&=8\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv_p^2}{2kT}}v_p + 4\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv_p^2}{2kT}}v_p^2\cdot(-\dfrac{2mv_p}{2kT})=0\\&\therefore v_p=\sqrt{\dfrac{2kT}{m}},其中m为单个分子的质量\\\end{aligned}</script><h2 id="平均速率"><a href="#平均速率" class="headerlink" title="平均速率"></a>平均速率</h2><p>平均速率即麦克斯韦速率分布函数的期望值</p><script type="math/tex; mode=display">\begin{aligned}\overline v&=\int^\infty_0vf(v)dv=\int^\infty_0 4\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv^2}{2kT}}v^3dv\\&=\sqrt{\dfrac{8kT}{\pi m}}\end{aligned}</script><h2 id="方均根速率"><a href="#方均根速率" class="headerlink" title="方均根速率"></a>方均根速率</h2><script type="math/tex; mode=display">\begin{aligned}&\overline{v^2}=\int^\infty_0v^2f(v)dv=\int^\infty_0 4\pi\left(\dfrac{m}{2\pi kT}\right)^{\frac{3}{2}}e^{-\frac{mv^2}{2kT}}v^4dv=\dfrac{3kT}{m}\\&\sqrt{\overline{v^2}}=\sqrt{\dfrac{3kT}{m}}\\\end{aligned}</script>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>热力学基础</title>
    <link href="/2024/12/15/%E7%83%AD%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/12/15/%E7%83%AD%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="热力学基础"><a href="#热力学基础" class="headerlink" title="热力学基础"></a>热力学基础</h1><h1 id="热力学第一定律"><a href="#热力学第一定律" class="headerlink" title="热力学第一定律"></a>热力学第一定律</h1><p>$Q=\Delta E+A$</p><p>$Q&gt;0:系统吸热;\Delta E&gt;0:系统内能增加;A&gt;0:系统对外界作正功$</p><h1 id="气体的摩尔热容量"><a href="#气体的摩尔热容量" class="headerlink" title="气体的摩尔热容量"></a>气体的摩尔热容量</h1><h2 id="热容"><a href="#热容" class="headerlink" title="热容"></a>热容</h2><p>$C=\lim_{\Delta T\rightarrow 0}{\dfrac{\Delta Q}{\Delta T} }=\dfrac{dQ}{dT}$</p><p>比热容$C_b=\dfrac{dQ}{mdT}$:单位质量物质T升高一度所吸收的Q</p><p>摩尔热容$C_m=\dfrac{dQ}{\nu dT}$:1mol物质T升高一度所吸收的Q</p><h2 id="定容摩尔热容量-C-V-m"><a href="#定容摩尔热容量-C-V-m" class="headerlink" title="定容摩尔热容量$C_{V,m}$"></a>定容摩尔热容量$C_{V,m}$</h2><p>$C_{V,m}=\dfrac{(dQ)_V}{\nu dT}$</p><p>$dQ=dE+PdV,dV=0\Rightarrow C_{V,m}=\dfrac{(dQ)_V}{dT}=\dfrac{dE}{dT}$</p><p>$E=\dfrac{i}{2}RT\Rightarrow C_{V,m}=\dfrac{i}{2}R$</p><h2 id="定压摩尔热容量-C-P-m"><a href="#定压摩尔热容量-C-P-m" class="headerlink" title="定压摩尔热容量$C_{P,m}$"></a>定压摩尔热容量$C_{P,m}$</h2><p>$C_{P,m}=\dfrac{(dQ)_P}{dT}=(\dfrac{dE}{dT})_P+P(\dfrac{dV}{dT})_P=\dfrac{i}{2}R+R$</p><p>单原子分子, $i = 3, C_{V,m}=3R/2, C_{P,m}=5R/2 $,<br>双原子分子,$ i = 5, C_{V,m}=5R/2, C_{P.m}=7R/2 ,$<br>多原子分子,$ i = 6, C_{V,m}=6R/2= 3R, C_{P.m}= 4R$</p><p><strong>迈耶公式</strong>:$C_{P,m}=C_{V,m}+R$</p>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>气体动理论</title>
    <link href="/2024/12/15/%E6%B0%94%E4%BD%93%E5%8A%A8%E7%90%86%E8%AE%BA/"/>
    <url>/2024/12/15/%E6%B0%94%E4%BD%93%E5%8A%A8%E7%90%86%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="理想气体压强公式"><a href="#理想气体压强公式" class="headerlink" title="理想气体压强公式"></a>理想气体压强公式</h1><hr><h2 id="理想气体压强公式定量推导"><a href="#理想气体压强公式定量推导" class="headerlink" title="理想气体压强公式定量推导"></a>理想气体压强公式定量推导</h2><ul><li><p>前提条件:N个同类气体分子处于平衡态,封闭在边长为$l_1,l_2,l_3$的全反射壁容器内</p></li><li><p>一个分子(质量$\mu=m_0$,速率$v_i$)碰壁一次给器壁的冲量$2\mu v_{ix}$,面光滑$\rightarrow$在$y,z$方向冲量为0</p></li><li><p>两次碰撞所需时间间隔:$\dfrac{2l_1}{v_{ix}}$,该分子单位时间内与器壁碰撞的次数$M=\dfrac{ v_{ix} }{2 l_1}$</p></li><li><script type="math/tex; mode=display">\begin{aligned}&I=\sum^n_{i=1}2\mu v_{ix} \cdot \dfrac{v_{ix}}{2l_1}=\dfrac{\mu}{l_1}\sum^N_{i=1}v_{ix}^2\\&\therefore I=\dfrac{\mu N}{l_1}\cdot \dfrac{v_{ix}^2+v_{2x}^2+\cdots+v_{Nx}^2}{N}\\&\therefore I=\dfrac{\mu N}{l_1}\cdot \overline {v_x^2}=\dfrac{\mu N}{l_1}\cdot \dfrac{\overline {v^2}}{3}\\\end{aligned}</script></li><li><p>$P=\dfrac{F}{A_1}=\dfrac{I}{A_1}=\dfrac{\mu N\overline {v^2}/3l_1}{l_2 l_3}=\dfrac{N\mu\overline{v^2}}{3l_1l_2l_3}= \dfrac{1}{3}\rho\overline {v^2}(\rho=\dfrac{N\mu}{V},V=l_1l_2l_3)$</p></li><li><p>分子平均平动动能$\overline{\varepsilon_{平} }=\dfrac{1}{2}\mu \overline {v^2}$,因此$P=\dfrac{2}{3}n\overline {\varepsilon_{平} }$(<font color="red">理想气体压强公式</font>)</p></li></ul><p><img src="image-20241215201214070.png" alt="例题"></p><script type="math/tex; mode=display">\begin{aligned}(1)&I=2\mu v=1.2\times 10^{-24}N\cdot s\\(2)&M=\dfrac{1}{\Delta t}=\dfrac{v}{2l_1}\\&单位时间内碰A壁的分子数为K=M\times \dfrac{N}{3}=\dfrac{vN}{6l_1}\\&N=\dfrac{K}{l_2l_3}=\dfrac{vN}{6V}=\dfrac{n}{6}v=3.33\times 10^{27}\\(3)&P=I\times M=4\times 10^3Pa\end{aligned}</script><h2 id="分子碰撞"><a href="#分子碰撞" class="headerlink" title="分子碰撞"></a>分子碰撞</h2><h3 id="分子模型"><a href="#分子模型" class="headerlink" title="分子模型"></a>分子模型</h3><p>无相互作用的刚性球</p><h3 id="碰撞频率"><a href="#碰撞频率" class="headerlink" title="碰撞频率"></a>碰撞频率</h3><p>一个分子单位时间内所受<font color="cornflowerblue">碰撞</font>的平均次数</p><p>$\overline v=\sqrt{\dfrac{8kT}{\pi\mu}},\overline Z=\sqrt2\pi d^2\overline vn=4d^2n\sqrt{\dfrac{\pi kT}{\mu}}$</p><h3 id="平均自由程"><a href="#平均自由程" class="headerlink" title="平均自由程"></a>平均自由程</h3><p>$\overline \lambda=\dfrac{\overline v}{\overline z}=\dfrac{1}{\sqrt{2}\pi d^2n}=\dfrac{kT}{\sqrt{2}\pi d^2P}$</p><p>对一定量气体,体积一定时,$\lambda$与温度$T$无关</p><h2 id="温度公式"><a href="#温度公式" class="headerlink" title="温度公式"></a>温度公式</h2><ul><li>宏观:$P=nkT$</li><li>微观:$P=\dfrac{2}{3}n\overline \varepsilon_{平}$</li></ul><p>$\overline \varepsilon_{平}=\dfrac{1}{2}\mu\overline {v^2}=\dfrac{3}{2}kT$</p><p>$T=\dfrac{2}{3}\dfrac{\overline \varepsilon_{平}}{k}=\dfrac{1}{3}\dfrac{\mu \overline{v^2}}{k}$</p><p>方均根速率$\sqrt{ \overline{v^2} }=\sqrt{\dfrac{3kT}{\mu}}$</p><h2 id="阿伏伽德罗定律"><a href="#阿伏伽德罗定律" class="headerlink" title="阿伏伽德罗定律"></a>阿伏伽德罗定律</h2><p>宏观压强公式:$P=nkT\Rightarrow P,T同则n同$</p><p>标准状态下,$n=\dfrac{P}{kT}=\dfrac{1.013\times 10^5}{1.38\times 10^{-23}\times 273.15}=2.688\times 10^{25}m^{-3}$</p><p>$N_A=n\cdot V_{mol}=6.02\times 10^{23}m^{-3}$</p><h2 id="道尔顿分压定律"><a href="#道尔顿分压定律" class="headerlink" title="道尔顿分压定律"></a>道尔顿分压定律</h2><p>混合气体的压强等于组成混合气体的各组成分的分压强之和</p><h1 id="能量均分定理"><a href="#能量均分定理" class="headerlink" title="能量均分定理"></a>能量均分定理</h1><h2 id="运动自由度"><a href="#运动自由度" class="headerlink" title="运动自由度"></a>运动自由度</h2><p>决定物体空间位置所需独立坐标的数目</p><p>一般分子总自由度$i=t+r+s$</p><p>其中:$t$-平动自由度,$r$-转动自由度,$s$-振动自由度(一般可忽略)</p><ul><li>单原子分子:$i=t=3$</li><li>刚性双原子分子:$i=t+r=3+2=5$</li><li>刚性多原子分子:$i=t+r=3+3=6$</li></ul><h2 id="能量按自由度的均分定理"><a href="#能量按自由度的均分定理" class="headerlink" title="能量按自由度的均分定理"></a>能量按自由度的均分定理</h2><p>$\overline{\varepsilon_{平} }=\dfrac{3}{2}kT$</p><p>$\dfrac{1}{2}k\overline{v_x^2}=\dfrac{1}{2}k\overline{v_y^2}=\dfrac{1}{2}k\overline{v_z^2}=\dfrac{1}{2}k(\dfrac{1}{3}\overline{v^2})$</p><p><strong>能量均分定理</strong>:在温度为T的热平衡态下,物质分子的每个自由度都具有相同的平均动能$\dfrac{kT}{2}$</p><p>分子平均<font color="red">总动能</font>$\overline {\varepsilon_{平} }=\dfrac{1}{2}kT=\dfrac{1}{2}kT(t+r+s)$</p><p>分子平均<font color="red">总能量</font>:$\overline {\varepsilon_{平} }=\dfrac{1}{2}kT(t+r+2s)$</p><ul><li>单原子分子:$\overline{\varepsilon}=\dfrac{3}{2}kT$</li><li>刚性双原子分子:$\overline{\varepsilon}=\dfrac{5kT}{2}$</li><li>刚性多原子分子:$\overline{\varepsilon}=\dfrac{6kT}{2}$</li></ul><h2 id="理想气体的内能"><a href="#理想气体的内能" class="headerlink" title="理想气体的内能"></a>理想气体的内能</h2><ol><li>内能包含分子热运动能量;分子间势能和分子内势能;分子内部,原子内部运动能量;电场能,磁场能</li><li>气体内能:$分子动能,分子间势能和分子内原子间的势能的总和$</li><li>理想气体:理想气体分子间势能=0,理想气体内能=所有分子的平动+转动+振动动能+振动势能(=分子数*每个理气分子平均总能量)</li></ol><p>$E=N\overline \varepsilon=N\cdot \dfrac{i}{2}kT=\nu\cdot \dfrac{i}{2}RT=\dfrac{i}{2}PV(N=\nu\cdot N_A)$</p><p><img src="image-20241215220756900.png" alt="例题"></p><script type="math/tex; mode=display">\begin{aligned}&\overline{\varepsilon_{平(He)} }=\overline{\varepsilon_{平(H_2) }}=\dfrac{3}{2}kT\\&\overline{\varepsilon_{k(He)} }=\dfrac{3}{2}kT\\&\overline{\varepsilon_{k(H_2)} }=\dfrac{5}{2}kT\\&E_{(He)}=\dfrac{m}{M}\cdot \dfrac{3}{2}kT=2\cdot \dfrac{3}{2}kT\\&E_{(H_2)}=\dfrac{m}{M}\cdot \dfrac{5}{2}kT=2\cdot \dfrac{5}{2}kT\\\end{aligned}</script><h1 id="麦克斯韦速率分布律"><a href="#麦克斯韦速率分布律" class="headerlink" title="麦克斯韦速率分布律"></a>麦克斯韦速率分布律</h1><h2 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h2><p>速率分布函数$f(v)=\lim_{\Delta v\rightarrow 0}\dfrac{\Delta N/N}{\Delta v}=\dfrac{dN}{N\cdot dv }$</p><p>能量分布函数$f(\varepsilon)=\dfrac{dN}{N\cdot d\varepsilon}$</p><p>速度分布函数$f({v})=4\pi v^2f(\vec v)$</p><h2 id="麦克斯韦速度分布律"><a href="#麦克斯韦速度分布律" class="headerlink" title="麦克斯韦速度分布律"></a>麦克斯韦速度分布律</h2><p>$f(\vec v)=\left(\dfrac{\mu}{2\pi kT}\right)^{3/2}\cdot e^{-\dfrac{\mu v^2}{2kT}}$</p>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组期末题目</title>
    <link href="/2024/12/13/%E8%AE%A1%E7%BB%84%E6%9C%9F%E6%9C%AB%E9%A2%98%E7%9B%AE/"/>
    <url>/2024/12/13/%E8%AE%A1%E7%BB%84%E6%9C%9F%E6%9C%AB%E9%A2%98%E7%9B%AE/</url>
    
    <content type="html"><![CDATA[<p>4.某页式虚拟存储系统按字节编址，虚存容量为 4GB，主存容量为 64MB，页大小为 4KB，</p><p>每个页表项需有一位有效位和一位修改位。假设所有虚页都在使用中，问</p><p>（1）虚拟地址和物理地址分别是多少位，格式如何</p><p>（2）程序虚拟空间最多可有多少页</p><p>（3）每个页表项共有多少位</p><p>（4）每个页表最多占多少内存空间</p><script type="math/tex; mode=display">\begin{aligned}(1)&虚拟地址位数=\log_2(4\times 2^{30})=32\\&物理地址位数=\log_2(64\times 2^{20})=26\\&页内偏移位数=\log_2(4\times2^{10})=12\\&虚拟地址格式:|页号(20)|页内偏移(12)|\\&物理地址格式:|页号(14)|页内偏移(12)|\\(2)&2^{20}页\\(3)&页表项最多可以有1+1+14=16位\\(4)&每个页表最多占2^{20}\times16/8=2MB\\\end{aligned}</script><blockquote><p>页表所占内存空间为页表项数*页表项位数,页表项</p></blockquote><p><img src="image-20241214160312632.png" alt="页式虚拟存储器"></p><ol><li>假设用如下的寄存器分配方案：$s1存放变量f，$s2存放变量g，$s3存放数组A的基地址。请将下列MIPS代码翻译成一行C的代码。</li></ol><p>​    lw $s1, 12($s3)</p><p>​    add $s1, $s1, $s2</p><p>​    addi $s1, $s1, 9</p><p>​    add $s1,$s1,$s1</p><p>如果g=7, A = {3, 2, 6, 4, 7, 6, 4, 8, 9, 8}，则f的值是多少？</p><p><code>f=2(A[3]+g+9)</code></p><p><code>f=40</code></p><ol><li>某计算机字长32位，主存地址31位且按字节编址,四级组相联映射。Cache的数据存储空间容量为32KB，Cache数据块大小为4个字，每个cache数据块对应有1位有效位和4位修改值。问</li></ol><p>（1）cache分多少组</p><p>（2）给出主存地址格式（地址中各字段名称及其位数）</p><p>（3）cache的标记(tag)是多少位</p><p>（4）cache的实际总容量是多少</p><p>（5）若cache的存取时间是5ns，cache访问缺失时的存取时间是100ns，计算cache命中率为0.8的情况下，该cache的平均存取时间。</p><script type="math/tex; mode=display">\begin{aligned}(1)&Cache组数=\dfrac{32KB}{4\times 32/8\times 4B}=512组\\(2)&主存块数=\dfrac{2^{31}}{4\times 32/8}=2^{27}块\\&Cache标记位数=29-9=18\\&主存地址格式:|Cache标记(18)|Cache行号(9)|块内地址(4)|\\(3)&Cache标记为18位\\(4)&Cache实际容量为((19+1+4)+4\times 32)\times 512\times 4=311296bit=38KB\\(5)&平均存取时间\overline t=0.8\times 5+0.2\times (100+5)=25\text{ns}\end{aligned}</script><ol><li>某8位计算机的主存地址为16位，主存按字节编址，其中地址最高的16KB主存空间为只读的系统程序区。现有若干片荣俩个16K<em>8的RAM芯片和容量8K</em>8的ROM芯片。问</li></ol><p>（1）计算机所允许的最大主存容量是多少</p><p>（2）构建计算机允许的最大容量的主存，需用上述规格的RAM和ROM各多少</p><p>（3）用十六进制表示这些存储器的起止地址</p><script type="math/tex; mode=display">\begin{aligned}(1)&允许最大容量=2^{16}\times 8=2^{19}bit=64KB\\(2)&ROM数量=\dfrac{16KB}{8K\times 8/8B}=2\\&RAM数量=\dfrac{48KB}{16K\times 8/8B}=3\\(3)&RAM1:0000H\sim 3FFFH\\&RAM2:4000H\sim 7FFFH\\&RAM3:8000H\sim BFFFH\\&ROM1:C000H\sim DFFFH\\&ROM2:E000H\sim FFFFH\\\end{aligned}</script>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>计组</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-图论</title>
    <link href="/2024/12/13/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%9B%BE%E8%AE%BA/"/>
    <url>/2024/12/13/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%9B%BE%E8%AE%BA/</url>
    
    <content type="html"><![CDATA[<h1 id="图论"><a href="#图论" class="headerlink" title="图论"></a>图论</h1><h1 id="图论的基本概念"><a href="#图论的基本概念" class="headerlink" title="图论的基本概念"></a>图论的基本概念</h1><h2 id="图"><a href="#图" class="headerlink" title="图"></a>图</h2><p>$设V和E是有限集合,且V\neq \emptyset$</p><p>(1)如果$\Phi:E\rightarrow\{\{v_1,v_2\}|v_1\in V且v_2\in V\}$,则称$G=<V,E,\Phi>$为<font color="red">无向图</font></V,E,\Phi></p><p>(2)如果$\Phi:E\rightarrow V\times V$,则称$G=<V,E,\Phi>$为<font color="red">有向图</font></V,E,\Phi></p><h2 id="特殊图"><a href="#特殊图" class="headerlink" title="特殊图"></a>特殊图</h2><ol><li>结点都是<font color="red">孤立点</font>的图:零图</li><li>一阶零图称为<font color="red">平凡图</font></li><li>所有结点的度均为自然数d的无向图称为<font color="red">d度正则图</font></li><li>$n\in I_+$,如果n阶简单无向图是n-1度正则图,则称为<font color="red">完全无向图</font></li><li>$n\in I_+$,若n阶简单有向图的每个结点的入度和出度均为n-1,则称为<font color="red">完全有向图</font></li></ol><h2 id="同构"><a href="#同构" class="headerlink" title="同构"></a>同构</h2><p>$设G=<V,E,\Psi>,G’=&lt;V’,E’,\Psi’&gt;$,如果存在双射$f:V\rightarrow V’$,双射$g:E\rightarrow E’$,使得对于任意$e\in E及v_1,v_2\in V$</V,E,\Psi></p><p>$\Psi’(g(e))=\begin{cases}<f(v_1),f(v_2)>, 若\Psi(e)=<v_1,v_2>\\\{f(v_1),f(v_2)\}, 若\Psi(e)=\{v_1,v_2\}\end{cases}$</v_1,v_2></f(v_1),f(v_2)></p><p>则称G与G’同构,记作$G\cong G’$</p><p>两个同构的图必有相同的<font color="red">结点个数和边数</font>,并且:</p><ol><li>双射f保持结点之间的邻接关系</li><li>双射g保持边之间的邻接关系</li></ol><h1 id="子图"><a href="#子图" class="headerlink" title="子图"></a>子图</h1><h2 id="由点集导出的子图"><a href="#由点集导出的子图" class="headerlink" title="由点集导出的子图"></a>由点集导出的子图</h2><p>设图$G=<V,E,\Psi>,V’\subseteq V且V’\neq \emptyset$,以$V’$为结点集合以所有起点和终点均在$V’$中的边为边集合的G的子图称为由$V’$导出的G的子图,记作$G[V’]$</V,E,\Psi></p><h2 id="相交-可运算"><a href="#相交-可运算" class="headerlink" title="相交,可运算"></a>相交,可运算</h2><ol><li>$e\in E\cap E’时均有\Psi(e)=\Psi’(e)$,则称G与G’可运算</li><li>如果$V\cap V’=E\cap E’=\emptyset$,则称$G,G’$不相交</li></ol><h1 id="路径"><a href="#路径" class="headerlink" title="路径"></a>路径</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a><strong>定义</strong></h2><p>设 $n\in N，v_0, v_1…，v_n $是图G的结点，$e_1, e_2, …, e_n$是图G的边，并且vi-1 和vi 分别是 $e_i $的起点和终点 ($ i=1,<br>2, …, n $)，则称序列$v_0 e_1 v_1 e_2 … v_{n-1} e_n v_n $为图 G 中从$ v_0 $至$v_n$的路径，$n$ 称为该路径的长度。</p><p>$G=<V,E,\Psi>$</V,E,\Psi></p><p>$\begin{cases} v_0,v_1,\dots,v_n\in V\\ e_1,e_2,\dots,e_n\in E\\ \color{red}{e_i:关联v_{i-1}和v_i} \end{cases}$</p><p><strong>简单路径</strong>:边不重复的路径(迹)</p><p><strong>简单回路</strong>:边不重复的回路</p><p><strong>基本路径</strong>:点不重复的路径(路径)</p><p><strong>基本回路</strong>:点不重复的回路</p><h3 id="定理3-1"><a href="#定理3-1" class="headerlink" title="定理3.1"></a>定理3.1</h3><p>设图$G=<V,E,\Psi>$, $v,v’\in V$.如果存在从$v$至$v’$ 的路径,则存在$v$至$v’$的基本路径(路径上的结点各不相同)</V,E,\Psi></p><ul><li>n阶图有n个结点</li><li>基本路径上的结点各不相同</li><li>n阶图中的基本路径最多含有n个结点</li><li>n阶图中的基本路径最多含有n-1条边</li></ul><h3 id="定理3-2"><a href="#定理3-2" class="headerlink" title="定理3.2"></a>定理3.2</h3><p>$n$阶图的<font color="blue">基本路径</font>的长度小于$n$</p><h2 id="可达"><a href="#可达" class="headerlink" title="可达"></a>可达</h2><p>设图$G=<V,E,\Psi>$,$v_1,v_2\in V$</V,E,\Psi></p><ol><li>若存在从$v_1$到$v_2$的路径,则称在$G$中$v_1$可达$v_2$,或从$v_1$到$v_2$可达</li><li>否则称在$G$中从$v_1$不可达$v_2$,或从$v_1$到$v_2$不可达</li></ol><h3 id="定理3-3"><a href="#定理3-3" class="headerlink" title="定理3.3"></a>定理3.3</h3><p>从 $v_1$可达 $v_2$当且仅当存在从 $v_1$至 $v_2$的基本路径</p><h2 id="距离"><a href="#距离" class="headerlink" title="距离"></a>距离</h2><p>$v_1$可达$v_2\Rightarrow$路径中长度最短者为$v_1$到$v_2$的测地线,并称该测地线的长度为从$v_1$到$v_2$的距离,记作$d(v_1,v_2)$</p><p>$v_1$不可达$v_2\Rightarrow d(v_1,v_2)=\infty$</p><h2 id="直径"><a href="#直径" class="headerlink" title="直径"></a>直径</h2><p>图$G=<V,E,\Psi>$的直径定义为$max_{v,v’\in V}d(v,v’)$</V,E,\Psi></p><h2 id="加权图"><a href="#加权图" class="headerlink" title="加权图"></a>加权图</h2><p>$W:E\rightarrow R_+,则称<G,W>为加权图$</G,W></p><ol><li>$e\in E$,则称$W(e)$为$e$的加权长度</li><li>路径中所有边的加权长度之和称为该路径的甲醛长度</li><li>从结点$v$到结点$v’$的路径中,加权长度最小的称为从$v$到$v’$的<font color="blue">最短路径</font></li><li>若从$v$可达$v’$,从结点$v$到结点$v’$的最短路径的加权长度为从结点$v$到结点$v’$的<font color="blue">加权距离</font></li></ol><h2 id="连通性"><a href="#连通性" class="headerlink" title="连通性"></a>连通性</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>如果<font color="red">无向图</font>$G$的<font color="cornflowerblue">任意两个结点都互相可达</font>,则称$G$是连通的,否则称$G$是非连通的</p><h3 id="连通分支与等价关系"><a href="#连通分支与等价关系" class="headerlink" title="连通分支与等价关系"></a>连通分支与等价关系</h3><p>设$G’$是图$G$的具有某性质$P$的子图,并且对于$G$的具有该性质的任意子图$G’’$,只要$G’\subseteq G’’$就有$G’=G’’$,则称$G’$相对于该性质是$G$的<font color="red">极大子图</font></p><p>无向图$G$的<font color="red">极大连通子图</font>称为$G$ 的连通分支，简称<font color="red">分支</font></p><p>$R_V=\{<u,v>|u,v\in V且从u到v可达\}$,$R_V$是$V$上的<font color="red">等价关系</font></u,v></p><font color="cornflowerblue">分支</font>:$V$关于$R_V$的等价类的导出子图$V/R=\{V_1,V_2,\dots,V_n\}$$G[V_1],G[V_2],\dots,G[V_2]$为$G$的分支#### 定理3.41. 连通无向图恰有一个分支2. 非连通无向图的分支多于1个## 基础图设有向图$G=<V,E,\Psi>$,如下定义:$\Psi':E\rightarrow \{\{v_1,v_2\}|v_1\in V\wedge v_2\in V\}$使得对任意$e\in E$和$v_1,v_2\in V$若$\Psi(e)=<v_1,v_2>,则\Psi'(e)=\{v_1,v_2\}$则称无向图$G=<V,E,\Psi'>$为有向图$G$的<font color="red">基础图</font><p><img src="image-20241215163122114.png" alt="有向边改为无向边,获得基础图"></p><h2 id="三种连通性"><a href="#三种连通性" class="headerlink" title="三种连通性"></a>三种连通性</h2><p>设$G$为<font color="cornflowerblue">有向图</font></p><ol><li><font color="cornflowerblue">强相通</font>:任意两个结点都互相可达</li><li><font color="cornflowerblue">单项连通</font>:任意两结点,必有一个结点可达另一结点</li><li><font color="cornflowerblue">弱相通</font>:基础图是连通的(把有向图看成是无向图是连通的)</li></ol><p>设$G$为有向图</p><ol><li>$G$的极大强连通子图称为G的<font color="red">强连通分支</font></li><li>$G$的极大单向连通子图称为$G$的<font color="red">单向分支</font></li><li>$G$的极大弱连通子图称为$G$的<font color="red">弱分支</font></li></ol><p>非连通无向图有一个以上分支;连通无向图恰有一个分支.</p><blockquote><p>有向图的结点一定恰好处于一个强分支中,但边不一定;有向图结点与边都不一定恰好在一个单向分支中</p></blockquote><h2 id="回路"><a href="#回路" class="headerlink" title="回路"></a>回路</h2><h3 id="半路径定义"><a href="#半路径定义" class="headerlink" title="半路径定义"></a>半路径定义</h3><p>$G’$为有向图$G=<V,E,\Psi>$的基础图,$G’$中的路径称为G中的<font color="red">半路径</font></V,E,\Psi></p><p>设$v_0e_1v_1\dots v_{m-1}e_mv_m$是$G$中的半路径,对每个$i(1\leq i\leq m)$,</p><ul><li>若$\Psi(e_i)=<v_{i-1},v_i>$,则称$e_i$是该半路径中的正向边</v_{i-1},v_i></li><li>若$\Psi(e_i)=<v_i,v_{i-1}>$,则称$e_i$是该路径中的反向边</v_i,v_{i-1}></li></ul><h3 id="回路定义"><a href="#回路定义" class="headerlink" title="回路定义"></a>回路定义</h3><ol><li>连通2度正则图(所有结点的度均为自然数2的<font color="cornflowerblue">无向图</font>)称为<font color="red">回路</font></li><li>基础图是回路的有向图称为<font color="red">半回路</font></li><li>每个结点的出度和入度均为1的弱连通有向图称为<font color="red">有向回路</font></li></ol><h3 id="回路证明定理"><a href="#回路证明定理" class="headerlink" title="回路证明定理"></a>回路证明定理</h3><p>设$v$是图$G$的任意结点,$G$是回路,当且仅当:</p><ol><li>$G$的阶与边数相等</li><li>在$G$中存在一条从$v$到$v$的闭路径,使得除了$v$在该闭路径中出现两次外,其余结点和每条边都在该闭路中恰出现一次</li></ol><h2 id="有向路-非循环图"><a href="#有向路-非循环图" class="headerlink" title="有向路,非循环图"></a>有向路,非循环图</h2><ol><li>如果回路C是图G的子图,则称G有回路C</li><li>没有回路的无向图和没有半回路的有向图称为<font color="cornflowerblue">非循环图</font></li></ol><h3 id="有向回路的充分条件"><a href="#有向回路的充分条件" class="headerlink" title="有向回路的充分条件"></a>有向回路的充分条件</h3><p>如果有向图G有子图G’,使得对于G’的任意结点v,皆有$d_{G’}^-&gt;0$,则G有有向回路</p><p>如果有向图G有子图G’,使得对于G’的任意结点v,皆有$d_{G’}^+&gt;0$,则G有有向回路</p><h3 id="非循环图的充分必要条件"><a href="#非循环图的充分必要条件" class="headerlink" title="非循环图的充分必要条件"></a>非循环图的充分必要条件</h3><p>图G不是非循环图当且仅当G有子图G’,使得对于G’的任意结点v,皆有$d_{G’}(v)&gt;1$</p><h2 id="Dijkstra算法"><a href="#Dijkstra算法" class="headerlink" title="Dijkstra算法"></a>Dijkstra算法</h2><p>求从结点s至t的加权距离</p><ol><li>$\lambda(s)\leftarrow 0,\forall v\in V-\{s\},\lambda(v)\leftarrow \infty,\{p\leftarrow \sharp\}$</li><li>$T\leftarrow V$</li><li>$任取u\in\{u’|若v’\in T, 则\lambda(u’)\leq \lambda(v’)\}$</li><li>$如果u=t,则\{p\leftarrow pt\sharp\}算法结束$</li><li>$对于以u为起点的每条边e,如果e的终点v\in T并且\lambda(v)&gt;\lambda(u)+W(e),则\lambda(v)\leftarrow \lambda(u)+W(e)$</li><li>$T\leftarrow T-\{u\},\{p\leftarrow pu\Rightarrow\}且转向3.$</li></ol><p>当算法结束时,<font color="red">$\lambda(t)即为s至t的加权距离,p即为从s至t的最短距离$</font></p><blockquote><p>证明:非连通无向图的补图必连通</p></blockquote><script type="math/tex; mode=display">\begin{align}&G=<V,E,\Psi>\\&任取v,v'\in V\\&1)若v,v'在同一连通分支G_1中,\\&则存在v''不在这一分支G_1中,<v,v''>\in \bar G,<v',v''>\in \bar G\\&2) 若v,v'不在同一连通分支中\\&则<v,v'>\in \bar G\\&则v,v'在\bar G中连通\\\end{align}</script><blockquote><p>证明:设$G$为$n$阶简单无向图,若$G$的任意结点$v$皆有$d_G(v)\geq (n-1)/2$,则$G$是连通的</p></blockquote><script type="math/tex; mode=display">\begin{aligned}&G=<V,E,\Psi>\\&任取v,v'\in V\\&1)若<v,v'>\in V,则v,v'连通\\&2)若<v,v'>\notin V,v,v'无直接边\\&假设v,v'不连通,设v在分支G_1,v'在分支G_2\\&G_1结点个数为p,G_2结点个数为q\\&p+q\geq 1+(n-1)/2+1+(n-1)/2=n+1\\&与p+q\leq n矛盾\\&因此,v,v'连通\\\end{aligned}</script><blockquote><p>11.证明有$k$个弱分支的$n$阶简单有向图至多有$(n-k)(n-k+1)$条边</p></blockquote><script type="math/tex; mode=display">\begin{align}&设G的k个分支为G_1,G_2,\cdots,G_k\\&其结点数分别为n_1,n_2,\cdots,n_k\\&其边最大个数分别为n_1(n_1-1),n_2(n_2-1),\cdots,n_k(n_k-1)\\&\sum^k_{i=1}n_i=n\\&设m_i=n_i-1\\&\sum^k_{i=1}(m_i+1)m_i=\sum^k_{i=1}m_i^2+\sum^k_{i=1}m_i\\&\leq (\sum^k_{i=1}m_i)^2+\sum^k_{i=1}m_i=(n-k)(n-k+1)\end{align}</script><h1 id="欧拉图和哈密顿图"><a href="#欧拉图和哈密顿图" class="headerlink" title="欧拉图和哈密顿图"></a>欧拉图和哈密顿图</h1><h2 id="欧拉图定义"><a href="#欧拉图定义" class="headerlink" title="欧拉图定义"></a>欧拉图定义</h2><p>图中包含所有边的简单开路径称为图的<font color="red">欧拉路径</font></p><p>图中包含其所有边的简单闭路径称为图的<font color="red">欧拉闭路</font></p><p>每个结点都是<font color="red">偶结点</font>(度为偶数的结点)的无向图称为<font color="red">欧拉图</font></p><p>每个结点的出度和入度都相等的有向图称为<font color="red">欧拉有向图</font></p><h2 id="欧拉定理"><a href="#欧拉定理" class="headerlink" title="欧拉定理"></a>欧拉定理</h2><p>图G中包含其所有边的简单开路径称为$G$的<font color="red">欧拉路径</font>,图$G$中包含其所有边的简单闭路径称为$G$的<font color="red">欧拉闭路</font></p><h3 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h3><p>设G为连通无向图,G是欧拉图 iff G有欧拉闭路</p><h3 id="定理2"><a href="#定理2" class="headerlink" title="定理2"></a>定理2</h3><p>$设G=<V,E,\Psi>$为连通无向图,$v_1,v_2\in V且v_1\neq v_2$,则$G$有一条从$v_1到v_2$的欧拉路径 iff G恰有两个奇结点$v_1,v_2$</V,E,\Psi></p><h3 id="定理3"><a href="#定理3" class="headerlink" title="定理3"></a>定理3</h3><p>设G为弱连通的有向图,G是欧拉有向图 iff G有欧拉闭路</p><h3 id="定理4"><a href="#定理4" class="headerlink" title="定理4"></a>定理4</h3><p>设G为弱连通的有向图,$v_1,v_2$为G的两个不同结点</p><p>G有一条从$v_1$到$v_2$的欧拉路径 iff $d_{G^+}(v_1)=d_{G^-}(v_1)+1,d_{G^+}(v_2)=d_{G^-}(v_2)-1$</p><h3 id="定理5"><a href="#定理5" class="headerlink" title="定理5"></a>定理5</h3><p>如果$G_1,G_2$为<font color="red">可运算</font>($如果e\in E_1\wedge E_2,则\Psi_1(e)=\Psi_2(e)$)的欧拉图,则$G_1\oplus G_2$是欧拉图</p><h2 id="Hamilton回路"><a href="#Hamilton回路" class="headerlink" title="Hamilton回路"></a>Hamilton回路</h2><p>回路C是图G的生成子图,则称C为G的<font color="red">Hamilton回路</font></p><h1 id="图的矩阵表示"><a href="#图的矩阵表示" class="headerlink" title="图的矩阵表示"></a>图的矩阵表示</h1><p>$设m\in I_+$,n阶图$G$的全部结点为$v_1,v_2,\cdots ,v_n$,若$X$是$G$的邻接矩阵且$1\leq i,j\leq n$,则$x_{ij}^{(m)}$等于$G$中从$v_i$到$v_j$的长度为$m$的路径数</p><h2 id="n阶图-G-与-X-G-的联系"><a href="#n阶图-G-与-X-G-的联系" class="headerlink" title="n阶图$G$与$X(G)$的联系"></a>n阶图$G$与$X(G)$的联系</h2><ul><li>无向图$G$的邻接矩阵$X(G)$是对称的</li><li>图$G$没有平行边$\Leftrightarrow $$X(G)$的元素都是0和1</li><li>图$G$有自圈$\Leftrightarrow$$X(G)$的对角线有非0元素</li></ul><h2 id="定理7-5-1"><a href="#定理7-5-1" class="headerlink" title="定理7.5.1"></a>定理7.5.1</h2><p>$x_{ij}^m$等于$G$中从$v_i$到$v_j$的长度为m的路径数</p><h2 id="可达性矩阵"><a href="#可达性矩阵" class="headerlink" title="可达性矩阵"></a>可达性矩阵</h2><p>$p(i)=\begin{cases}1,由v_i可达v_j\\0,从v_i不可达v_j\end{cases}$</p><h2 id="距离矩阵"><a href="#距离矩阵" class="headerlink" title="距离矩阵"></a>距离矩阵</h2><p>$d_{ij}=\begin{cases}\infty,(\forall m)(m\in N\wedge m<n\rightarrow x_{ij}^m="0)\\\min\{k|0\leq" k<n\wedge x_{ij}^k>0\},else\end{cases}$</n\rightarrow></p><h2 id="路径矩阵"><a href="#路径矩阵" class="headerlink" title="路径矩阵"></a>路径矩阵</h2><p>$P=\sum^{n-1}_{k=0}X^{(k)}$</p><h2 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h2><p>无向图无自圈,其结点集合和边集合分别为$\{v_1,v_2,\cdots,v_n\}$和$\{e_1,e_2,\cdots,e_m\}$,定义$G$的关联矩阵$A(G)$为$n\times m$矩阵$(a_{ij})$,其中</p><p>$a_{ij}=\begin{cases}1,e_j与v_i关联\\0,e_j与v_i不关联\end{cases}$</p><p>$a_{ij}=\begin{cases}1,v_i是e_j的起点\-1,v_i是e_j的终点\\0,e_i与v_i不关联\end{cases}$</p><p>无向图$G$的关联矩阵$A(G)$的每列元素之和为2</p><p>有向图$G$的关联矩阵$A(G)$的每列元素之和为0</p><p><strong>顺序排列</strong>$G$的结点和边的顺序,可使$A(G)=\begin{bmatrix}A(G_1)\\&amp;A(G_2)\\&amp;&amp;\cdots\\&amp;&amp;&amp;A(G_k)\end{bmatrix}$</p><h1 id="二部图"><a href="#二部图" class="headerlink" title="二部图"></a>二部图</h1><p>设无向图$G=<V,E,\Psi>$,如果存在$V$的划分$\{V_1,V_2\}$,使得$V_i$中的任何两个结点都不邻接(i=1,2),则称$G$为二部图,$V_1,V_2$称为$G$的互补结点子集</V,E,\Psi></p><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>设$G$是阶大于1的无向图,$G$是二部图当且仅当$G$的所有回路的长度均为偶数</p><h2 id="匹配"><a href="#匹配" class="headerlink" title="匹配"></a>匹配</h2><p>无向图$G=<V,E,\Psi>,E’\subseteq E$</V,E,\Psi></p><ol><li>如果$E’$不包含自圈,并且$E’$中的任何两条边都不邻接,则称$E’$为$G$中的<font color="red">匹配</font></li><li>如果$E$是$G$中的匹配,并且对于$G$中的一切匹配$E’’$,当$E’\subseteq E’’$时皆有$E’=E’’$,则称$E’$为$G$中的<font color="red">极大匹配</font></li><li>$G$中边数最多的匹配称为$G$的<font color="red">最大匹配</font></li><li>$G$中的最大匹配所包含的边的数目称为$G$的<font color="red">匹配数</font></li></ol><p><img src="image-20241224152139382.png" alt="无向图中的匹配"></p><p>极大匹配:{a,e},{b,e},{c,p},{f,p},{g,d},{h,d},{a,c,g},{b,f,h}</p><p>最大匹配:{a,c,g},{b,f,h}</p><p>匹配数:3</p><h2 id="完美匹配"><a href="#完美匹配" class="headerlink" title="完美匹配"></a>完美匹配</h2><p>设$V_1,V_2$时二部图$G$的互补结点子集,如果$G$的匹配数等于$n(V_1)$,则称$G$中的最大匹配数为$V_1$到$V_2$的完美匹配</p><h1 id="树"><a href="#树" class="headerlink" title="树"></a>树</h1><h2 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h2><p>非循环的连通无向图</p><h2 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h2><p>$G=<V,E,\Psi>$为n阶无向图,则下列条件等价:</V,E,\Psi></p><ol><li>$G$是连通的和非循环的</li><li>$G$无自圈,且当$v,v’\in V$时,皆有唯一的一条从$v$到$v’$的基本路径</li><li>$G$是连通的,且当$v,v’\in V,e\notin E,\Psi’=\{&lt;e,\{v,v’\}\}$时,$G+\{e\}_{\Psi’}$皆有唯一的一个回路</li><li>$G$是连通的,且当$e\in E$时,$G-e$都是非连通的</li><li>$G$是连通的且$n(E)=n-1$</li><li>$G$是非循环的且$n(E)=n-1$</li></ol><h2 id="生成树-生成森林"><a href="#生成树-生成森林" class="headerlink" title="生成树/生成森林"></a>生成树/生成森林</h2><p>如果树$T$是无向图$G$的生成子图,则称$T$是$G$的生成树,如果森林$F$是无向图$G$的生成子图,则称$F$为$G$的生成森林</p></V,E,\Psi'></v_1,v_2></V,E,\Psi>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>量子力学基础</title>
    <link href="/2024/12/12/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/"/>
    <url>/2024/12/12/%E9%87%8F%E5%AD%90%E5%8A%9B%E5%AD%A6%E5%9F%BA%E7%A1%80/</url>
    
    <content type="html"><![CDATA[<h1 id="量子物理"><a href="#量子物理" class="headerlink" title="量子物理"></a>量子物理</h1><p><strong>一、光的量子性—光波粒二象性</strong></p><p><strong>二、微观粒子的波粒二象性</strong></p><p><strong>三、波函数和概率波及不确定性原理</strong></p><p><strong>四、氢原子光谱、玻尔的氢原子理论</strong></p><p><strong>五、薛定谔方程</strong></p><p><strong>六、电子的自旋和原子中电子的分布</strong></p><h1 id="热辐射"><a href="#热辐射" class="headerlink" title="热辐射"></a>热辐射</h1><p>任一物体在任一温度下都在不断向周围空间辐射<font color="red">各种波长</font>的电磁波,这种与温度有关的辐射,称为<font color="red">热辐射</font></p><h2 id="平衡热辐射"><a href="#平衡热辐射" class="headerlink" title="平衡热辐射"></a>平衡热辐射</h2><p>热平衡的物体内能不变,温度不变,物体辐射的能量=物体吸收的能量</p><p><strong>辐出度</strong>$M(T)$:单位面积上发射的所有波长的辐射总功率$[W/m^2]$</p><p><strong>单色幅出度</strong>$M_\lambda(T)$:单位表面发出波长在$\lambda$附近<font color="red">单位波长</font>内的辐射功率$[W/m^3]$</p><p>$M(T)=\int^{\infty}_0M_\lambda(T)\text d\lambda$</p><p>$M_\lambda(T)=\dfrac{dM(T)}{d\lambda}$</p><p>单色吸收系数$a_\lambda$:一定温度下,物体吸收波长在$\lambda\sim(\lambda+d\lambda)$的电磁波能量与入射到物体上相应波长电磁波总能量之比</p><h3 id="黑体"><a href="#黑体" class="headerlink" title="黑体"></a>黑体</h3><ul><li>理想模型</li><li>黑体无反射,任何温度下对任意波长的辐射的吸收比都为1,$M_{0\lambda}(T)=E^i_\lambda$</li></ul><h3 id="基尔霍夫定律"><a href="#基尔霍夫定律" class="headerlink" title="基尔霍夫定律"></a>基尔霍夫定律</h3><p>热平衡下各种物体对相同波长的单色辐出度和单色吸收比的比值相等,都等于同温度下黑体对同一波长的单色辐出度</p><p>$\frac{M_{\lambda 1}(T)}{a_{\lambda 1}(T)}=\frac{M_{\lambda 2}(T)}{a_{\lambda 2}(T)}=\dots =M_{0\lambda}(T)$</p><h2 id="黑体辐射实验定律"><a href="#黑体辐射实验定律" class="headerlink" title="黑体辐射实验定律"></a>黑体辐射实验定律</h2><p>黑体单色辐出度随温度和波长变化,相同温度下有一个最大值</p><p><img src="image-20241205090539359.png" alt="黑体单色辐出度的实验曲线"></p><h3 id="斯特藩-玻尔兹曼定律"><a href="#斯特藩-玻尔兹曼定律" class="headerlink" title="斯特藩-玻尔兹曼定律"></a>斯特藩-玻尔兹曼定律</h3><p>$M_0(T)=\int^{\infty}_0M_{0\lambda}(T)d\lambda=\sigma T^4$</p><p>$\sigma=5.67\times 10^{-8}W/(m^2\cdot K^4)$</p><h3 id="维恩位移定律"><a href="#维恩位移定律" class="headerlink" title="维恩位移定律"></a>维恩位移定律</h3><p>$T\lambda_m=b$</p><p>$b=2.897756\times 10^{-3}m\cdot K$</p><p><img src="image-20241212224955101.png" alt="例题"></p><p>$T_{太阳}=\dfrac{b}{\lambda_m}\approx5680K$</p><p>$T_{北极星}=\dfrac{b}{\lambda_m}=\dfrac{2.89\times 10^{-3} }{3500\times 10^{-10} }\approx8280K$</p><p>$M(T)_{太阳}=\sigma T^4\approx 5.9\times 10^{7}W/m^2$</p><p>$M(T)_{北极星}=\sigma T^4\approx2.7\times 10^8W/m^2$</p><h2 id="经典理论"><a href="#经典理论" class="headerlink" title="经典理论"></a>经典理论</h2><h3 id="维恩经验公式"><a href="#维恩经验公式" class="headerlink" title="维恩经验公式"></a>维恩经验公式</h3><p>$M_0(\lambda,T)=C_1\lambda^{-5}e^{-\frac{C_2}{\lambda T} }$</p><h3 id="瑞利-金斯公式"><a href="#瑞利-金斯公式" class="headerlink" title="瑞利-金斯公式"></a>瑞利-金斯公式</h3><p>$M_0(\lambda,T)=C_3\lambda^{-4}k_BT$</p><p><strong>紫外灾难</strong>:短波极限为无限大</p><h2 id="能量子假设"><a href="#能量子假设" class="headerlink" title="能量子假设"></a>能量子假设</h2><p>对频率为$\nu$的电磁辐射,物体不能以连续方式只能以$h\nu$为能量单位的不连续方位进行发射或吸收它</p><p>$quantum\quad\varepsilon=h\nu,振子的频率\mathsf \nu ,h=6.62\times 10^{-34}J\cdot s普朗克常数$</p><p>普朗克公式:$M_0(\lambda,T)=2\pi hc^2\lambda^{-5}\dfrac{1}{e^{\dfrac{hc}{\lambda k_BT} }-1}$</p><p>由普朗克公式推出斯特藩玻耳兹曼定律及维恩位移定律</p><script type="math/tex; mode=display">\begin{aligned}&C_1=2\pi hc^2,x=\frac{hc}{\lambda kT}\\&\text dx=-\frac{hc}{\lambda^2kT}\text d \lambda\\&M_0(x,t)=\frac{C_1k^4T^4}{h^4c^4}\frac{x^3}{e^x-1}\\&M_o(T)=\int^\infty_0 M_{\lambda 0}(T)\text d\lambda=\frac{C_1k^4T^4}{h^4c^4}\int^\infty_0 \frac{x^3}{e^x-1}\text dx=\frac{C_1k^4T^4}{h^4c^4}\frac{\pi^4}{15}=\sigma T^4\\&\left.\dfrac{dM_{\lambda 0} }{d\lambda}\right|_{\lambda_m}=0\rightarrow 5(1-e^{-\dfrac{hc}{\lambda_mkT} })=\dfrac{hc}{\lambda_mkT},令\dfrac{hc}{\lambda_mkT}=x\\&x=5(1-e^{-x}),迭代法得到x=4.9651\\&\lambda_m T=\dfrac{hc}{4.9651k}=b\\&维恩位移定理b=2.8978\times 10^{-3}m\cdot K\end{aligned}</script><h1 id="光电效应"><a href="#光电效应" class="headerlink" title="光电效应"></a>光电效应</h1><h2 id="实验规律"><a href="#实验规律" class="headerlink" title="实验规律"></a>实验规律</h2><p><strong>饱和光电流</strong>:入射单色光的光强一定时,光电流随光电管两端电势差的增加而增加,达到一饱和值$i_m$</p><p>相同波长的单色光,饱和光电流与光强成正比</p><p><strong>遏止电压</strong>:减小电势差至$U=0$时,光电流$i\neq 0$,光电子具有初动能,当负的电势差大到一定值时光电流完全为0,电势差的绝对值$U_a$为<strong>遏止电压</strong></p><p>$\dfrac{1}{2}mv_m^2=eU_a$</p><p>给定波长下遏止电压和入射光强度<strong>无关</strong></p><p><img src="image-20241210100617215.png" alt="遏止电压与入射光频率关系"></p><p>对于不同的金属,<strong>斜率相同,但是截距不同</strong></p><p><strong>结论</strong>:光电子从金属表面逸出具有一定的动能</p><ol><li>给定波长下,最大初动能与入射光的强度无关</li><li>最大初动能与入射光频率成线性关系</li></ol><p><strong>截止频率</strong></p><p>一定的金属阴极,入射光频率小于某个最小值时,不管光强多大,照射时间多长,没有光电子逸出,此最小频率称为该金属光电效应的<strong>截止频率或红限</strong></p><div class="table-container"><table><thead><tr><th><strong>金属</strong></th><th><strong>钨</strong></th><th><strong>钙</strong></th><th><strong>钠</strong></th><th><strong>钾</strong></th><th><strong>铷</strong></th><th><strong>铯</strong></th></tr></thead><tbody><tr><td><strong>红限</strong>/$𝟏𝟎^{𝟏𝟒}𝐇𝐳 $</td><td>10.95</td><td>7.73</td><td>5.53</td><td>5.44</td><td>5.15</td><td>4.69</td></tr></tbody></table></div><h2 id="爱因斯坦光子假说"><a href="#爱因斯坦光子假说" class="headerlink" title="爱因斯坦光子假说"></a>爱因斯坦光子假说</h2><ol><li>光具有<strong>粒子性</strong>,光是由一个一个的光子组成,每个光子的能量与其频率成正比,,$\varepsilon=h\nu$,光强$I=Nh\nu$</li><li>光子只能被电子整个地吸收或释放,光子具有<strong>整体性</strong></li><li>电子离开金属需要克服金属的束缚的逸出功并获得初动能</li></ol><p>光电效应方程:$h\nu=\dfrac{1}{2}mv_m^2+A=eU_m+A$</p><p>解释:</p><ol><li>单色光光强越强,光子数越多,释放更多光电子,饱和电流大,$I=Nh\nu$</li><li>瞬时性问题:光子被整个地吸收</li><li>遏止电压和照射光频率成线性关系,斜率等于$\dfrac{h}{\nu}$</li><li>$\nu\leq \dfrac{A}{h}$时最大初动能非正,不发生光电效应,即红限$\nu_0=\dfrac{A}{h}$</li></ol><p><img src="image-20241210105010128.png" alt="例2"></p><script type="math/tex; mode=display">\begin{aligned}&h\nu=eU_{max}+A\\&U_{max}=\dfrac{h\dfrac{c}{\lambda}-A}{e}=3.8eV\end{aligned}</script><p><img src="image-20241213003512023.png" alt="例题"></p><p>$\lambda\downarrow,\nu\uparrow, I=nh\nu不变,则n\downarrow,E_k=h\nu-W\uparrow,I\sim n\downarrow$</p><p>因此,光电子的初动能增大,饱和光电流减小</p><p><strong>光的波粒二象性</strong></p><p>光电效应确立光的粒子性,光又有波动性</p><p>能量$\varepsilon=h\nu=h\omega$</p><p>质量$m_p=\dfrac{\varepsilon}{c^2}=\dfrac{h\nu}{c^2}$</p><p>静质量$m_{p0}=0$</p><h1 id="康普顿效应"><a href="#康普顿效应" class="headerlink" title="康普顿效应"></a>康普顿效应</h1><p><img src="image-20241210111835626.png" alt="康普顿散射实验装置"></p><p>$\Delta \lambda =\lambda_c(1-\cos\theta)=\lambda-\lambda_0,\lambda_c=0.024263\dot A$</p><p><strong>定性分析</strong></p><p>康普顿的解释:</p><ul><li>波长变长:康氏效应时<font color="red">单个光子与物质中弱束缚电子</font>相互作用的结果</li><li>光子与石墨中弱束缚的电子碰撞使电子反冲,光子把部分能量传给电子,光子能量$\downarrow$.散射X射线的频率$\downarrow$,波长$\uparrow$</li></ul><p><strong>定量分析</strong></p><p>$h\nu_0+m_0c^2=h\nu+mc^2$</p><p>动量守恒</p><p>$\dfrac{h\nu_0}{c}=\dfrac{h\nu}{c}\cos\varphi+mV\cos\theta$</p><p><img src="image-20241210112333251-1733998278424-7.png" alt="image-20241210112333251"></p><p><img src="image-20241213010532656.png" alt="例题"></p><p>$\lambda=\lambda_0+\lambda_c(1-\cos\theta)$</p><p>$E_k=h\nu_0-h\nu=hc\left(\dfrac{1}{\lambda_0}-\dfrac{1}{\lambda}\right)$</p><h2 id="光的波粒二象性"><a href="#光的波粒二象性" class="headerlink" title="光的波粒二象性"></a>光的波粒二象性</h2><p>光的波动性:光的干涉,衍射,偏振</p><p>光的粒子性:热辐射,光电效应,康普顿效应</p><p><strong>普朗克-爱因斯坦关系式</strong>:$E=mc^2=h\nu,P=mc=\dfrac{h}{\lambda}=\dfrac{E}{c}$</p><p>$m=\dfrac{E}{c^2}=\dfrac{h\nu}{c^2}=\dfrac{h}{c\lambda}=\dfrac{P}{c}$</p><h1 id="氢原子光谱"><a href="#氢原子光谱" class="headerlink" title="氢原子光谱"></a>氢原子光谱</h1><p>氢原子各谱线的波数$\hat\nu$满足<strong>里德伯方程</strong>:$\hat\nu=R(\dfrac{1}{k^2}-\dfrac{1}{n^2})$</p><p>$R=1.096776\times 10^7m^{-1}(n=k+1,k+2,\cdots)$</p><h2 id="玻尔的假设"><a href="#玻尔的假设" class="headerlink" title="玻尔的假设"></a>玻尔的假设</h2><p><strong>频率条件</strong>:当原子从某一能级跃迁到另一能级时,要发射或吸收一个光子,光子频率满足条件:</p><p>$h\nu_{kn}=\left|E_k-E_n\right|$</p><p><strong>角动量量子化条件</strong>:电子角动量是量子化的,取值为:</p><p>$L=mv_nr_n=n\dfrac{h}{2\pi}=n\hbar$</p><p>$h=1.05457172\times 10^{-34}J\cdot s$</p><p>$n=1,2,\cdots$<strong>量子数</strong></p><p><strong>氢原子轨道半径</strong></p><p><strong>牛顿第二定律</strong>:$m\dfrac{v^2}{r}=\dfrac{e^2}{4\pi\varepsilon_0 r^2}\Rightarrow mv^2=\dfrac{e^2}{4\pi\varepsilon_0r}$</p><p>角动量量子化假设:$L=mvr=nh$</p><p><strong>玻尔半径</strong>:$r_1=\dfrac{\varepsilon_0h^2}{\pi me^2}=a_0=0.053\text{nm}\approx0.5\dot A$</p><p><strong>氢原子的能量和基态能</strong></p><p>电子能量:$E=\dfrac{1}{2}mv^2-\dfrac{e^2}{4\pi\varepsilon_0r}$</p><p>$m\dfrac{v^2}{r}=\dfrac{e^2}{4\pi\varepsilon_0r^2}\Rightarrow E=-\dfrac{e^2}{8\pi\varepsilon_0r}&lt;0$</p><p>$E_n=-\dfrac{e^2}{8\pi\varepsilon_0r}=-\dfrac{me^4}{8\varepsilon_0h^2n^2}=\dfrac{E_1}{n^2}$</p><p>基态能级$E_1=-13.6\text{eV}$</p><p><img src="image-20241212104158210.png" alt="image-20241212104158210"></p><script type="math/tex; mode=display">\begin{aligned}&\Delta E=\dfrac{me^4}{8\varepsilon_0h^2}\left(\dfrac{1}{(n-1)^2}-\dfrac{1}{n^2}\right)\\&\nu=\dfrac{E}{h}=\dfrac{me^4}{8\varepsilon_0h^3}\left(\dfrac{1}{(n-1)^2}-\dfrac{1}{n^2}\right)\\&=\dfrac{me^4}{8\varepsilon_0h^3}\dfrac{2n-1}{n^2(n-1)^2}\approx\dfrac{me^4}{8\varepsilon_0h^3}\dfrac{2}{n^3}=\dfrac{me^4}{4\varepsilon_0h^3n^3}(能级间距\Delta E\sim \dfrac{1}{n^3})\\\end{aligned}</script><p><img src="image-20241212105058951.png" alt="例13-5"></p><script type="math/tex; mode=display">\begin{aligned}&\Delta E=E_n-E_1=\dfrac{E_1}{n^2}-E_1\\&E_1=-13.6eV\\&n=\sqrt{\dfrac{13.6}{13.6-12.5} }\approx3.5\\&可能的能级跃迁:3\rightarrow 1,2\rightarrow 1,3\rightarrow 2\\&\dfrac{1}{\lambda_1}=R(\dfrac{1}{1^2}-\dfrac{1}{3^2})=\dfrac{8}{9}R\\&\dfrac{1}{\lambda_2}=R(\dfrac{1}{1^2}-\dfrac{1}{2^2})=\dfrac{3}{4}R\\&\dfrac{1}{\lambda_3}=R(\dfrac{1}{2^2}-\dfrac{1}{3^2})=\dfrac{5}{36}R\\&\lambda_1=1.026\times 10^{-7}m,\lambda_2=1.216\times 10^{-7}m,\lambda_3=6.565\times 10^{-7}m\end{aligned}</script><h1 id="微观例子的波粒二象性"><a href="#微观例子的波粒二象性" class="headerlink" title="微观例子的波粒二象性"></a>微观例子的波粒二象性</h1><h2 id="德布罗意波"><a href="#德布罗意波" class="headerlink" title="德布罗意波"></a>德布罗意波</h2><p><strong>德布洛意关系</strong>:$E=mc^2=h\nu=\hbar \omega$,$P=mv=\dfrac{h}{\lambda}=\hbar k$,$\lambda=\dfrac{h}{mv}=\dfrac{h}{m_0v}\sqrt{1-\dfrac{v^2}{c^2} }$(<font color="cornflowerblue">德布洛意公式</font>)</p><p>称对应粒子的波为<strong>德布洛意波</strong></p><p><strong>驻波形成条件</strong></p><p>因为电子在绕原子核做圆周运动，根据波粒二象性，电子同时也是一个波，且必须为驻波才不会因为波的相干而消失</p><p>所以当$2\pi r=n\lambda$时，驻波头尾的相位是相同的</p><p>$mvr=n\dfrac{h}{2\pi}=n\hbar$</p><p><img src="image-20241217100601587.png" alt="电子在闭合轨道上运动"></p><p><img src="image-20241217101017010.png" alt="例题"></p><script type="math/tex; mode=display">\begin{align}&E_k=eU\\&\lambda=\dfrac{h}{p}=\dfrac{h}{\sqrt {2m_0 E_k}}=\dfrac{h}{\sqrt{2m_0e}}\dfrac{1}{\sqrt{U}}=\dfrac{1.225(nm)}{\sqrt{U}}\\&\lambda_1=0.1nm,\lambda_2=0.0123nm\\\end{align}</script><p>由此可得,电子显微镜分辨能力远大于光学显微镜,$R=\dfrac{d}{1.22\lambda}$</p><p><img src="image-20241213013349225.png" alt="例题"></p><p>$v=\sqrt{\dfrac{2E_k}{m_e} }=8.39\times 10^6m\cdot s^{-1}$</p><p>$\lambda=\dfrac{h}{m_ev}=8.67\times 10^{-11}m$</p><h2 id="戴维孙-革末实验"><a href="#戴维孙-革末实验" class="headerlink" title="戴维孙-革末实验"></a>戴维孙-革末实验</h2><p><img src="image-20241217102807615.png" alt="实验装置示意图"></p><p>加速电压$U=54V$,电子波长$\lambda=\dfrac{1.225}{\sqrt{U}}=0.167\text{nm}$</p><font color="red">一维无线深方限势</font>$\begin{cases} 0,0\leq x\leq a,\\\infty,x<0或者x>a\end{cases}$其定态薛定谔方程:$\begin{cases}1)阱外:[-\dfrac{h^2}{2m}\dfrac{d^2}{dx^2}+\infty]\Psi(x)=E\Psi(x)\Rightarrow \Psi(x)=0\\2)阱内:-\dfrac{h^2}{2m}\dfrac{d^2}{dx^2}\Psi(x)=E\Psi(x)\Rightarrow \dfrac{d^2\Psi}{dx^2}+k^2\Psi=0\end{cases}$## 波函数**微观粒子**的**物质波**在空间传播,用波函数$\Psi(r,t)=\Psi(x,y,z,t)$描述,称为**德布洛意波函数**物质波波函数$\Psi(x,t)=\varphi_0e^{-i(Et-Px)/\hbar}=\varphi e^{iEt/\hbar}$$\varphi=\varphi_0\cdot e^{iPx/\hbar}$称为**振幅函数**玻尔诠释:粒子出现在某处的概率密度等于该时刻,该点波函数的模的平方,$\Psi\Psi^*=\left|\Psi\right|^2=\varphi\varphi^*=|\varphi|^2$-仅为空间位置函数**结论**:自由粒子波函数的模方对应波强$\dfrac{dN}{dV}\propto N\Psi\Psi^*\Rightarrow \Psi\Psi^*\propto\dfrac{dN}{NdV}$$\Psi\Psi^*$物理意义:是任一时刻t,在空间r点处单位体积中发现粒子的概率波函数满足的数学条件:<font color="blue">单值,有限,连续</font><p>归一化条件:$\int|\Psi(\vec{r},t)|^2dV=1$</p><h2 id="不确定原理"><a href="#不确定原理" class="headerlink" title="不确定原理"></a>不确定原理</h2><p>微观粒子的坐标和动量是一对不能同时取确定值的物理量</p><p>$\Delta x\cdot \Delta P_x\geq\dfrac{\hbar}{2}$</p><font color="cornflowerblue">思想实验</font>:电子单缝衍射动量为p电子水平入射,单缝缝宽$\Delta x=d$电子是<font color="red">波</font>,衍射主要落在中央明纹内,$d\sin\theta_1=\lambda\Rightarrow \Delta x\sin\theta_1=\lambda$电子是<font color="red">粒子</font>,电子和衍射屏作用获得竖直方向动量分量$p_x\approx 2p\sin\theta_1$德布罗意波的波长$p\lambda=h\Rightarrow \Delta x\Delta p_x=2h$对于落在其他明纹内的电子,$\Delta p_x\geq 2p\sin\theta_1,\Delta x\cdot\Delta p_x\geq 2h$**能量与时间的不确定关系**$\Delta E\cdot\tau\geq \dfrac{\hbar}{2},\Delta E为激发态的能级宽度,\tau为激发态的平均寿命\Leftarrow \tau\Delta \nu\sim 1$![例题](量子力学基础/image-20241217111535416.png)$\Delta x\approx 10^{-10}m,\Delta \nu=\dfrac{\Delta p}{m}\geq \dfrac{1}{m}\dfrac{\hbar}{2\Delta r}\approx5.8\times 10^{5}m/s$# 薛定谔方程## 薛定谔方程$i\hbar\dfrac{\delta}{\delta t}\Psi=[-\dfrac{\hbar}{2m}(\dfrac{\delta^2}{\delta^2 x}+\dfrac{\delta^2}{\delta^2 y}+\dfrac{\delta^2}{\delta^2 z})+U(x,y,z,t)]\Psi=[-\dfrac{\hbar}{2m}\bigtriangledown^2+U(x,y,z,t)]\Psi=\hat H(x,y,z,t)\Psi$$\bigtriangledown^2$拉普拉斯算符$\hat H$哈密顿算符**定态薛定谔方程**$\begin{cases}\triangledown^2\Psi+\dfrac{2m}{\hbar}(E-U)\Psi\\\hat H(R)\Psi=E\Psi\\f(t)=\exp(-\dfrac{i}{\hbar}Et)\end{cases}$<font color="red">$\triangledown^2\Psi+\dfrac{2m}{\hbar^2}(E-U)\Psi=0,\dfrac{1}{L^2}=[(角波数)^2]$</font><p><strong>推导过程</strong></p><script type="math/tex; mode=display">\begin{aligned}&E=\dfrac{p^2}{2m}\\&\omega=\dfrac{E}{\hbar},k=\dfrac{p}{\hbar}\\&\Psi(r,t)=(2\pi \hbar)^{-3/2}e^{i(p\cdot r -E t)/\hbar}(3)\\&(3)式求导:i\hbar \dfrac{\delta}{\delta t}\Psi_p=E\Psi_p\\&(3)求散度:-i\hbar \triangledown^2\Psi_p=\dfrac{p^2}{2m}\Psi_p\\&(1),(3),(5)得到:i\hbar \dfrac{\delta}{\delta t} \Psi^2=-\dfrac{\hbar^2}{2m}\triangledown^2\Psi_p\end{aligned}</script><h2 id="量子态叠加原理"><a href="#量子态叠加原理" class="headerlink" title="量子态叠加原理"></a>量子态叠加原理</h2><p>$Y=C_1\Psi_1+C_2\Psi_2+\cdots+C_n\Psi_n=\sum_IC_i\Psi(i)$</p><p>波函数叠加的概率密度$\neq$波函数概率密度的叠加</p><h2 id="一维定态薛定谔方程的应用"><a href="#一维定态薛定谔方程的应用" class="headerlink" title="一维定态薛定谔方程的应用"></a>一维定态薛定谔方程的应用</h2><p><strong>一维无限深方势阱</strong>:$U(x)=\begin{cases}0,0\leq x\leq a\\\infty,其他 \end{cases}$,阱宽为a</p><p>阱外:$[-\dfrac{\hbar^2}{2m}\dfrac{d^2}{dx^2}+\infty]\Psi_e(x)=E\Psi_e(x)\Rightarrow \Psi_e(x)=0$,势阱外粒子出现的概率密度$|\Psi_e|^2$为0</p><p>阱内:$-\dfrac{\hbar}{2m}\dfrac{d^2}{dx^2}\Psi_i(x)=E\Psi_i(x)$</p><p>$k^2=\dfrac{2mE}{h^2},则\dfrac{d^2\Psi}{dx^2}=-k^2\Psi_i$<font color="red">一维简谐振动的特征方程</font></p><p>$设\Psi_i(x)=C\sin(kx+\delta)$</p><p>波函数在阱壁上的连续条件:$\begin{cases}\Psi_i(0)=\Psi_e(0)=0\Rightarrow C\sin\delta =0,\delta =0\\  \Psi_i(a)=\Psi_e(a)=0\Rightarrow C\sin ka,k=n\pi/a\end{cases}$</p><p>归一化C:$\int^{+\infty}_{-\infty}|\Psi(x)|^2dx=\in^a_0C^2\sin^2 \dfrac{n\pi x}{a}dx=1\Rightarrow C=\sqrt{\dfrac{2}{a}}$</p><font color="red">$\Psi(x,t)=\begin{cases}\sqrt{\dfrac{2}{a}}\sin\dfrac{n\pi}{a}x\cdot e^{-\dfrac{i}{\hbar}Et},0\leq x\leq a\\0,x<0,x>a\end{cases}$</0,x></font><p><strong>运动特征:</strong></p><ol><li>粒子的能量是量子化的$k=\dfrac{n\pi}{a},k^2=\dfrac{2mE}{\hbar^2}\Rightarrow E_n=\dfrac{k^2\hbar^2}{2m}=\dfrac{n^2\pi^2\hbar^2}{2ma^2}=n^2E_1,E_1=\dfrac{\pi\hbar^2}{2ma^2}$</li><li>势阱中粒子出现的概率随着位置变化:$\rho_n(x)=|\Psi_n(x)|^2=\dfrac{2}{a}\sin^2 \dfrac{n\pi}{a}x$</li><li>粒子波函数是德布罗意波的驻波$\Psi(x,t)=\sqrt{\dfrac{2}{a}}\sin kx\cdot e^{-\dfrac{i}{\hbar}Et}$</li></ol><p><img src="image-20241219092920486.png" alt="image-20241219092920486"></p><blockquote><p>在$[-\dfrac{a}{2},\dfrac{a}{2}]的势阱中,距离x=0最近的概率密度最大位置为?$</p></blockquote><p>$|(N+\dfrac{1}{2})\dfrac{a}{14}-\dfrac{a}{2}|=|\dfrac{2N+1-14}{28}|=|\dfrac{2N-13}{28}|\geq\dfrac{1}{28}$</p><p><img src="image-20241219101830817.png" alt="image-20241219101830817"></p><script type="math/tex; mode=display">\begin{aligned}&E_n=n^2E_1=\dfrac{n^2\pi^2\hbar^2}{2ma^2}\\&\Delta E=E_n-E_{n-1}=(2n-1)E_1=(2n-1)\dfrac{\pi^2\hbar^2}{2ma^2}=(2n-1)\\&势阱宽度为1.0\times 10^{-2}m,\Delta E=6.02\times 10^{-34}m=(2n-1)3.37\times 10^{-15}eV\\&势阱宽度为1.0\times 10^{-10}m,\Delta E=6.02\times 10^{-18}m=(2n-1)\times 37.7eV\end{aligned}</script><h1 id="氢原子的三个量子数"><a href="#氢原子的三个量子数" class="headerlink" title="氢原子的三个量子数"></a>氢原子的三个量子数</h1><p>(1) 能量的量子化</p><p>$E_n=\dfrac{1}{n^2}E_1$</p><p>(2) 轨道角动量的量子化</p><p>$L=\sqrt{L_x^2+L_y^2+L_z^2}=\sqrt{l(l+1)}\hbar,l=0,1,2,\cdots ,n-1$</p><p>角量子受到主量子数的限制</p><p>$n=1\rightarrow l=0,1s$</p><p>$n=2\rightarrow l=0,1\ 2s,2p$</p><p>(3) 轨道角动量的空间量子化</p><p>角动量的大小$L=\sqrt{l(l+1)}\hbar$</p><p>角动量沿z轴的分量$L_z=m_l\hbar.m_l=0,\pm 1,\pm 2,\cdots,\pm l$</p><p>角动量与z轴之间的夹角$\theta$满足:$L\cos\theta=L_z$</p><h2 id="正常塞曼效应"><a href="#正常塞曼效应" class="headerlink" title="正常塞曼效应"></a>正常塞曼效应</h2><p>外磁场B中磁矩为$\mu$的原子的势能:</p><p>$\Delta E=U=-\mu\cdot B=-\mu_zB$</p><p>升降价运算符$L_{\pm}=L_x\pm iL_y$</p><p>$L_{\pm}L_{\mp}=(L_x\pm iL_y)(L_x\mp iL_y)=L^2-L_z^2\mp i(i\hbar L_z)$</p><p>$L^2\sigma_t=(L_-L_++L_z^2+\hbar_z)\sigma_t=(0+\hbar^2l^2+\hbar^2l)=\hbar^2l(l+1)\sigma_t$</p><p>氢原子角动量的磁矩为$\mu=\dfrac{e}{2m_e}L=\dfrac{e\hbar}{2m_e}\sqrt{l(l+1)}=\sqrt{l(l+1)}\mu_B$</p><p>玻尔磁子$\mu_B=\dfrac{e\hbar}{2m_e}=5.788\times 10^{-5}eV/T$</p><p>因此$\mu_z=-m_l\mu_B=-m_l\dfrac{e\hbar}{2m_e}$</p><p>$\Delta E=m_l\mu_B B,m_l=0,\pm1,\pm2,\cdots \pm l$</p><p><img src="image-20241224103844533.png" alt="习题13-39"></p><script type="math/tex; mode=display">\begin{aligned}&m_l=-1,0,1\\&L=\sqrt{l(l+1)}\hbar=\sqrt2 \hbar\\&m_l=0时,L\cos\theta=L_z=0,\theta=\dfrac{\pi}{2}\\&m_l=-1时,L\cos\theta=L_z=-\hbar=-\dfrac{1}{\sqrt 2}L,\theta=\dfrac{3\pi}{4}\\&m_l=1时,L\cos\theta=L_z=\hbar=\dfrac{1}{\sqrt 2}L,\theta=\dfrac{\pi}{4}\\\end{aligned}</script><h2 id="电子的自旋"><a href="#电子的自旋" class="headerlink" title="电子的自旋"></a>电子的自旋</h2><p>自旋角动量$\vec S$,分量$S_z$,自旋量子数$s$,自旋磁量子数$m_s$,自旋磁矩$\mu_s$</p><p>$S=\sqrt{s(s+1)}\hbar=\dfrac{\sqrt 3}{2}\hbar$</p><p>自旋量子数$s=1/2$</p><p>$S_z=m_s\hbar,m_s=\pm s=\pm \dfrac{1}{2}$</p><p>$\begin{aligned}n=&amp;1,2,3,4,5,6\\&amp;K,L,M,N,O,P\end{aligned}$</p><p>$\begin{aligned}l=0,1,2,3,4,5\\s,p,d,f,g,h\end{aligned}$</p><p>支壳层$nl$(已知$n,l$)容纳电子数为$N_l=2(2l+1)$</p><p>同一主壳层$n$(已知$n$)容纳的总电子数为$N_n=\sum^{n-1}_{l=0}2(2l+1)=2n^2$</p><h2 id="泡利不相容原理"><a href="#泡利不相容原理" class="headerlink" title="泡利不相容原理"></a>泡利不相容原理</h2><p>原子中任何两个电子(费米子)的量子数($n,l,m_l,m_s$)不能完全相同</p><h2 id="能量最小定理"><a href="#能量最小定理" class="headerlink" title="能量最小定理"></a>能量最小定理</h2><p>基态原子的电子尽可能占据未被填充的最低能级</p><p><img src="image-20241224112127720.png" alt="13-39"></p><script type="math/tex; mode=display">\begin{aligned}&1s^2,2s^2,2p^6,3s^2\end{aligned}</script><p><img src="image-20241224111818246.png" alt="image-20241224111818246"></p><script type="math/tex; mode=display">\begin{aligned}\dfrac{dP}{dr}&=\dfrac{A}{a_0}e^{-r/2a_0}-A\dfrac{r}{2a_0^2}e^{-r/2a_0}\\&=\dfrac{A}{a_0}e^{-r/2a_0}(1-\dfrac{r}{2a_0})\\&P在(0,2a_0)递增,在(2a_0,\infty)递减\\&因此,P在r=2a_0处有极大值\\\end{aligned}</script></0或者x>]]></content>
    
    
    <categories>
      
      <category>物理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>物理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>方差分析及回归分析</title>
    <link href="/2024/12/06/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/"/>
    <url>/2024/12/06/%E6%96%B9%E5%B7%AE%E5%88%86%E6%9E%90%E5%8F%8A%E5%9B%9E%E5%BD%92%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="方差分析及回归分析"><a href="#方差分析及回归分析" class="headerlink" title="方差分析及回归分析"></a>方差分析及回归分析</h1><h2 id="单因素试验的方差分析"><a href="#单因素试验的方差分析" class="headerlink" title="单因素试验的方差分析"></a>单因素试验的方差分析</h2><p>分组的依据称为<strong>因素</strong>,因素的不同状态称为因素的<strong>水平</strong>,只有一个因子,按因子的不同水平来分组的试验称为<strong>单因素试验</strong></p><p>假设因素有个水平,n个对象参与了试验,假定对应于因素第j个水平的组中有$n_j$个试验对象,响应变量数据为$X_{1j},X_{2j},\cdots,X_{n_jj},j=1,2,\cdots,s$</p><p>通常假定:</p><p>$\begin{align}&amp;X_{ij}=\mu_j+\varepsilon_{ij}\\&amp;\varepsilon\sim N(0,\sigma^2),各\varepsilon_{ij}独立\\&amp;i=1,2,\cdots,n_j,j=1,2,\cdots,s\end{align}$</p><p>检验假设:</p><p>$H_0:\mu_1=\mu_2=\cdots=\,\mu_s$</p><p>$H_1:\mu_1,\mu_2,,\cdots,\mu_s不全相等$</p><p>$\mu=\frac{1}{n}\sum^s_{j=1}n_j\mu_j,\sum^s_{j=1}n_j=n$</p><p>水平$A_j$的<strong>效应</strong>:$\delta_j=\mu_j-\mu,j=1,2,\cdots,s$</p><p>注意:$n_1\delta_1+n_2\delta_2+\dots+n_s\delta_s=0$</p><p><strong>总偏差平方和</strong>$S_T=\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{ij}-\overline X)^2$</p><p>$\overline X=\frac{1}{n}\sum^s_{j=1}\sum^{n_j}_{i=1}X_{ij}=\frac{1}{n}\sum^s_{j=1}n_j\overline X_{\cdot j}$</p><p><strong>效应平方和</strong>$S_A=\sum^s_{j=1}n_j(\overline X_j-\overline X)^2=\sum^s_{j=1}n_j\overline X_j^2-n\overline X^2$</p><p><strong>误差平方和</strong>$S_E=\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{ij}-\overline X_{\cdot j})^2$</p><p><strong>性质1</strong>:$S_T=S_A+S_E$</p><script type="math/tex; mode=display">\begin{aligned}&证明:\\S_T&=\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{ij}-\overline X)^2\\&=\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{ij}-\overline X_{\cdot j}+\overline X_{\cdot j}-\overline X)\\&=\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{ij}-\overline X_{\cdot j})^2+\sum^s_{j=1}\sum^{n_j}_{i=1}(\overline X_{\cdot j}-\overline X)^2+2\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{\cdot j-\overline X})(X_{ij}-\overline X_{\cdot j})\\&=S_A+S_E\\补充:&\sum^s_{j=1}\sum^{n_j}_{i=1}(X_{\cdot j-\overline X})(X_{ij}-\overline X_{\cdot j})=\sum^s_{j=1}(X_{\cdot j-\overline X})\sum^{n_j}_{i=1}(X_{ij}-\overline X_{\cdot j})=0\\\end{aligned}</script><p><strong>性质2</strong>:$E(S_T)=\sum^s_{j=1}n_j\delta_j^2+(n-1)\sigma^2$</p><p>$E(S_A)=\sum^s_{j=1}n_j\delta_j^2+(s-1)\sigma^2$</p><p>$E(S_E)=(n-s)\sigma^2$</p><script type="math/tex; mode=display">\begin{aligned}证明:\\E(S_T)=&E\left(\sum^s_{j=1}\sum^{n_j}_{i=1}\left(X_{ij}-\overline X\right)^2\right)=E(\sum^s_{j=1}\sum^{n_j}_{i=1}X_{ij}^2-n\overline X^2)\\=&\sum^s_{j=1}\sum^{n_j}_{i=1}E\left(X_{ij}^2\right)-nE(\overline X^2)\\=&\sum^s_{j=1}\sum^{n_j}_{i=1}[\sigma^2+(\mu+\delta_j)^2]-n[\dfrac{\sigma^2}{n}+\mu^2]\\=&n\sigma^2+n\mu^2+2\mu\sum^s_{j=1}n_j\delta_j+\sum^s_{j=1}n_j\delta_j^2-\sigma^2-n\mu^2=\sum^s_{j=1}n_j\delta^2_j+(n-1)\sigma^2\\补充:&E(\overline X)=\mu,E(\overline X^2)=\mu^2+\dfrac{\sigma^2}{n}\\E(S_E)=&\sum^s_{j=1}E\left\{\sum^{n_j}_{i=1}(X_{ij}-\overline X_{\cdot j})^2\right\}=\sum^s_{j=1}(n_j-1)\sigma^2=(n-s)\sigma^2\\E(S_A)=&E(S_T-S_E)=\sum^s_{j=1}n_j\delta_j^2+(s-1)\sigma^2\end{aligned}</script><p><strong>性质3</strong>:</p><ol><li>$S_A,S_E$相互独立</li><li>$\dfrac{x_E}{\sigma^2}\sim\chi^2(n-s)$</li><li>当$H_0$为真时,$\dfrac{S_A}{\sigma^2}\sim\chi^2(s-1)$</li></ol><p>$\Rightarrow F=\dfrac{\dfrac{S_A}{s-1} }{\dfrac{S_E}{n-s} }\sim F(s-1,n-s)$</p><p>在给定水平$\alpha$时,<strong>检验拒绝域</strong>为$F=\dfrac{\dfrac{S_A}{s-1} }{\dfrac{S_E}{n-s} }\geq F_\alpha(s-1,n-s)$</p><p><strong>未知参数的估计</strong></p><ol><li>$\hat\sigma^2=\dfrac{S_E}{n-s}$</li><li>$\hat\mu=\overline X$</li><li>$\hat\mu_j=\overline X_j$</li><li>$\hat\delta_j=\overline X_j-\overline X$</li></ol><p>以上估计均为相应参数的无偏估计</p><p>$\mu_j-\mu_k=\delta_j-\delta_k(j\neq k)$<strong>区间估计</strong></p><p>$\left(\overline X_{\cdot j}-\overline X_{\cdot k}\mp t_{\alpha/2}(n-s)\sqrt{\overline S_E(1/n_j+1/n_k)}\right)$为$\mu_j-\mu_k$的水平为$1-\alpha$的置信区间</p><h2 id="双因素试验的方差分析"><a href="#双因素试验的方差分析" class="headerlink" title="双因素试验的方差分析"></a>双因素试验的方差分析</h2><h3 id="双因素等重复试验的方差分析"><a href="#双因素等重复试验的方差分析" class="headerlink" title="双因素等重复试验的方差分析"></a>双因素等重复试验的方差分析</h3><p><img src="image-20241206192850305.png" alt="双因素等重复试验的方差分析"></p><p>$\begin{align}&amp;X_{ijk}=\mu_{ij}+\varepsilon_{ijk}\\&amp;\varepsilon\sim N(0,\sigma^2),各\varepsilon_{ijk}独立\\&amp;i=1,\dots,r,j=1,\dots,s,k=1,\dots,t\\&amp;\mu_{ij},\sigma^2均为未知参数\end{align}$</p><p><strong>总平均</strong>$\mu=\dfrac{1}{rs}\sum^r_{i=1}\sum^s_{j=1}\mu_{ij}$</p><p>$\mu_{i\cdot}=\frac{1}{s}\sum^s_{j=1}\mu_{ij},i=1,\dots,r,\\\mu_{\cdot j}=\frac{1}{r}\sum^r_{i=1}\mu_{ij},j=1,\dots,s$</p><p>$水平A_i的效应\alpha_i=\mu_{i\cdot}-\mu,i=1,\dots,r$</p><p>$水平B_j的效应\beta_j=\mu_{\cdot j}-\mu,j=1,\dots,s$</p><p>$\sum^r_{i=1}\alpha_i=0,\sum^s_{j=1}\beta_j=0$</p><p>$水平A和水平B的交互效应\gamma_{ij}=\mu_{ij}-\mu_{i\cdot}-\mu_{\cdot j}+\mu$</p><p>$\sum^r_{i=1}\gamma_{ij}=0,\sum^s_{j=1}\gamma_{ij}=0$</p><p><strong>模型</strong>:$\begin{cases}X_{ijk}=\mu+\alpha_i+\beta_j+\gamma_{ij}+\varepsilon_{ijk}\\\varepsilon_{ijk}\sim N(0,\sigma^2)\\i=1,\dots,r,j=1,\dots,s,k=1,\dots,t.\\\sum^r_{i=1}\alpha_i=0,\sum^s_{j=1}\beta_j=0,\sum^r_{i=1}\gamma_{ij}=0.\sum^s_{j=1}\gamma_{ij}=0.\\\mu,\alpha_i,\beta_i,\gamma_{ij},\sigma^2均未知\end{cases}$</p><p>分别校验假设</p><p>$𝐻_{01}: 𝛼_1 = 𝛼_2 = ⋯ = 𝛼_𝑟 = 0, 𝐻_{11}: 𝛼_1, . . . , 𝛼_𝑟 不全是零\\𝐻_{02}: 𝛽_1 = 𝛽_2 = ⋯ = 𝛽_𝑠 = 0, 𝐻_{12}: 𝛽_1, . . . , 𝛽_𝑠 不全是零\\𝐻_{03}: 𝛾_{11} = 𝛾_{12} = ⋯ = 𝛾_{𝑟𝑠} = 0, 𝐻_{13}: 𝛾_{11}, . . . , 𝛾_{𝑟𝑠} 不全是零$</p><p><strong>总偏差平方和</strong>$S_T=\sum^r_{i=1}\sum^s_{j=1}\sum^t_{k=1}(X_{ijk}-\overline X)^2$</p><p><strong>误差平方和</strong>$S_E=\sum^r_{i=1}\sum^s_{j=1}\sum^t_{k=1}(X_{ijk}-\overline X_{ij\cdot})^2$</p><p><strong>因素A的效应平方和</strong>:$S_A=st\sum^r_{i=1}(\overline X_{i\cdot\cdot}-\overline X_{ij\cdot})^2$</p><p><strong>因素B的效应平方和</strong>:$S_B=rt\sum^s_{i=1}(\overline X_{\cdot j\cdot}-\overline X)$</p><p><strong>AB交互效应平方和</strong>:$S_{A\times B}=t\sum^r_{i=1}\sum^s_{j=1}(\overline X_{ij\cdot}-\overline X_{i\cdot\cdot}-\overline X_{\cdot j\cdot}+\overline X)^2$</p><p><strong>性质1</strong>:$S_T=S_A+S_B+S_{A\times B}+S_E$</p><p><strong>性质2</strong>:</p><p>$E\left(\dfrac{S_E}{rs(t-1)}\right)=\sigma^2$</p><p>$E\left(\dfrac{S_A}{r-1}\right)=\sigma^2+\dfrac{st\sum^r_{i=1}\alpha^2_i}{r-1}$</p><p>$E(\dfrac{S_B}{s-1})=\sigma^2+\dfrac{rt\sum^s_{j=1}\beta_j^2}{s-1}$</p><p>$E\left(\dfrac{S_{A\times B} }{r-1}\right)=\sigma^2+\dfrac{t\sum^r_{i=1}\sum^s_{j=1}\gamma^2_{ij} }{(r-1)(s-1)}$</p><p>各个假设的<strong>拒绝域</strong></p><p>$H_{01}$:$F_A\geq F_\alpha(r-1,rs(t-1))$</p><p>$H_{02}:F_B\geq F_\alpha(s-1,rs(t-1))$</p><p>$H_{03}:F_{A\times B}=\dfrac{\dfrac{S_A}{(r-1)(s-1)} }{\dfrac{S_E}{rs(t-1)} }\sim F((r-1)(s-1),rs(t-1))$</p><p>$F_{A\times B}\geq F_\alpha((r-1)(s-1),rs(t-1))$</p><p><img src="image-20241206201052720.png" alt="双因素试验方差分析表"></p><h3 id="双因素无重复试验的方差分析"><a href="#双因素无重复试验的方差分析" class="headerlink" title="双因素无重复试验的方差分析"></a>双因素无重复试验的方差分析</h3><p><img src="image-20241206204334603.png" alt="双因素无重复试验的方差分析表"></p><h2 id="一元线性回归分析"><a href="#一元线性回归分析" class="headerlink" title="一元线性回归分析"></a>一元线性回归分析</h2><p>估计$\mu(x)=a+bx$的问题称为求<strong>一元线性回归</strong>问题</p><p>基本假设:$\begin{cases}Y=a+bx+\varepsilon\\E(\varepsilon)=0,D(\varepsilon)=\sigma^2\end{cases}$</p><p>正态假设:$\varepsilon\sim N(0,\sigma^2)$</p><p><strong>针对的问题</strong></p><ol><li>a,b的估计</li><li>$\sigma^2$的估计</li><li>线性假设的显著性检验</li><li>回归系数b的置信区间</li><li>回归函数$\mu(x)=a+bx$的点估计和置信区间</li></ol><h3 id="最小二乘估计"><a href="#最小二乘估计" class="headerlink" title="最小二乘估计"></a>最小二乘估计</h3><p>$Q(a,b)=\sum^n_{i=1}(y_i-a-bx_i)^2$</p><p>$Q(\hat a,\hat b)=\min\limits_{a,b} Q(a,b)$</p><p>$\dfrac{\delta Q}{\delta a}=-2\sum^n_{i=1}(y_i-a-bx_i)=0$</p><p>$\dfrac{\delta Q}{\delta b}=-2\sum^n_{i=1}(y_i-a-bx_i)x_i=0$</p><p>正规方程组:$\left(\sum\limits^n_{i=1}x_i\right)a+\left(\sum\limits^n_{i=1}x_i^2\right)b=\sum\limits^n_{i=1}x_iy_i$</p><p>a,b的最小二乘估计:$\hat a=\hat y-\hat x\hat b,\hat b=\dfrac{S_{xy} }{S_{xx} }$</p><p>$Q_e=\sum^n_{i=1}e^2_i=\sum^n_{i=1}(y_i-\hat y_i)^2=Q(\hat a,\hat b)$</p><p>$Q_e=S_{yy}-\hat bS_{xy}$</p><p><strong>误差方差的估计</strong>$\hat\sigma^2=\dfrac{Q_e}{n-2}$</p><h3 id="线性假设的显著性检验"><a href="#线性假设的显著性检验" class="headerlink" title="线性假设的显著性检验"></a>线性假设的显著性检验</h3><p>$H_0:b=0,H_1:b\neq 0$</p><p>若原假设被拒绝,则说明回归效果是显著的</p><p>$\hat b\sim N(b,S^{-1}_{xx}\sigma^2)$</p><p>$\dfrac{(n-2)\hat \sigma^2}{\sigma}=\dfrac{Q_e}{\sigma^2}\sim \chi^2(n-2)$</p><p>$\hat b与Q_e独立$</p><p>检验拒绝域$|t|=\dfrac{1}{\hat\sigma}\sqrt{S_{xx} }\geq t_{\alpha/2}(n-2)$</p><h3 id="回归系数b的置信区间"><a href="#回归系数b的置信区间" class="headerlink" title="回归系数b的置信区间"></a>回归系数b的置信区间</h3><p>$\dfrac{\hat b-b}{\hat\sigma}\sqrt{S_{xx} }\sim t(n-2)$</p><p>$\dfrac{|\hat b-b|}{\hat \sigma}\sqrt{S_{xx} }\leq t_{\alpha/2}(n-2)$</p><p>b的置信水平为$1-\alpha$的置信区间:<br>$\left(\hat b\pm t_{\alpha/2}(n-2)\times \dfrac{\hat \sigma}{\sqrt{S_{xx} } }\right)$</p><h3 id="mu-x-a-bx-函数值的点估计和置信空间"><a href="#mu-x-a-bx-函数值的点估计和置信空间" class="headerlink" title="$\mu(x)=a+bx$函数值的点估计和置信空间"></a>$\mu(x)=a+bx$函数值的点估计和置信空间</h3><p><strong>点估计</strong>:$\hat y_0=\hat\mu(x_0)=\hat a+\hat bx_0$</p><p><strong>置信空间</strong>:$\hat Y_0\pm t_{\alpha/2}(n-2)\hat\sigma\sqrt{\dfrac{1}{n}+\dfrac{(x_o-\overline x)^2}{S_xx} }$</p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P7-CPU设计文档</title>
    <link href="/2024/12/02/P7%20debug%E6%80%BB%E7%BB%93/"/>
    <url>/2024/12/02/P7%20debug%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="P7-debug总结"><a href="#P7-debug总结" class="headerlink" title="P7 debug总结"></a>P7 debug总结</h1><h2 id="阻塞转发错误"><a href="#阻塞转发错误" class="headerlink" title="阻塞转发错误"></a>阻塞转发错误</h2><p>上机的过程中遇到了转发错误,再三排查后,发现是<code>mtc0</code>产生了不应该有的转发.</p><p>在ID的控制模块<code>CTRL</code>中,我采用了一种过于”取巧”的方法,将rd写入了ID_A3(<em>解码阶段输出的写入寄存器地址(向后传递直至WB阶段)</em>)</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> ID_A3 = ... :<br>      (add || sub || and_ || or_ || slt || sltu || mflo || mfhi || mtc0) ? rd : <br>               <span class="hljs-number">0</span>; <br></code></pre></td></tr></table></figure><p>这个<code>ID_A3</code>会随着流水线向后传递,并传递给<code>HAZARD_CTRL</code>(冒险控制模块)中用于处理阻塞和转发的问题.例如:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 转发逻辑</span><br><span class="hljs-keyword">assign</span> ID_RD1_forward = (ID_A1 == <span class="hljs-number">5&#x27;b0</span>) ? <span class="hljs-number">0</span> :<br>       (ID_A1 == MEM_A3) ? MEM_WD : <span class="hljs-comment">// 这里的MEM_A3是上一周期的EX_A3</span><br>           (ID_A1 == WB_A3) ? WB_WD : <span class="hljs-comment">// 这里的WB_A3是上一周期的WB_A3</span><br>                        ID_RD1;<br></code></pre></td></tr></table></figure><p>那么问题来了,我的阻塞逻辑代码中,</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL = ... || (ID_Eret &amp;&amp; ((EX_MTC0 &amp;&amp; EX_A3 == <span class="hljs-number">5&#x27;D14</span>) || (MEM_MTC0 &amp;&amp; MEM_A3 == <span class="hljs-number">5&#x27;d14</span>))); <br></code></pre></td></tr></table></figure><p>这样看似没有问题.但其实这里<code>mtc0</code>指令导入的<code>A3</code>并不是真正用于写入寄存器堆的地址,而是<code>CP0</code>的对应地址.因此有可能产生本不应该有的转发.例如以下代码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $1, $0, 0x1234<br>mtc0 $1, $12<br>add $13, $0, $12<br></code></pre></td></tr></table></figure><p>该代码中,第二行指令<code>mtc0</code>错误地向<code>add</code>指令转发了<code>$12</code>的值,但它们指向的<code>$12</code><strong>根本不是同一个寄存器!</strong></p><p>我的对应措施是取消执行<code>mtc0</code>指令时<code>rd</code>写入<code>ID_A3</code>的做法,在<code>HARZARD_CTRL</code>中,传入<code>MEM_instr</code>和<code>EX_instr</code>(<code>MEM</code>,<code>EX</code>区当前各自传递的指令)</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL = ... || (ID_Eret &amp;&amp; ((EX_MTC0 &amp;&amp; EX_instr[<span class="hljs-number">15</span>:<span class="hljs-number">11</span>] == <span class="hljs-number">5&#x27;D14</span>) || (MEM_MTC0 &amp;&amp; MEM_instr[<span class="hljs-number">15</span>:<span class="hljs-number">11</span>] == <span class="hljs-number">5&#x27;d14</span>))); <br></code></pre></td></tr></table></figure><h2 id="中断错误"><a href="#中断错误" class="headerlink" title="中断错误"></a>中断错误</h2><p>错误情况:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">7163</span>: we got @<span class="hljs-number">3556</span>:$<span class="hljs-number">31</span> &lt;= <span class="hljs-number">00005</span>ec5 when we expected @<span class="hljs-number">356</span>c:$<span class="hljs-number">18</span> &lt;= <span class="hljs-number">00000000</span><br><span class="hljs-attribute">7164</span>: we got @<span class="hljs-number">3548</span>:$ <span class="hljs-number">4</span> &lt;= <span class="hljs-number">0000355</span>c when we expected @<span class="hljs-number">3510</span>:$ <span class="hljs-number">5</span> &lt;= <span class="hljs-number">00003544</span><br><span class="hljs-attribute">7165</span>: we got too much<br><span class="hljs-attribute">7170</span>: we got @<span class="hljs-number">3078</span>:$<span class="hljs-number">12</span> &lt;= <span class="hljs-number">0000240</span>c when we expected @<span class="hljs-number">3080</span>:$<span class="hljs-number">30</span> &lt;= <span class="hljs-number">0000216</span>f<br></code></pre></td></tr></table></figure><p>这个bug在课上并没有发现,喜提计组”再来一次”大奖</p><p>首先说错误点:</p><p><strong>在发生阻塞时,<code>ID</code>和<code>EX</code>间的流水寄存器接收到冲洗信号,但应当保留<code>PC</code>和<code>BD</code>(branch delay)*两种信息的传递,也就是按正常传递的逻辑传递<code>PC</code>和<code>BD</code></strong></p><p>前者<code>PC</code>比较好理解,课下思考题也有问到这个问题.为了保证<code>macroscopic_pc</code>不出现诸如<code>0x0000_0000</code>这类的值.</p><p>但是<code>BD</code>稍微有些理解的困难度.当外部中断信号产生时,<code>CP0</code>会根据接受到<code>BD</code>来决定<code>EPC</code>存储的值,如果<code>BD</code>有误,那么<code>PC</code>跳转错误就很有可能发生,</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enable) <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (flush)<span class="hljs-keyword">begin</span><br>          EX_PC &lt;= ID_PC;<br>          EX_BD &lt;= ID_BD;<br> ...<br>          <span class="hljs-comment">// 其余信号全部传递0</span><br>        <span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>我验证了多种ID,EX间流水寄存器处理阻塞的错误方法,例如</p><p>A.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">EX_PC &lt;= EX_PC; <span class="hljs-comment">// PC不变,传递上一个PC</span><br>EX_BD &lt;= <span class="hljs-number">1&#x27;b0</span>;<br></code></pre></td></tr></table></figure><p>B.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">EX_PC &lt;= EX_PC;<br>EX_BD &lt;= EX_BD;<br></code></pre></td></tr></table></figure><p>C.</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs verilog">EX_PC &lt;= ID_PC;<br>EX_BD &lt;= <span class="hljs-number">1&#x27;b0</span>;<br></code></pre></td></tr></table></figure><p>我们来看官方<code>tb</code>中的中断逻辑处理代码:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">parameter</span> target_pc = <span class="hljs-number">32&#x27;h00003010</span>;<br><br><span class="hljs-keyword">integer</span> count;<br><br><span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>    count = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">end</span><br><br><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">negedge</span> clk) <span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>        interrupt = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (interrupt) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (|m_int_byteen &amp;&amp; (m_int_addr &amp; <span class="hljs-number">32&#x27;hfffffffc</span>) == <span class="hljs-number">32&#x27;h7f20</span>) <span class="hljs-keyword">begin</span><br>                interrupt = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (fixed_macroscopic_pc == target_pc) <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (count == <span class="hljs-number">0</span>) <span class="hljs-keyword">begin</span><br>                count = <span class="hljs-number">1</span>;<br>                interrupt = <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><p>用文字简述该逻辑:当<code>macroscopic_pc</code>到达<code>tb</code>指定的<code>target_pc</code>时,<code>interupt</code>置为1,即外部产生中断信号.</p><p>所以我们可以很容易的排除C:</p><p>当延迟槽指令位于ID区时,与流水线后面的指令发生阻塞冲突时(这种例子确实不太好列举):<br><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $20, 0x1001          # 3000<br>mtc0 $20, $12 // 允许中断 # 3004<br>ori $1, $0, 0x1234 # 3008<br>ori $2, $0, 0x2345 # 300c<br>mult $1, $2        # 3010<br>jal 0x3020         # 3014<br>mflo $3            # 3018(发生中断)<br>ori $5, $0, 0x5555 # 301c<br>ori $6, $0, 0x6666 # 3020<br></code></pre></td></tr></table></figure></p><p>我们指定<code>target_pc</code>为<code>0x3018</code>,<code>mflo</code>会与<code>EX</code>区的<code>MDU</code>模块产生的<code>busy</code>信号发生冲突,因此在C情况下,<code>ID</code>和<code>EX</code>间的流水寄存器产生了<code>nop</code>指令,该指令携带着<code>0x3018</code>的<code>PC</code>和<code>0</code>的<code>BD</code>,传递到MEM区时,<code>PC</code>传递给<code>macroscopic_pc</code>输出到外界,触发了外界中断信号的产生,<code>CP0</code>接受到该中断信号进入中断处理逻辑,这时该模块依据接受到的<code>BD</code>处理<code>EPC</code>,但是<strong><code>BD</code>是错误的</strong>,也就最终导致了跳转错误.</p><p>至于A和B,上述代码确实无法证明它的错误,我猜测是课上测试<code>tb</code>会有更复杂的中断信号产生的逻辑,总之,<code>EX_PC &lt;= ID_PC;EX_BD &lt;= ID_BD;</code>确实是最好的,因为它保证了两点:</p><ol><li>发生阻塞的指令对应<code>PC</code>会多次出现在<code>macroscopic_pc</code>中(A,B无法做到这一点)</li><li>指令传递中,<code>PC</code>一定与正确的<code>BD</code>对应</li></ol>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P7-CPU设计文档</title>
    <link href="/2024/12/02/P7-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/12/02/P7-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="P7-CPU设计文档"><a href="#P7-CPU设计文档" class="headerlink" title="P7-CPU设计文档"></a>P7-CPU设计文档</h1><h2 id="流水线架构"><a href="#流水线架构" class="headerlink" title="流水线架构"></a>流水线架构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> mips.v<br><span class="hljs-bullet">-</span> TC0 # 计时器0<br><span class="hljs-bullet">-</span> TC1 # 计时器1<br><span class="hljs-bullet">-</span> BRIDGE # 系统桥<br><span class="hljs-bullet">-</span> CPU.v # 单周期CPU的封装模块<br><span class="hljs-bullet">        -</span> IF #取指阶段<br><span class="hljs-bullet">            -</span> pc<br><span class="hljs-bullet">        -</span> IF<span class="hljs-emphasis">_ID #IF与ID之间流水寄存器</span><br><span class="hljs-emphasis">        - ID #译码阶段</span><br><span class="hljs-emphasis">            - ID_</span>CTRL #采用分布式译码<br><span class="hljs-bullet">            -</span> GRF # 寄存器堆<br><span class="hljs-bullet">            -</span> EXT # 立即数扩展<br><span class="hljs-bullet">            -</span> CMP # 比较2个数<br><span class="hljs-bullet">            -</span> NPC # 为B类/J计算下条地址<br><span class="hljs-bullet">        -</span> ID<span class="hljs-emphasis">_EX #ID与EX之间的寄存器</span><br><span class="hljs-emphasis">        - EX  #执行阶段</span><br><span class="hljs-emphasis">            - EX_</span>CTRL #采用分布式译码<br><span class="hljs-bullet">            -</span> ALU # 多功能计算模块<br><span class="hljs-bullet">            -</span> MULT<span class="hljs-emphasis">_DIV # 乘除模块</span><br><span class="hljs-emphasis">        - EX_</span>MEM #EX与MEM之间的寄存器<br><span class="hljs-bullet">        -</span> MEM #存储阶段<br><span class="hljs-bullet">            -</span> MEM<span class="hljs-emphasis">_CTRL #采用分布式译码</span><br><span class="hljs-emphasis">            - MEM_</span>EXT # MEM输出数据扩展位数<br><span class="hljs-bullet">        -</span> MEM<span class="hljs-emphasis">_WB #MEM与WB之间的寄存器</span><br><span class="hljs-emphasis">        - HAZARD_</span>CTRL #冒险控制模块<br><span class="hljs-bullet">        -</span> CP0 #协处理器<br><span class="hljs-code"></span><br></code></pre></td></tr></table></figure><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><h4 id="顶层"><a href="#顶层" class="headerlink" title="顶层"></a>顶层</h4><blockquote><p>Instruction Fetch阶段,从指令寄存器中读取指令</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr><td>req</td><td>in</td><td></td><td>中断请求信号</td></tr><tr><td>enablePC</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr><td>ID_OP</td><td>in</td><td>[3:0]</td><td>ID区处理指令分支类型</td></tr><tr><td>IF_PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr><tr><td>IF_BD</td><td>out</td><td></td><td>IF区当前指令是否为延迟槽指令</td></tr><tr><td>IF_ExcCode</td><td>out</td><td>[4:0]</td><td>IF区异常码</td></tr></tbody></table></div><h4 id="PC部件"><a href="#PC部件" class="headerlink" title="PC部件"></a>PC部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr><td>req</td><td>in</td><td></td><td>中断请求信号</td></tr><tr><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr><td>PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr></tbody></table></div><h5 id="PC部件处理逻辑说明"><a href="#PC部件处理逻辑说明" class="headerlink" title="PC部件处理逻辑说明"></a>PC部件处理逻辑说明</h5><blockquote><p>信号优先级:reset &gt; req &gt; enable</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (reset) <span class="hljs-keyword">begin</span><br>        reg_pc&lt;=<span class="hljs-number">32&#x27;h3000</span>; <span class="hljs-comment">// PC重置</span><br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req)<span class="hljs-keyword">begin</span><br>        reg_pc &lt;= <span class="hljs-number">32&#x27;h4180</span>; <span class="hljs-comment">// 跳转至32&#x27;H4180,处理异常逻辑代码</span><br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enable) <span class="hljs-keyword">begin</span><br>        reg_pc&lt;=NPC;<br>      <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h4 id="IF区IF-BD信号逻辑说明"><a href="#IF区IF-BD信号逻辑说明" class="headerlink" title="IF区IF_BD信号逻辑说明"></a>IF区IF_BD信号逻辑说明</h4><blockquote><p><code>IF_BD</code>信号用于指定当前IF区指令是否为延迟槽指令;</p><p>根据<code>ID_OP</code>信号决定:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> IF_BD = (ID_OP != `ID_NOJUMP) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br></code></pre></td></tr></table></figure><ul><li>若ID区指令为跳转指令(branch, jal, jr, beq, bne, …),IF_BD置1</li><li>反之,IF_BD置0</li></ul><p>依次经过<code>IF_ID</code>,<code>ID_EX</code>,<code>EX_MEM</code>间流水寄存器,直到<code>PC0</code>,<code>PC0</code>根据该信号决定<code>eret</code>跳转地址(即<code>EPC</code>)</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog">EPC &lt;= (BD_in == <span class="hljs-number">1</span>) ? VPC - <span class="hljs-number">32&#x27;D4</span> : VPC;<br></code></pre></td></tr></table></figure><ul><li>若VPC(受害PC)为延迟槽指令,则EPC设置为该指令的上一条指令地址</li><li>若VPC(受害PC)不是延迟槽指令,则EPC设置为该指令地址</li></ul><p>注:若在4180H处理异常逻辑代码中不修改EPC,直接使用<code>eret</code>指令会导致死循环</p></blockquote><h3 id="IF-ID"><a href="#IF-ID" class="headerlink" title="IF_ID"></a>IF_ID</h3><blockquote><p>在时钟上升沿将IF_PC,IF_instr的值传递给ID_PC,ID_instr</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr><td>req</td><td>in</td><td></td><td>中断请求信号</td></tr><tr><td>flush</td><td>in</td><td></td><td>冲洗信号</td></tr><tr><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF传入PC地址</td></tr><tr><td>IF_instr</td><td>in</td><td>[31:0]</td><td>IF传入指令</td></tr><tr><td>IF_ExcCode</td><td>in</td><td>[4:0]</td><td>IF区异常码</td></tr><tr><td>IF_BD</td><td>in</td><td></td><td>IF区延迟槽指令信号</td></tr><tr><td>ID_PC</td><td>out</td><td>[31:0]</td><td>ID接收PC地址</td></tr><tr><td>ID_instr</td><td>out</td><td>[31:0]</td><td>ID接收指令</td></tr><tr><td>ID_ExcCode</td><td>out</td><td>[4:0]</td><td>ID接收异常码</td></tr><tr><td>ID_BD</td><td></td><td></td><td>ID接收延迟槽指令信号</td></tr></tbody></table></div><blockquote><p>优先级:<code>reset &gt; req &gt; enable/flush</code></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br> ID_PC &lt;= <span class="hljs-number">32&#x27;h3000</span>;<br> ID_instr &lt;= <span class="hljs-number">32&#x27;h0</span>;<br> ID_ExcCode = <span class="hljs-number">5&#x27;b0</span>;<br> ID_BD = <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (req)<span class="hljs-keyword">begin</span><br> ID_PC &lt;= <span class="hljs-number">32&#x27;h4180</span>; <span class="hljs-comment">// 异常处理程序入口地址</span><br> ID_instr &lt;= <span class="hljs-number">32&#x27;b0</span>; <span class="hljs-comment">// nop</span><br> ID_ExcCode &lt;= <span class="hljs-number">5&#x27;b0</span>;<br> ID_BD &lt;= <span class="hljs-number">1&#x27;b0</span>;<br><span class="hljs-keyword">end</span><br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (enable)<span class="hljs-keyword">begin</span><br> <span class="hljs-keyword">if</span> (flush)<span class="hljs-keyword">begin</span><br>     ID_PC &lt;= <span class="hljs-number">32&#x27;h3000</span>;<br>     ID_instr &lt;= <span class="hljs-number">32&#x27;h0</span>;<br>     ID_ExcCode &lt;= <span class="hljs-number">5&#x27;b0</span>;<br>     ID_BD &lt;= <span class="hljs-number">1&#x27;b0</span>;<br> <span class="hljs-keyword">end</span><br> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>     ID_PC &lt;= IF_PC;<br>     ID_instr &lt;= IF_instr;<br>     ID_ExcCode &lt;= IF_ExcCode;<br>     ID_BD &lt;= IF_BD;<br> <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure></blockquote><h3 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h3><blockquote><p>Instruction Decode阶段</p></blockquote><h4 id="顶层-1"><a href="#顶层-1" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td><strong>IF/ID输入</strong></td><td></td><td></td><td></td></tr><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF区的PC,用于正常的地址+4操作</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td>ID区的PC</td></tr><tr><td>ID_instr</td><td>in</td><td>[31:0]</td><td>ID区的指令</td></tr><tr><td>ID_RD1_forward</td><td>in</td><td>[31:0]</td><td>转发的Data1</td></tr><tr><td>ID_RD2_forward</td><td>in</td><td>[31:0]</td><td>转发的Data2</td></tr><tr><td>ID_ExcCode</td><td>in</td><td>[4:0]</td><td>ID区的异常码</td></tr><tr><td><strong>WB输入</strong></td><td></td><td></td><td></td></tr><tr><td>WB_WD</td><td>in</td><td>[31:0]</td><td>写入数据,来自于WB阶段</td></tr><tr><td>WB_A3</td><td>in</td><td>[31:0]</td><td>写入寄存器地址,来自于WB阶段</td></tr><tr><td>WB_PC</td><td>in</td><td>[31:0]</td><td>写入数据对应PC地址,传递给$display语句,作为显示,来自于WB阶段</td></tr><tr><td><strong>ID输出</strong></td><td></td><td></td><td></td></tr><tr><td>ID_RD1</td><td>out</td><td>[31:0]</td><td>ID输出rs寄存器读出值</td></tr><tr><td>ID_RD2</td><td>out</td><td>[31:0]</td><td>ID输出rt寄存器读出值</td></tr><tr><td>ID_IMM32</td><td>out</td><td>[31:0]</td><td>ID输出经过位扩展的立即数</td></tr><tr><td>ID_A3</td><td>out</td><td>[4:0]</td><td>ID阶段的A3,向后传递用</td></tr><tr><td>ID_WD</td><td>out</td><td>[31:0]</td><td>ID阶段的写入数据,向后传递</td></tr><tr><td>NPC</td><td>out</td><td>[31:0]</td><td>ID阶段(内部NPC模块)计算的下一个地址</td></tr><tr><td>ID_A1_USE</td><td>out</td><td>[1:0]</td><td>ID阶段rs寄存器的$T_{USE}$</td></tr><tr><td>ID_A2_USE</td><td>out</td><td>[1:0]</td><td>ID阶段rt寄存器的$T_{USE}$</td></tr><tr><td>ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr><tr><td>ID_EX_ExcCode</td><td>out</td><td>[4:0]</td><td>ID区处理后的异常码</td></tr><tr><td>ID_OP</td><td>out</td><td></td><td>ID区指令的分支类型</td></tr><tr><td>IF_ID_FLUSH</td><td>out</td><td></td><td>对IF_ID间流水寄存器的冲洗信号</td></tr></tbody></table></div><h4 id="EXT部件"><a href="#EXT部件" class="headerlink" title="EXT部件"></a>EXT部件</h4><blockquote><p>立即数扩展</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>imm16</td><td>in</td><td>[15:0]</td><td>输入的16位立即数</td></tr><tr><td>ExtControl</td><td>in</td><td></td><td>决定零扩展还是符号扩展</td></tr><tr><td>imm32</td><td>out</td><td>[31:0]</td><td>输出的为扩展后的32位立即数</td></tr></tbody></table></div><h4 id="CMP部件"><a href="#CMP部件" class="headerlink" title="CMP部件"></a>CMP部件</h4><blockquote><p>判断两个输入(从寄存器取出来的两个值)是否相等,输出zero,用于处理beq信号通路</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>A</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data1(RD1_forward)</td></tr><tr><td>B</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data2(RD2_forward)</td></tr><tr><td>CMPControl</td><td>in</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr><td>zero</td><td>out</td><td></td><td>若相等则输出1,否则输出0</td></tr></tbody></table></div><h4 id="CMPControl信号表"><a href="#CMPControl信号表" class="headerlink" title="CMPControl信号表"></a>CMPControl信号表</h4><div class="table-container"><table><thead><tr><th>指令</th><th>CMPControl</th></tr></thead><tbody><tr><td>cmpBeq</td><td>4’b0000</td></tr><tr><td>cmpBgez</td><td>4’b0001</td></tr><tr><td>cmpBgtz</td><td>4’b0010</td></tr><tr><td>cmpBlez</td><td>4’b0011</td></tr><tr><td>cmpBltz</td><td>4’b0100</td></tr><tr><td>cmpBne</td><td>4’b0101</td></tr><tr><td>bnumeq</td><td>4’b1000</td></tr></tbody></table></div><h4 id="NPC部件"><a href="#NPC部件" class="headerlink" title="NPC部件"></a>NPC部件</h4><blockquote><p>计算下一个PC地址</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF输出的PC</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_imm26</td><td>in</td><td>[25:0]</td><td><code>Jal</code>指令中[25:0]位,指定跳转的绝对地址</td></tr><tr><td>imm32</td><td>in</td><td>[31:0]</td><td>经过EXT扩展的立即数</td></tr><tr><td>Jr_Reg_Data</td><td>in</td><td>[31:0]</td><td>Jr指定的寄存器的值</td></tr><tr><td>EPC_out</td><td>in</td><td>[31:0]</td><td>CP0传递的跳转指令</td></tr><tr><td>Branch</td><td>in</td><td></td><td>Branch信号(beq激活)</td></tr><tr><td>Jal</td><td>in</td><td></td><td>Jal信号(jal激活)</td></tr><tr><td>Jr</td><td>in</td><td></td><td>Jr信号(jr激活)</td></tr><tr><td>Eret</td><td>in</td><td></td><td>Eret信号(eret激活)</td></tr><tr><td>NPC</td><td>out</td><td>[31:0]</td><td>下一个PC地址</td></tr></tbody></table></div><h5 id="跳转地址表"><a href="#跳转地址表" class="headerlink" title="跳转地址表"></a>跳转地址表</h5><div class="table-container"><table><thead><tr><th>指令</th><th>跳转地址</th></tr></thead><tbody><tr><td>Branch类(beq,bne)</td><td>$ID_PC+4+signed(imm32 &lt;&lt; 2)$</td></tr><tr><td>Jal</td><td>$(ID_PC+4)_{31:28}</td><td></td><td>ID_imm26</td><td></td><td>2’b0$</td></tr><tr><td>Jr</td><td>$Jr_Reg_Data$</td></tr><tr><td>Eret</td><td>$EPC_out$</td></tr><tr><td>default</td><td>$IF_PC+4$</td></tr></tbody></table></div><h4 id="Control部件-共用"><a href="#Control部件-共用" class="headerlink" title="Control部件(共用)"></a>Control部件(共用)</h4><blockquote><p>控制信号生成部件,这里我们采用的是分布式译码,这里展示的共用Control部件在ID阶段被使用的端口</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:left">instr</td><td>in</td><td>[31:0]</td><td>输入的指令</td></tr><tr><td style="text-align:left">zero</td><td>in</td><td></td><td>ID_RD1_forward与ID_RD2_forward是否相等</td></tr><tr><td style="text-align:left">Branch</td><td>out</td><td></td><td>Branch信号(beq激活)</td></tr><tr><td style="text-align:left">Jal</td><td>out</td><td></td><td>Jal信号(jal激活)</td></tr><tr><td style="text-align:left">Jr</td><td>out</td><td></td><td>Jr信号(jr激活)</td></tr><tr><td style="text-align:left">Eret</td><td>out</td><td></td><td>Eret信号(eret激活)</td></tr><tr><td style="text-align:left">ExtControl</td><td>out</td><td></td><td>控制ext部件的信号</td></tr><tr><td style="text-align:left">Sel_ID_WD</td><td>out</td><td></td><td>与jal相关,若执行jal指令则为1,该信号为1时将Write Data(写入寄存器)指定为ID_PC+8</td></tr><tr><td style="text-align:left">ID_A3</td><td>out</td><td>[4:0]</td><td>解码阶段输出的写入寄存器地址</td></tr><tr><td style="text-align:left">ID_A1_USE</td><td>out</td><td>[1:0]</td><td>rs的$T_{USE}$</td></tr><tr><td style="text-align:left">ID_A2_USE</td><td>out</td><td>[1:0]</td><td>rt的$T_{USE}$</td></tr><tr><td style="text-align:left">CMPControl</td><td>out</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr><td style="text-align:left">ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr><tr><td style="text-align:left">ID_OP</td><td>out</td><td>[3:0]</td><td>ID区当前指令分支类型</td></tr><tr><td style="text-align:left">ri</td><td>out</td><td></td><td>未知指令异常信号</td></tr><tr><td style="text-align:left">SYSCALL</td><td>out</td><td></td><td>系统调用指令信号</td></tr></tbody></table></div><h4 id="ID控制信号表"><a href="#ID控制信号表" class="headerlink" title="ID控制信号表"></a>ID控制信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>ExtControl</th><th>ID_A3</th></tr></thead><tbody><tr><td>ori</td><td>1(立即数零扩展)</td><td>rt</td></tr><tr><td>add</td><td>\</td><td>rd</td></tr><tr><td>sub</td><td>\</td><td>rd</td></tr><tr><td>lw</td><td>0(立即数符号扩展)</td><td>rt</td></tr><tr><td>sw</td><td>0(立即数符号扩展)</td><td>$0</td></tr><tr><td>beq</td><td>0(立即数符号扩展)</td><td>$0</td></tr><tr><td>lui</td><td>0(立即数符号扩展)(其实随意)</td><td>rt</td></tr><tr><td>jal</td><td>\</td><td>$31</td></tr><tr><td>jr</td><td>\</td><td>\</td></tr><tr><td>swc</td><td>\</td><td>rd</td></tr><tr><td>bonall</td><td>0(立即数符号扩展)</td><td>31</td></tr><tr><td>lh</td><td>0</td><td>rt</td></tr><tr><td>sh</td><td>0</td><td>\</td></tr><tr><td>lb</td><td>0</td><td>rt</td></tr><tr><td>sb</td><td>0</td><td>\</td></tr><tr><td>and</td><td>\</td><td>rd</td></tr><tr><td>or</td><td>\</td><td>rd</td></tr><tr><td>slt</td><td>\</td><td>rd</td></tr><tr><td>sltu</td><td>\</td><td>rd</td></tr><tr><td>addi</td><td>0</td><td>rt</td></tr><tr><td>andi</td><td>0</td><td>rt</td></tr><tr><td>mult</td><td>\</td><td>$0</td></tr><tr><td>multu</td><td>\</td><td>$0</td></tr><tr><td>div</td><td>\</td><td>$0</td></tr><tr><td>divu</td><td>\</td><td>$0</td></tr><tr><td>mflo</td><td>\</td><td>rd</td></tr><tr><td>mfhi</td><td>\</td><td>rd</td></tr><tr><td>mtlo</td><td>\</td><td>$0</td></tr><tr><td>mthi</td><td>\</td><td>$0</td></tr><tr><td>mfc0</td><td>\</td><td>rt</td></tr></tbody></table></div><p>其余信号:</p><ul><li><p>$beq/bne\rightarrow Branch$</p></li><li><p>$jal\rightarrow Sel_ID_WD$</p></li><li><p>$jal\rightarrow Jal$</p></li><li><p>$jr\rightarrow Jr$</p></li><li><p>$eret\rightarrow Eret$</p></li><li><p>$mult/multu/div/divu/mfhi/mflo/mthi/mtlo(8)\rightarrow ID_MD$</p></li><li><p>$branch/jal/jr\rightarrow ID_OP=JUMP,else\rightarrow NOJUMP$</p></li><li><p>$syscall\rightarrow SYSCALL$</p></li></ul><h4 id="T-USE-表"><a href="#T-USE-表" class="headerlink" title="$T_{USE}$表"></a>$T_{USE}$表</h4><div class="table-container"><table><thead><tr><th></th><th>ID_A1_USE</th><th>ID_A2_USE</th></tr></thead><tbody><tr><td>cal_r</td><td>1</td><td>1</td></tr><tr><td>cal_i</td><td>1</td><td>3</td></tr><tr><td>load</td><td>1</td><td>3</td></tr><tr><td>store</td><td>1</td><td>2</td></tr><tr><td>cal_md</td><td>1</td><td>1</td></tr><tr><td>load_md</td><td>3</td><td>3</td></tr><tr><td>store_md</td><td>1</td><td>3</td></tr><tr><td>branch</td><td>0</td><td>0</td></tr><tr><td>cal_jal</td><td>3</td><td>3</td></tr><tr><td>cal_jr</td><td>0</td><td>3</td></tr><tr><td><strong>P7新增指令(未分类)</strong></td><td></td><td></td></tr><tr><td>eret</td><td>3</td><td>3</td></tr><tr><td>mfc0</td><td>3</td><td>3</td></tr><tr><td>mtc0</td><td>3</td><td>2</td></tr><tr><td>syscall</td><td>3</td><td>3</td></tr></tbody></table></div><h4 id="GRF部件"><a href="#GRF部件" class="headerlink" title="GRF部件"></a>GRF部件</h4><blockquote><p>32个32bit寄存器组成的寄存器堆</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>A1</td><td>in</td><td>[4:0]</td><td>A1读出寄存器地址</td></tr><tr><td>A2</td><td>in</td><td>[4:0]</td><td>A2读出寄存器地址</td></tr><tr><td>A3</td><td>in</td><td>[4:0]</td><td>A3写入寄存器地址</td></tr><tr><td>WD</td><td>in</td><td>[31:0]</td><td>写入数据</td></tr><tr><td>PC</td><td>in</td><td>[31:0]</td><td>当前PC($display用)</td></tr><tr><td>RD1</td><td>out</td><td>[31:0]</td><td>A1寄存器读出值</td></tr><tr><td>RD2</td><td>out</td><td>[31:0]</td><td>A2寄存器读出值</td></tr></tbody></table></div><h3 id="ID-EX"><a href="#ID-EX" class="headerlink" title="ID_EX"></a>ID_EX</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>flush</td><td>in</td><td></td><td>冲洗信号,和reset作用相同</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD1</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD2</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_imm32</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>ID_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_BD</td><td>in</td><td></td><td>ID区branch delay信号</td></tr><tr><td>ID_EX_ExcCode</td><td>in</td><td>[4:0]</td><td>ID区异常码</td></tr><tr><td>EX_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD1</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD2</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_imm32</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>EX_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_BD</td><td>out</td><td></td><td>EX区接收branch delay信号</td></tr><tr><td>EX_ExcCode</td><td>out</td><td>[4:0]</td><td>EX区接收异常码</td></tr></tbody></table></div><h3 id="EX"><a href="#EX" class="headerlink" title="EX"></a>EX</h3><h4 id="顶层-2"><a href="#顶层-2" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段的指令</td></tr><tr><td>EX_imm32</td><td>in</td><td>[31:0]</td><td>32位扩展的立即数</td></tr><tr><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX阶段接收的写入寄存器堆的数据</td></tr><tr><td>EX_RD1_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A1值</td></tr><tr><td>EX_RD2_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A2值</td></tr><tr><td>EX_ExcCode</td><td>in</td><td>[4:0]</td><td>EX接收区异常码</td></tr><tr><td>EX_MEM_RES</td><td>out</td><td>[31:0]</td><td>传递ALU计算结果</td></tr><tr><td>EX_MEM_WD</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Write Data</td></tr><tr><td>EX_MEM_RD2</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Read Data2</td></tr><tr><td>EX_NEW</td><td>out</td><td>[1:0]</td><td>EX阶段的$T_{NEW}$</td></tr><tr><td>MULT_DIV_BUSY</td><td>out</td><td></td><td></td></tr><tr><td>MULT_DIV_START</td><td>out</td><td></td><td></td></tr><tr><td>EX_MEM_ExcCode</td><td>out</td><td>[4:0]</td></tr></tbody></table></div><h4 id="MULT-DIV部件"><a href="#MULT-DIV部件" class="headerlink" title="MULT_DIV部件"></a>MULT_DIV部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重制信号</td></tr><tr><td>A</td><td>in</td><td>[31:0]</td><td>计算数A</td></tr><tr><td>B</td><td>in</td><td>[31:0]</td><td>计算数B</td></tr><tr><td>start</td><td>in</td><td></td><td>有效一个时钟周期,启动信号</td></tr><tr><td>MULT_DIV_OP</td><td>in</td><td>[2:0]</td><td>乘除模块计算方式</td></tr><tr><td>MFHI</td><td>in</td><td></td><td>mfhi信号</td></tr><tr><td>MFLO</td><td>in</td><td></td><td>mflo信号</td></tr><tr><td>busy</td><td>out</td><td></td><td>输出延迟信号</td></tr><tr><td>HI</td><td>out</td><td>[31:0]</td><td>$hi值</td></tr><tr><td>LO</td><td>out</td><td>[31:0]</td><td>$lo值</td></tr></tbody></table></div><h4 id="乘除槽相关信号表"><a href="#乘除槽相关信号表" class="headerlink" title="乘除槽相关信号表"></a>乘除槽相关信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>MULT_DIV_OP</th><th>MULT_DIV_START</th></tr></thead><tbody><tr><td>mult</td><td>`mult</td><td>1</td></tr><tr><td>multu</td><td>`multu</td><td>1</td></tr><tr><td>div</td><td>`div</td><td>1</td></tr><tr><td>divu</td><td>`divu</td><td>1</td></tr></tbody></table></div><h4 id="ALU部件"><a href="#ALU部件" class="headerlink" title="ALU部件"></a>ALU部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>SrcA</td><td>in</td><td>[31:0]</td><td>操作数A</td></tr><tr><td>SrcB</td><td>in</td><td>[31:0]</td><td>操作数B</td></tr><tr><td>ALUOp</td><td>in</td><td>[3:0]</td><td>计算方式</td></tr><tr><td>ALURes</td><td>out</td><td>[31:0]</td><td>ALU计算结果</td></tr><tr><td>overflow</td><td>out</td><td></td><td>是否溢出</td></tr></tbody></table></div><h4 id="Control部件-共用-1"><a href="#Control部件-共用-1" class="headerlink" title="Control部件(共用)"></a>Control部件(<em>共用</em>)</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ALUOp</td><td>out</td><td>[3:0]</td><td>选择ALU操作方式</td></tr><tr><td><del>ALU_A_Sel</del></td><td>out</td><td></td><td></td></tr><tr><td>ALU_B_Sel</td><td>out</td><td></td><td>选择32位立即数或者寄存器rt的值</td></tr><tr><td>WD_Sel</td><td>out</td><td></td><td>选择Write Data来源(1:ID阶段的PC+8,0:ALURes)</td></tr><tr><td>EX_NEW</td><td>out</td><td></td><td>当前EX阶段$T_{USE}$</td></tr><tr><td>MULT_DIV_OP</td><td>out</td><td></td><td>乘除模块计算方式</td></tr><tr><td>MULT_DIV _START</td><td>out</td><td></td><td>乘除模块开始信号</td></tr><tr><td>MTHI</td><td>out</td><td></td><td>mthi信号,下同理</td></tr><tr><td>MTLO</td><td>out</td><td></td><td></td></tr><tr><td>MFHI</td><td>out</td><td></td><td></td></tr><tr><td>MFLO</td><td>out</td><td></td><td></td></tr><tr><td>MTC0</td><td>out</td><td></td><td></td></tr><tr><td>LOAD</td><td>out</td><td></td><td></td></tr><tr><td>STORE</td><td>out</td><td></td></tr></tbody></table></div><h4 id="EX控制信号表"><a href="#EX控制信号表" class="headerlink" title="EX控制信号表"></a>EX控制信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>ALUOp</th><th>ALU_B_Sel</th><th>WD_Sel</th></tr></thead><tbody><tr><td>ori</td><td>`aluOr</td><td>1(选择立即数)</td><td>0(Write Data选择aluRes)</td></tr><tr><td>add</td><td>`aluAdd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>sub</td><td>`aluSub</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>beq</td><td>\</td><td>\</td><td>\</td></tr><tr><td>lw</td><td>`aluAdd</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>sw</td><td>`aluAdd</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>lh</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>sh</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>lb</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>sb</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>lui</td><td>`aluLui</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>jal</td><td>\</td><td>\</td><td>1(Write Data选择ID传递值)</td></tr><tr><td>jr</td><td>\</td><td>\</td><td>\</td></tr><tr><td>and</td><td>`aluAnd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>or</td><td>`aluOr</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>slt</td><td>`aluSlt</td><td>0</td><td>0</td></tr><tr><td>sltu</td><td>`aluSltu</td><td>0</td><td>0</td></tr><tr><td>addi</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>andi</td><td>`aluAnd</td><td>1</td><td>0</td></tr><tr><td>mult</td><td>\</td><td>\</td><td>0</td></tr><tr><td>mflo</td><td>\</td><td>\</td><td>\</td></tr><tr><td>mfhi</td><td>\</td><td>\</td><td>\</td></tr></tbody></table></div><h4 id="EX-T-NEW-表"><a href="#EX-T-NEW-表" class="headerlink" title="EX$T_{NEW}$表"></a>EX$T_{NEW}$表</h4><div class="table-container"><table><thead><tr><th></th><th>EX_NEW</th></tr></thead><tbody><tr><td>cal_r</td><td>1</td></tr><tr><td>cal_i</td><td>1</td></tr><tr><td>load</td><td>2</td></tr><tr><td>store</td><td>0</td></tr><tr><td>cal_md</td><td>0</td></tr><tr><td>load_md</td><td>1</td></tr><tr><td>store_md</td><td>0</td></tr><tr><td>cal_jal</td><td>0</td></tr><tr><td>cal_jr</td><td>0</td></tr><tr><td>branch</td><td>0</td></tr><tr><td><strong>P7新增指令(未分类)</strong></td><td></td></tr><tr><td>mfc0</td><td>2</td></tr><tr><td>mtc0</td><td>0</td></tr><tr><td>eret</td><td>0</td></tr><tr><td>syscall</td><td>0</td></tr></tbody></table></div><h3 id="EX-MEM"><a href="#EX-MEM" class="headerlink" title="EX_MEM"></a>EX_MEM</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>flush</td><td>in</td><td></td><td></td></tr><tr><td>req</td><td>in</td><td></td><td></td></tr><tr><td>EX_PC</td><td>in</td><td>[31:0]</td><td>EX阶段PC地址</td></tr><tr><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段指令</td></tr><tr><td>EX_A3</td><td>out</td><td>[4:0]</td><td>EX阶段传递的A3</td></tr><tr><td>EX_WD</td><td>out</td><td>[31:0]</td><td>EX阶段Write Data</td></tr><tr><td>EX_RES</td><td>out</td><td>[31:0]</td><td>EX阶段ALURes</td></tr><tr><td>EX_RD2</td><td>out</td><td>[31:0]</td><td>EX阶段Read Data2</td></tr><tr><td>EX_BD</td><td></td><td></td><td></td></tr><tr><td>MEM_PC</td><td>out</td><td>[31:0]</td><td>MEM阶段PC地址</td></tr><tr><td>MEM_instr</td><td>out</td><td>[31:0]</td><td>MEM阶段指令</td></tr><tr><td>MEM_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>MEM_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RES</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_BD</td><td>out</td><td></td><td></td></tr><tr><td>MEM_ExcCode</td><td>out</td><td>[4:0]</td></tr></tbody></table></div><h3 id="MEM"><a href="#MEM" class="headerlink" title="MEM"></a>MEM</h3><h4 id="顶层-3"><a href="#顶层-3" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>req</td><td>in</td><td></td><td></td></tr><tr><td>MEM_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RES</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2_forward</td><td>in</td><td>[31:0]</td><td>WB转发的Read Data2</td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递的A3寄存器地址</td></tr><tr><td>RD</td><td>in</td><td>[31:0]</td><td>从Memory中读出的数据</td></tr><tr><td>MEM_ExcCode</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>CP0_out</td><td>in</td><td>[31:0]</td><td>CP0读出数据</td></tr><tr><td>MEM_WB_A3</td><td>out</td><td>[4:0]</td><td>MEM区传递接收写入数据的A3寄存器,传递至WB区</td></tr><tr><td>MEM_WB_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_A2_NEW</td><td>out</td><td>[1:0]</td><td>MEM$T_{NEW}$</td></tr><tr><td>MEM_BYTE_EN</td><td>out</td><td>[3:0]</td><td>写入MEM数据的按字节使能信号</td></tr><tr><td>MEM_WRITE_DATA</td><td>out</td><td>[31:0]</td><td>写入MEM,按字节重新排序的数据</td></tr><tr><td>MEM_DATA_ADDR</td><td>out</td><td>[31:0]</td><td>写入或读出的Memory地址</td></tr><tr><td>MEM_INST_ADDR</td><td>out</td><td>[31:0]</td><td>当load/store指令对应的PC地址</td></tr><tr><td>MEM_WB_ExcCode</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>CP0_enable</td><td>out</td><td></td><td>CP0写入数据信号</td></tr><tr><td>mfc0_rd</td><td>out</td><td>[4:0]</td><td>mfc0/mtc0指定的寄存器rd</td></tr><tr><td>EXL_clr</td><td>out</td><td></td><td>EXL清空信号,由eret指令发出</td></tr></tbody></table></div><h4 id="MEMControl部件-共用"><a href="#MEMControl部件-共用" class="headerlink" title="MEMControl部件(共用)"></a>MEMControl部件(共用)</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>instr</td><td>in</td><td></td><td></td></tr><tr><td>MEM_WE</td><td>out</td><td></td><td>选择是否写入Memory</td></tr><tr><td>MEM_Sel</td><td>out</td><td></td><td>选择是否将Memory读出值向后传递(1:yes)</td></tr><tr><td>MEM_A2_NEW</td><td>out</td><td></td><td>MEM区$T_{NEW}$</td></tr><tr><td>MEM_PART</td><td>out</td><td>[1:0]</td><td>选择存入/读取Word,Half或者Byte</td></tr><tr><td>MEM_EXT_Control</td><td>out</td><td>[2:0]</td><td>MEM_EXT部件控制信号</td></tr><tr><td>CP0_Sel</td><td>out</td><td></td><td>读出数据来源选择CP0(由mfc0发出)</td></tr><tr><td>mfc0_rd</td><td>out</td><td>[4:0]</td><td>mfc0/mtc0指定,输出指令对应的rd</td></tr><tr><td>EXL_clr</td><td>out</td><td></td><td>EXL清空信号,由eret指令发出</td></tr></tbody></table></div><h4 id="MEM信号及-T-NEW-表"><a href="#MEM信号及-T-NEW-表" class="headerlink" title="MEM信号及$T_{NEW}$表"></a>MEM信号及$T_{NEW}$表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>MEM_WE</th><th>MEM_Sel</th><th>MEM_A2_NEW</th><th>MEM_PART</th><th>MEM_EXT_Control</th></tr></thead><tbody><tr><td>sw</td><td>1</td><td>0</td><td>0</td><td><code>memWord</code></td><td>3’bz</td></tr><tr><td>sh</td><td>1</td><td>0</td><td>0</td><td><code>memHalf</code></td><td>3’bz</td></tr><tr><td>sb</td><td>1</td><td>0</td><td>0</td><td><code>memByte</code></td><td>3’bz</td></tr><tr><td>lw</td><td>0</td><td>1</td><td>1</td><td>`memWord</td><td>`nonExt</td><td></td></tr><tr><td>lh</td><td>0</td><td>1</td><td>1</td><td>`memHalf</td><td>`signedHalfExt</td><td></td></tr><tr><td>lb</td><td>0</td><td>1</td><td>1</td><td>`memByte</td><td>`signedByteExt</td><td></td></tr><tr><td>else</td><td>0</td><td>0</td><td>0</td><td><code>none</code></td><td>3’bz</td></tr></tbody></table></div><h3 id="MEM-WB"><a href="#MEM-WB" class="headerlink" title="MEM_WB"></a>MEM_WB</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>req</td><td>in</td><td></td><td></td></tr><tr><td>MEM_PC</td><td>in</td><td>[31;0]</td><td></td></tr><tr><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>WB_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>WB_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>WB_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>WB_WD</td><td>out</td><td>[31:0]</td></tr></tbody></table></div><h3 id="HAZARD-CTRL"><a href="#HAZARD-CTRL" class="headerlink" title="HAZARD_CTRL"></a>HAZARD_CTRL</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td><strong>ID阶段</strong></td><td></td><td></td><td></td></tr><tr><td>ID_A1</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A1寄存器</td></tr><tr><td>ID_A2</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A2寄存器</td></tr><tr><td>ID_RD1</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A1对应值</td></tr><tr><td>ID_RD2</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A2对应值</td></tr><tr><td>ID_A1_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>ID_A2_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>ID_MD</td><td>in</td><td></td><td>ID区处理指令是否与乘除相关</td></tr><tr><td><strong>EX阶段</strong></td><td></td><td></td><td></td></tr><tr><td>EX_A1</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>EX_A2</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>EX_RD1</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr><td>EX_RD2</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr><td>EX_A1_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>EX_A2_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>EX_A3</td><td>in</td><td>[4:0]</td><td>EX传递的A3寄存器(rd)</td></tr><tr><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX传递的Write Data</td></tr><tr><td>MULT_DIV_BUSY</td><td>in</td><td></td><td>乘除模块忙碌信号</td></tr><tr><td>MULT_DIV_START</td><td>in</td><td></td><td>乘除模块开始信号</td></tr><tr><td><strong>MEM阶段</strong></td><td></td><td></td><td></td></tr><tr><td>MEM_A2</td><td>in</td><td>[4:0]</td><td>MEM正在使用的A2</td></tr><tr><td>MEM_RD2</td><td>in</td><td>[31:0]</td><td>MEM的Read Data2,由EX传递而来</td></tr><tr><td>MEM_A2_NEW</td><td>in</td><td>[1:0]</td><td>MEM的$T_{NEW}$</td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递A3</td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td>MEM传递的Write Data</td></tr><tr><td><strong>WB</strong></td><td></td><td></td><td></td></tr><tr><td>WB_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>WB_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td><strong>转发FORWARD</strong></td><td></td><td></td><td></td></tr><tr><td>ID_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td><strong>暂停信号STALL</strong></td><td></td><td></td><td></td></tr><tr><td>Enable_PC</td><td>out</td><td></td><td>PC使能信号</td></tr><tr><td>Enable_IF_ID</td><td>out</td><td></td><td>IF_ID流水寄存器使能信号</td></tr><tr><td>Enable_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器使能信号</td></tr><tr><td>Flush_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器刷新信号</td></tr><tr><td>Flush_EX_MEM</td><td>out</td><td></td><td>EX_MEM流水寄存器刷新信号</td></tr></tbody></table></div><h3 id="CPU"><a href="#CPU" class="headerlink" title="CPU"></a>CPU</h3><h4 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>同步复位信号</td></tr><tr><td>HW_Int</td><td>in</td><td>[5:0]</td><td>用于传递来自计时器和外部的中断信号</td></tr><tr><td><strong>F区</strong></td><td></td><td></td><td></td></tr><tr><td>i_inst_addr</td><td>out</td><td>[31:0]</td><td>需要进行取指操作的流水级 PC（一般为 F 级)</td></tr><tr><td>i_inst_rdata</td><td>in</td><td>[31:0]</td><td>i_inst_addr 对应的 32 位指令</td></tr><tr><td><strong>BRIDGE</strong></td><td></td><td></td><td></td></tr><tr><td>m_data_addr</td><td>out</td><td>[31:0]</td><td>BRIDGE待写入地址</td></tr><tr><td>m_data_rdata</td><td>in</td><td>[31:0]</td><td>CPU_addr 对应的 32 位数据</td></tr><tr><td>m_data_wdata</td><td>out</td><td>[31:0]</td><td>BRIDGE待写入数据</td></tr><tr><td>m_data_byteen</td><td>out</td><td>[3:0]</td><td>BRIDGE字节使能信号</td></tr><tr><td><strong>MEM区</strong></td><td></td><td></td><td></td></tr><tr><td>m_inst_addr</td><td>out</td><td>[31:0]</td><td>M 级 PC</td></tr><tr><td><strong>WB区</strong></td><td></td><td></td><td></td></tr><tr><td>w_grf_we</td><td>out</td><td></td><td>GRF 写使能信号</td></tr><tr><td>w_grf_addr</td><td>out</td><td>[31:0]</td><td>GRF 中待写入寄存器编号</td></tr><tr><td>w_grf_wdata</td><td>out</td><td>[31:0]</td><td>GRF 中待写入数据</td></tr><tr><td>w_inst_addr</td><td>out</td><td>[31:0]</td><td>W 级 PC</td></tr><tr><td>macroscopic_pc</td><td>out</td><td>[31:0]</td><td>宏观PC</td></tr></tbody></table></div><h3 id="BRIDGE"><a href="#BRIDGE" class="headerlink" title="BRIDGE"></a>BRIDGE</h3><h4 id="端口-1"><a href="#端口-1" class="headerlink" title="端口"></a>端口</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td><strong>CPU内部传出数据</strong></td><td></td><td></td><td></td></tr><tr><td>PR_addr</td><td>in</td><td>[31:0]</td><td>寄存器内部EX_MEM流水寄存器输出的store地址</td></tr><tr><td>PR_WD</td><td>in</td><td>[31:0]</td><td>寄存器内部EX_MEM流水寄存器输出的store数据</td></tr><tr><td>PR_byteen</td><td>in</td><td>[31:0]</td><td>寄存器字节使能信号</td></tr><tr><td><strong>根据DEV_addr<br>从各部件获取数据</strong></td><td></td><td></td><td></td></tr><tr><td>DEV_addr</td><td>out</td><td>[31:0]</td><td>将PR_addr[X:2]直接输出即可,X由N个设备中地址空间需求最大者决定</td></tr><tr><td>DM_RD</td><td>in</td><td>[31:0]</td><td>MEM区DM的读出数据</td></tr><tr><td>TC0_RD</td><td>in</td><td>[31:0]</td><td>计数器0的读出数据</td></tr><tr><td>TC1_RD</td><td>in</td><td>[31:0]</td><td>计数器1的读出数据</td></tr><tr><td><strong>对DEV_addr写入<br>(字节)数据使能信号</strong></td><td></td><td></td><td></td></tr><tr><td>DM_byteen</td><td>out</td><td>[3:0]</td><td>字节使能信号</td></tr><tr><td>TC0_enable</td><td>out</td><td></td><td>TC0写入使能信号</td></tr><tr><td>TC1_enable</td><td>out</td><td></td><td>TC1写入使能信号</td></tr><tr><td>INT_byteen</td><td>out</td><td>[31:0]</td><td>中断发生器字节使能信号</td></tr><tr><td><strong>load相关,将写入<br>寄存器的值传回CPU</strong></td><td></td><td></td><td></td></tr><tr><td>PR_RD</td><td>out</td><td>[31:0]</td><td>输出到WB阶段,写入GRF的数据</td></tr></tbody></table></div><h4 id="地址图"><a href="#地址图" class="headerlink" title="地址图"></a>地址图</h4><div class="table-container"><table><thead><tr><th>条目</th><th>地址或地址范围</th><th>备注</th></tr></thead><tbody><tr><td>数据存储器</td><td>0x0000_0000∼0x0000_2FFF</td><td></td></tr><tr><td>指令存储器</td><td>0x0000_3000∼0x0000_6FFF</td><td></td></tr><tr><td>PC 初始值</td><td>0x0000_30000x0000_3000</td><td></td></tr><tr><td>异常处理程序入口地址</td><td>0x0000_41800x0000_4180</td><td></td></tr><tr><td>计时器 0 寄存器地址</td><td>0x0000_7F00∼0x0000_7F0B</td><td>计时器 0 的 3 个寄存器</td></tr><tr><td>计时器 1 寄存器地址</td><td>0x0000_7F10∼0x0000_7F1B</td><td>计时器 1 的 3 个寄存器</td></tr><tr><td>中断发生器响应地址</td><td>0x0000_7F20∼0x0000_7F23</td></tr></tbody></table></div><h4 id="地址匹配方式"><a href="#地址匹配方式" class="headerlink" title="地址匹配方式"></a>地址匹配方式</h4><ul><li>设备基地址:分为<strong>高位</strong>和<strong>低位</strong><ul><li>基地址低位:位数由设备占用空间大小决定,也就是偏移地址的位数</li><li>基地址高位:<code>Bridge</code>用于译码选择设备</li></ul></li></ul><h3 id="CP0"><a href="#CP0" class="headerlink" title="CP0"></a>CP0</h3><h4 id="寄存器"><a href="#寄存器" class="headerlink" title="寄存器"></a>寄存器</h4><div class="table-container"><table><thead><tr><th>寄存器</th><th>编号</th><th>功能</th><th></th></tr></thead><tbody><tr><td>SR</td><td>12</td><td>配置异常的功能。</td><td></td></tr><tr><td>Cause</td><td>13</td><td>记录异常发生的原因和情况。</td><td></td></tr><tr><td>EPC</td><td>14</td><td>记录异常处理结束后需要返回的 PC。</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>寄存器</th><th>功能域</th><th>位域</th><th>解释</th></tr></thead><tbody><tr><td>SR（State Register）</td><td>IM（Interrupt Mask）</td><td>15:10</td><td>分别对应六个外部中断，相应位置 1 表示允许中断，置 0 表示禁止中断。这是一个被动的功能，只能通过 <code>mtc0</code> 这个指令修改，通过修改这个功能域，我们可以屏蔽一些中断。</td></tr><tr><td>SR（State Register）</td><td>EXL（Exception Level）</td><td>1</td><td>任何异常发生时置位，这会强制进入核心态（也就是进入异常处理程序）并禁止中断。</td></tr><tr><td>SR（State Register）</td><td>IE（Interrupt Enable）</td><td>0</td><td>全局中断使能，该位置 1 表示允许中断，置 0 表示禁止中断。</td></tr><tr><td>Cause</td><td>BD（Branch Delay）</td><td>31</td><td>当该位置 1 的时候，EPC 指向当前指令的前一条指令（一定为跳转），否则指向当前指令。</td></tr><tr><td>Cause</td><td>IP（Interrupt Pending）</td><td>15:10</td><td>为 6 位待决的中断位，分别对应 6 个外部中断，相应位置 1 表示有中断，置 0 表示无中断，将会每个周期被修改一次，修改的内容来自计时器和外部中断。</td></tr><tr><td>Cause</td><td>ExcCode</td><td>6:2</td><td>异常编码，记录当前发生的是什么异常。</td></tr><tr><td>EPC</td><td>-</td><td>-</td><td>记录异常处理结束后需要返回的 PC。</td></tr></tbody></table></div><h4 id="模块接口"><a href="#模块接口" class="headerlink" title="模块接口"></a>模块接口</h4><div class="table-container"><table><thead><tr><th>端口</th><th>方向</th><th>位数</th><th>解释</th></tr></thead><tbody><tr><td>clk</td><td>IN</td><td>1</td><td>时钟信号。</td></tr><tr><td>reset</td><td>IN</td><td>1</td><td>复位信号。</td></tr><tr><td>enable</td><td>IN</td><td>1</td><td>写使能信号。</td></tr><tr><td>CP0_addr</td><td>IN</td><td>5</td><td>寄存器地址。执行MTC0/MFCO指令时产生</td></tr><tr><td>CP0_in</td><td>IN</td><td>32</td><td>CP0 写入数据。执行MTC0指令时产生</td></tr><tr><td>CP0_out</td><td>OUT</td><td>32</td><td>CP0 读出数据。执行MFC0指令时产生，输出数据至 GPR</td></tr><tr><td>VPC</td><td>IN</td><td>32</td><td>受害 PC。</td></tr><tr><td>BD_in</td><td>IN</td><td>1</td><td>是否是延迟槽指令。</td></tr><tr><td>ExcCode_in</td><td>IN</td><td>5</td><td>记录异常类型。</td></tr><tr><td>HW_int</td><td>IN</td><td>6</td><td>输入中断信号。</td></tr><tr><td>EXL_clr</td><td>IN</td><td>1</td><td>用来复位 EXL。</td></tr><tr><td>EPC_out</td><td>OUT</td><td>32</td><td>EPC 的值。</td></tr><tr><td>Req</td><td>OUT</td><td>1</td><td>进入处理程序请求。</td></tr><tr><td>macroscopic_pc</td><td>OUT</td><td>[31:0]</td><td>宏观PC</td></tr></tbody></table></div><h4 id="异常编码"><a href="#异常编码" class="headerlink" title="异常编码"></a>异常编码</h4><div class="table-container"><table><thead><tr><th>异常与中断码</th><th>助记符与名称</th><th>指令与指令类型</th><th>描述</th><th>检测模块</th></tr></thead><tbody><tr><td>0</td><td><code>Int</code> （外部中断）</td><td>所有指令</td><td>中断请求，来源于计时器与外部中断。</td><td>\</td></tr><tr><td>4</td><td><code>AdEL</code> （取指异常）</td><td>所有指令</td><td>PC 地址未字对齐。</td><td>IF</td></tr><tr><td></td><td></td><td></td><td>PC 地址超过 <code>0x3000 ~ 0x6ffc</code>。</td><td>IF</td></tr><tr><td></td><td><code>AdEL</code> （取数异常）</td><td><code>lw</code></td><td>取数地址未与 4 字节对齐。</td><td>MEM</td></tr><tr><td></td><td></td><td><code>lh</code></td><td>取数地址未与 2 字节对齐。</td><td>MEM</td></tr><tr><td></td><td></td><td><code>lh</code>, <code>lb</code></td><td>取 Timer 寄存器的值。</td><td>MEM</td></tr><tr><td></td><td></td><td>load 型指令</td><td>计算地址时加法溢出。</td><td>EX</td></tr><tr><td></td><td></td><td>load 型指令</td><td>取数地址超出 DM、Timer0、Timer1、中断发生器的范围。</td><td>MEM</td></tr><tr><td>5</td><td><code>AdES</code> （存数异常）</td><td><code>sw</code></td><td>存数地址未 4 字节对齐。</td><td>MEM</td></tr><tr><td></td><td></td><td><code>sh</code></td><td>存数地址未 2 字节对齐。</td><td>MEM</td></tr><tr><td></td><td></td><td><code>sh</code>, <code>sb</code></td><td>存 Timer 寄存器的值。</td><td>MEM</td></tr><tr><td></td><td></td><td>store 型指令</td><td>计算地址加法溢出。</td><td>EX</td></tr><tr><td></td><td></td><td>store 型指令</td><td>向计时器的 Count 寄存器存值。</td><td>MEM</td></tr><tr><td></td><td></td><td>store 型指令</td><td>存数地址超出 DM、Timer0、Timer1、中断发生器的范围。</td><td>MEM</td></tr><tr><td>8</td><td><code>Syscall</code> （系统调用）</td><td><code>syscall</code></td><td>系统调用。</td><td>ID</td></tr><tr><td>10</td><td><code>RI</code>（未知指令）</td><td>-</td><td>未知的指令码。</td><td>ID</td></tr><tr><td>12</td><td><code>Ov</code>（溢出异常）</td><td><code>add</code>, <code>addi</code>, <code>sub</code></td><td>算术溢出。</td><td>EX</td></tr></tbody></table></div><h3 id="阻塞矩阵"><a href="#阻塞矩阵" class="headerlink" title="阻塞矩阵"></a>阻塞矩阵</h3><div class="table-container"><table><thead><tr><th>IF/ID当前指令</th><th></th><th></th><th>ID/EX</th><th></th><th></th><th>EX/MEM</th><th></th><th></th><th>MEM/WB</th><th></th><th></th></tr></thead><tbody><tr><td>指令类型</td><td>源寄存器</td><td>$T_{use}$</td><td>cal_r<br>1/rd)<br></td><td>cal_i<br>(1/rt)<br></td><td>load<br>(2/rt)<br></td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(1/rt)</td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(0/rt)</td></tr><tr><td>beq</td><td>rs/rt</td><td>0</td><td>X</td><td>X</td><td>X</td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr><tr><td>cal_r</td><td>rs_rt</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>cal_i</td><td>rs</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>load</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>store</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>store</td><td>rt</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="暂停实现"><a href="#暂停实现" class="headerlink" title="暂停实现"></a>暂停实现</h2><blockquote><p>使用课程讲解的AT法,在流水线运行期间,ID区提供$T_{USE}$,EX,MEM区提供$T_{NEW}$,在冒险控制模块中采用以下判断逻辑:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL =  (ID_A1 == EX_A3 &amp;&amp; ID_A1_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)  <br>           || (ID_A2 == EX_A3 &amp;&amp; ID_A2_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)<br>           || (ID_A1 == MEM_A3 &amp;&amp; ID_A1_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>           || (ID_A2 == MEM_A3 &amp;&amp; ID_A2_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>STALL信号会控制三个行为:</p><ol><li>暂停IF区的PC模块</li><li>暂停IF_ID间流水寄存器</li><li>刷新ID_EX间流水寄存器(等同于reset)</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> Enable_PC = !STALL;<br><span class="hljs-keyword">assign</span> Enable_IF_ID = !STALL;<br><span class="hljs-keyword">assign</span> Flush_ID_EX = STALL;<br></code></pre></td></tr></table></figure></blockquote><h2 id="转发实现"><a href="#转发实现" class="headerlink" title="转发实现"></a>转发实现</h2><blockquote><p>转发有五条可能的数据通路:</p><ol><li>$EX_MEM\rightarrow ID$</li><li>$MEM_WB\rightarrow ID$</li><li>$EX_MEM\rightarrow EX$</li><li>$MEM_WB\rightarrow EX$</li><li>$MEM_WB\rightarrow MEM$</li></ol><p>这里以ID区的RD1转发数据逻辑为例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> ID_RD1_forward = (ID_A1 == <span class="hljs-number">5&#x27;b0</span>) ? <span class="hljs-number">0</span> :<br>                        (ID_A1 == MEM_A3) ? MEM_WD :<br>                        (ID_A1 == WB_A3) ? WB_WD :<br>                        ID_RD1;<br></code></pre></td></tr></table></figure></blockquote><h2 id="寄存器内部转发实现"><a href="#寄存器内部转发实现" class="headerlink" title="寄存器内部转发实现"></a>寄存器内部转发实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">// 考虑寄存器内部转发</span><br><span class="hljs-keyword">assign</span> RD1 = (A1 == A3 &amp;&amp; A1 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A1]; <br><span class="hljs-keyword">assign</span> RD2 = (A2 == A3 &amp;&amp; A2 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A2];<br></code></pre></td></tr></table></figure><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><ol><li><code>Python</code>自动生成测试mips文件</li><li><code>Mars</code>运行mips文件,生成正确结果和机器码</li><li><code>iverilog</code>运行CPU文件,生成测试结果</li><li><code>Python</code>比较两份答案</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>1、请查阅相关资料，说明鼠标和键盘的输入信号是如何被 CPU 知晓的？</p><blockquote><p>当键盘或者鼠标按下按键时,设备会发出一个中断信号,中断信号经过中断控制器传到CPU,CPU根据不同的中断号执行不同的中断响应程序,然后进行相应的IO操作</p></blockquote><p>2、请思考为什么我们的 CPU 处理中断异常必须是已经指定好的地址？如果你的 CPU 支持用户自定义入口地址，即处理中断异常的程序由用户提供，其还能提供我们所希望的功能吗？如果可以，请说明这样可能会出现什么问题？否则举例说明。（假设用户提供的中断处理程序合法）</p><blockquote><p>统一的CPU处理中断异常地址能够实现软件的兼容.</p><p>会影响CPU的处理逻辑</p></blockquote><p>3、为何与外设通信需要 Bridge？</p><blockquote><p>让CPU访问不同外设只需要通过对应的地址,这种操作遵循了”高内聚,低耦合”的原则</p></blockquote><p>4、请阅读官方提供的定时器源代码，阐述两种中断模式的异同，并分别针对每一种模式绘制状态移图。</p><blockquote><p>当计数器倒计数为0时,计数器停止计数,Ctrl寄存器的计数使能自动变为0,并且中断信号时钟保持有效,直到屏蔽中断或重新开始计数</p></blockquote><p><img src="image-20241121014635046.png" alt="中断模式0" style="zoom:50%;"></p><blockquote><p>计数器模式1:</p><p>当计数器倒计数为0,自动读取PRESENT寄存器的值,然后重新开始倒计数,这种模式下中断信号只会产生一个中断周期</p></blockquote><p><img src="image-20241121014944531.png" alt="中断模式1" style="zoom:50%;"></p><p>5、倘若中断信号流入的时候，在检测宏观 PC 的一级如果是一条空泡（你的 CPU 该级所有信息均为空）指令，此时会发生什么问题？在此例基础上请思考：在 P7 中，清空流水线产生的空泡指令应该保留原指令的哪些信息？</p><blockquote><p>宏观PC突然变为0x0000_0000</p><p>保留原指令的PC信息</p></blockquote><p>6、为什么 <code>jalr</code> 指令为什么不能写成 <code>jalr $31, $31</code>？</p><blockquote><p>若<code>jalr $31, $31</code>指令的延迟槽内发生异常或者需要响应中断,那么在处理异常结束后会再次执行<code>jalr $31, $31</code>指令,这时的$31值已经被修改,会跳转到不正确的PC地址</p></blockquote>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机变量及其分布</title>
    <link href="/2024/11/30/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/"/>
    <url>/2024/11/30/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E5%8F%8A%E5%85%B6%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h2 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h2><p>随机试验的样本空间S={e},X=X(e)是在样本空间S上的实值单值函数,则称X=X(e)为随机变量,简记为X</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><ul><li>离散型</li><li>连续型</li></ul><h2 id="分布函数"><a href="#分布函数" class="headerlink" title="分布函数"></a>分布函数</h2><p>$F(x)=P(X\leq x)$</p><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol><li>$0\leq F(x)\leq 1$</li><li>F(x)单调不减</li><li>F(x)右连续$F(x+0)=\underset{\Delta x\rightarrow 0+}{lim}F(x+\Delta x)=F(x)$</li></ol><h2 id="0-1分布"><a href="#0-1分布" class="headerlink" title="0-1分布"></a>0-1分布</h2><p>服从0-1分布的试验叫作贝努利试验</p><p>重复n次:<strong>n重伯努利试验</strong></p><h2 id="二项分布"><a href="#二项分布" class="headerlink" title="二项分布"></a>二项分布</h2><p>n重伯努利试验中,事件A在n次试验中发生的次数-X是一个离散型随机变量</p><p>$P(k)=P(X=k)=C{}^k_np^k(1-p)^{n-k}, k=0,1,…,n$</p><h3 id="性质-1"><a href="#性质-1" class="headerlink" title="性质"></a>性质</h3><ul><li>$C{}^k_np^k(1-p)^{n-k}\geq0$</li><li>$\Sigma{}^n_{k=0}C{}^k_np^k(1-p)^{n-k}=[p+(1-p)]^n=1$</li><li>0-1分布是n=1的二项分布</li></ul><h3 id="二项分布数学期望"><a href="#二项分布数学期望" class="headerlink" title="二项分布数学期望"></a>二项分布数学期望</h3><script type="math/tex; mode=display">\begin{aligned}&X\sim B(n,p)\\&E(X)=\sum^n_{k=0}kC^k_np^k(1-p)^{n-k}=np\sum^n_{k=1}C^{k-1}_{n-1}p^{k-1}(1-p)^{n-k}=np(p+q)^{n-1}=np\\\end{aligned}</script><h3 id="二项分布方差"><a href="#二项分布方差" class="headerlink" title="二项分布方差"></a>二项分布方差</h3><p><img src="image-20241130210914935.png" alt="image-20241130210914935"></p><h2 id="泊松定理"><a href="#泊松定理" class="headerlink" title="泊松定理"></a>泊松定理</h2><script type="math/tex; mode=display">\underset{n\rightarrow\infty}{lim}C{}^k_np^k(1-p)^{n-k}=e^{-\lambda}\frac{\lambda^k}{k!}(\lambda=np)</script><p>近似公式:$C{}^k_np^k(1-p)^{n-k}\approx e^{-\lambda}\frac{\lambda^k}{k!}(\lambda=np)$</p><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>$Y=g(X),则f_Y(y)=\begin{cases}f_X[h(y)]|h’(y)|,\alpha&lt;y&lt;\beta\\0,else\end{cases}$</p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>多维随机变量及其分布</title>
    <link href="/2024/11/30/%E5%A4%9A%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/"/>
    <url>/2024/11/30/%E5%A4%9A%E7%BB%B4%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="多维随机变量及其分布"><a href="#多维随机变量及其分布" class="headerlink" title="多维随机变量及其分布"></a>多维随机变量及其分布</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>$\Omega$为随机试验的样本空间,</p><script type="math/tex; mode=display">\forall \omega\in \Omega\rightarrow \exists(X(\omega),Y(\omega))\in R^2\\</script><p>(X,Y)为二位随机变量</p><h2 id="联合分布函数"><a href="#联合分布函数" class="headerlink" title="联合分布函数"></a>联合分布函数</h2><script type="math/tex; mode=display">F(x,y)=P(X\leq x,Y\leq y)\\</script><h2 id="边缘分布函数"><a href="#边缘分布函数" class="headerlink" title="边缘分布函数"></a>边缘分布函数</h2><script type="math/tex; mode=display">F_X(x)=P(X\leq x)</script><script type="math/tex; mode=display">F_Y(y)=P(Y\leq y)\\</script><h3 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h3><script type="math/tex; mode=display">f_X(x)=\frac{1}{\sqrt{2\pi}\sigma_1}e^{-\frac{(x-\mu_1)^2}{2\sigma_1^2} },-\infty<x<+\infty\\</script><h2 id="边缘密度函数"><a href="#边缘密度函数" class="headerlink" title="边缘密度函数"></a>边缘密度函数</h2><script type="math/tex; mode=display">f_X(x)=\int^{+\infty}_{-\infty}f(x,v)dv</script><script type="math/tex; mode=display">F_X(x)=F(x,+\infty)=\int^x_{-\infty}\int^{+\infty}_{-\infty}f(u,v)dvdu\\</script><h2 id="条件分布函数"><a href="#条件分布函数" class="headerlink" title="条件分布函数"></a>条件分布函数</h2><script type="math/tex; mode=display">\dfrac{\dfrac{\delta F(x,y)}{\delta y} }{\dfrac{d F_Y(y)}{dy} }=\dfrac{\int^x_{-\infty}f(u,y)du}{f_Y(y)}=\int^x_{-\infty}\dfrac{f(u,y)}{f_Y(y)}du</script><h2 id="随机变量的独立性"><a href="#随机变量的独立性" class="headerlink" title="随机变量的独立性"></a>随机变量的独立性</h2><p>设(X,Y)为二维随机变量,若对于任何实数x,y:</p><p>$P(X\leq x,Y\leq y)=p(X\leq x)P(Y\leq y)$</p><p>则X和Y相互独立</p><p><img src="image-20241018112647390.png" alt="image-20241018112647390"></p><script type="math/tex; mode=display">P\{X=1\}=\frac{1}{3}\\P\{Y=0\}=\frac{1}{3}\\P\{X=1\wedge Y=0\}=\frac{1}{6}\neq P\{X=1\}\times P\{Y=0\}不独立</script><h3 id="推论1"><a href="#推论1" class="headerlink" title="推论1"></a>推论1</h3><script type="math/tex; mode=display">设f(x,y)是连续型二维随机变量(X,Y)的联合密度函数,r(x),g(y)为非负可积函数\\若f(x,y)=r(x)g(y)\\则X,Y相互独立,且\\f_X(x)=\frac{r(x)}{\int^{+\infty}_{-\infty}g(y)dy}\\f_Y(y)=\frac{g(y)}{\int^{+\infty}_{-\infty}g(y)dy}\\</script><h3 id="推论2"><a href="#推论2" class="headerlink" title="推论2"></a>推论2</h3><script type="math/tex; mode=display">\begin{aligned}X,Y为相互独立的随机变量,\\u(x),v(y)为连续函数,\\则U=u(x),V=v(Y)也相互独立,\\设X与Y的概率密度函数分别为f_X(x),f_Y(y),则\\f(x,y)=f_X(x)f_y(y)\end{aligned}</script><h3 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h3><script type="math/tex; mode=display">f_{Y|X}(y|x)=\frac{f(x,y)}{f_X(x)}\\</script><p><img src="image-20241018114119486.png" alt="image-20241018114119486"></p><script type="math/tex; mode=display">\frac{1}{2\pi\sigma_1\sigma_2\sqrt{1-\rho^2} }\exp\{\frac{-1}{2(1-\rho^2)}[\frac{(x-\mu_1)^2}{\sigma_1^2}-2\rho\frac{(x-\mu_1)(y-\mu_2)}{\sigma_1\sigma_2}+\frac{(y-\mu_2)^2}{\sigma_2^2}]\}\\</script>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-灰色关联分析</title>
    <link href="/2024/11/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/"/>
    <url>/2024/11/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%81%B0%E8%89%B2%E5%85%B3%E8%81%94%E5%88%86%E6%9E%90/</url>
    
    <content type="html"><![CDATA[<h1 id="灰色关联分析"><a href="#灰色关联分析" class="headerlink" title="灰色关联分析"></a>灰色关联分析</h1><h2 id="确定分析数列"><a href="#确定分析数列" class="headerlink" title="确定分析数列"></a>确定分析数列</h2><p>参考数列(母序列):能反映系统行为特征的数据序列,记作$x_0$</p><p>比较数列(子序列):能反映系统行为的因素组成的数据序列,记作$x _i(i=1,2\dots)$</p><h2 id="确定灰色关联系数"><a href="#确定灰色关联系数" class="headerlink" title="确定灰色关联系数"></a>确定灰色关联系数</h2><p>两级最小差$a=\min\limits_s\min\limits_t\left|x_0(t)-x_s(t)\right|$</p><p>两级最大差$b=\max\limits_s\max\limits_t\left|x_0(t)-x_s(t)\right|$</p><p> $\gamma(x_0(k),x_i(k))=\frac{a+\rho b}{\left|x_o(k)-x_i(k)\right|+\rho b}$</p><p>$\rho$为分辨系数,一般取值0.5</p><p>灰色关联度$\gamma(x_0,x_i)=\frac{1}{n}\sum_{k=1}^n\gamma(x_0(k),x_i(k))$</p><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><p>确定系统中哪些是主要因素,哪些是次要因素</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>预处理,正向化,标准化</li><li>确定母序列和子序列</li><li>将母序列和子序列两两相减</li><li>将每个元素计算灰色关联系数$\gamma$</li><li>将各指标的灰色关联系数求平均值作为灰色关联度</li><li>根据灰色关联度大小下结论</li></ol><p><img src="image-20241128163650433.png" alt="image-20241128163650433"></p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-Topsis</title>
    <link href="/2024/11/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Topsis/"/>
    <url>/2024/11/28/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-Topsis/</url>
    
    <content type="html"><![CDATA[<h1 id="TOPSIS优劣解距离法"><a href="#TOPSIS优劣解距离法" class="headerlink" title="TOPSIS优劣解距离法"></a>TOPSIS优劣解距离法</h1><h2 id="正向化处理"><a href="#正向化处理" class="headerlink" title="正向化处理"></a>正向化处理</h2><p>将所有指标转换为极大型:转换公式$max-x$</p><h2 id="标准化处理"><a href="#标准化处理" class="headerlink" title="标准化处理"></a>标准化处理</h2><p>目的:消除量纲影响<br>$z_{ij}=\frac{x_{ij} }{\sqrt{ {\sum^n_{i=1}x_{ij}^2} } }$<br>进行距离法打分,评分:$\frac{x-\text{min} }{\text{max} -\text{min} }$,然后归一化</p><h2 id="用优劣解打分"><a href="#用优劣解打分" class="headerlink" title="用优劣解打分"></a>用优劣解打分</h2><script type="math/tex; mode=display">Z=\begin{vmatrix}z_{11}&z_{12}&\dots&z_{1m}\\z_{21}&z_{22}&\dots&z_{2m}\\\vdots&\vdots&\ddots&\vdots\\z_{n1}&z_{n2}&\dots&z_{nm}\end{vmatrix}(n个评价对象,m个评价指标)</script><p>在每个指标里挑出最大值和最小值,构成最大向量$Z^+$和最小向量$Z^-$</p><p>即$Z^+=(Z_1^+,Z_2^+,\dots,Z^+_m)=(\max\{ z_{11},z_{21},\dots z_{n1} \},\dots)$</p><p>$Z^-=(Z_1^-,Z_2^-,\dots,Z^-_m)=(\min\{ z_{11},z_{21},\dots z_{n1} \},\dots)$</p><p>对于第i个对象,计算它每个指标相对最大值的距离$D^+=\sqrt{ \sum^m_{j=1}(Z_j^+-z_{ij})^2w_j },i=1,2,\dots,n$</p><p>得分:$S_i=\frac{D_i^-}{D_i^++D_i^-}$(还没有归一化)</p><h1 id="评价类模型分类"><a href="#评价类模型分类" class="headerlink" title="评价类模型分类"></a>评价类模型分类</h1><ul><li>主观赋值法<ul><li>层次分析法</li><li>模糊综合评价</li></ul></li><li>客观赋值法<ul><li>TOPSIS</li><li>主成分分析法</li><li>灰色综合评价</li><li>聚类分析法</li><li>神经网络评价法</li></ul></li></ul><h1 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h1><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% TOPSIS优劣解-应用</span><br><span class="hljs-comment">%% 读取表格</span><br>opts = detectImportOptions(<span class="hljs-string">&#x27;univ_data.xlsx&#x27;</span>);<br>opts.VariableTypes = &#123;<span class="hljs-string">&#x27;double&#x27;</span>, <span class="hljs-string">&#x27;double&#x27;</span>, <span class="hljs-string">&#x27;double&#x27;</span>, <span class="hljs-string">&#x27;double&#x27;</span>, <span class="hljs-string">&#x27;double&#x27;</span>&#125;;<br>opts.PreserveVariableNames = <span class="hljs-built_in">true</span>;<br>data = <span class="hljs-built_in">readtable</span>(<span class="hljs-string">&#x27;univ_data.xlsx&#x27;</span>, opts);<br>data = data(:, <span class="hljs-number">2</span>:<span class="hljs-keyword">end</span>);<br>data = table2array(data);<br><br><span class="hljs-comment">%% 正向化</span><br><span class="hljs-comment">%% 人均论文发表数量介于2~4最好</span><br>data(:,<span class="hljs-number">1</span>) = int2max(data(:,<span class="hljs-number">1</span>), <span class="hljs-number">2</span>, <span class="hljs-number">4</span>);<br><br><span class="hljs-comment">%% 师生比接近0.7越好</span><br>data(:, <span class="hljs-number">2</span>) = mid2max(data(:, <span class="hljs-number">2</span>), <span class="hljs-number">0.7</span>);<br><br><span class="hljs-comment">%% 科研经费越多越好</span><br>data(:, <span class="hljs-number">3</span>) = data(:, <span class="hljs-number">3</span>);<br><br><span class="hljs-comment">%% 逾期毕业率越小越好</span><br>data(:, <span class="hljs-number">4</span>) = min2max(data(:, <span class="hljs-number">4</span>));<br><br><span class="hljs-comment">%% 标准化</span><br>[n,m] = <span class="hljs-built_in">size</span>(data);<br>s = <span class="hljs-built_in">repmat</span>(sum(data,<span class="hljs-number">1</span>), n, <span class="hljs-number">1</span>);<br>data = data ./ s;<br><br><span class="hljs-comment">%% 优劣解打分</span><br><span class="hljs-comment">% 由熵权法计算得到的权值w</span><br>w = [<span class="hljs-number">0.2241</span>;<span class="hljs-number">0.2566</span>;<span class="hljs-number">0.1891</span>;<span class="hljs-number">0.3302</span>];<br>Z_max = <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">max</span>(data), n, <span class="hljs-number">1</span>);<br>Z_min = <span class="hljs-built_in">repmat</span>(<span class="hljs-built_in">min</span>(data), n, <span class="hljs-number">1</span>);<br>D_max = sum(((data - Z_max) .^ <span class="hljs-number">2</span>) * w, <span class="hljs-number">2</span>).^<span class="hljs-number">0.5</span>;<br>D_min = sum(((data - Z_min) .^ <span class="hljs-number">2</span>) * w, <span class="hljs-number">2</span>).^<span class="hljs-number">0.5</span>;<br><br><br>S = D_min ./ (D_max + D_min);<br><br>res = S./sum(S)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-熵权法</title>
    <link href="/2024/11/27/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%86%B5%E6%9D%83%E6%B3%95/"/>
    <url>/2024/11/27/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E7%86%B5%E6%9D%83%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="熵权法"><a href="#熵权法" class="headerlink" title="熵权法"></a>熵权法</h1><p>信息熵</p><p>本质:<strong>对信息量的期望值</strong></p><p>$H(x)=\sum^n_{i=1}\left[p(x_i)I(x_i)\right]$</p><p>信息的期望值越大,已掌握的信息量越少</p><h2 id="正向化处理h"><a href="#正向化处理h" class="headerlink" title="正向化处理h"></a>正向化处理h</h2><ul><li>极小型转换为极大型:$\max(x)-x$</li><li>越靠近特定值越好的中间型指标转最大型:$M=\max\{|x_i-x_{best}|\},各令\tilde x_i=1-\frac{|x_i-x_{best}|}{M}$</li><li>落在某个区间最好的中间型指标转最大型:$M=\max\{a-\min\{x_i\},\max\{x_i\}-b\}$,再令$\tilde x_i=\begin{cases}1-\frac{a-x_i}{M},x_i<a\\1,a\leq x_i\leq b\\1-\frac{x_i-b}{m},x_i>b\end{cases}$</a\\1,a\leq></li></ul><h2 id="标准化处理"><a href="#标准化处理" class="headerlink" title="标准化处理"></a>标准化处理</h2><p>n个评价对象,m个评价指标(已经正向化处理),构成矩阵:$X=\begin{vmatrix}x_{11}&amp;x_{12}&amp;\dots&amp;x_{1m}\\x_{21}&amp;x_{22}&amp;\dots&amp;x_{2m}\\\vdots&amp;\vdots&amp;\ddots&amp;\vdots\\x_{n1}&amp;x_{n2}&amp;\dots&amp;x_{nm}\end{vmatrix}$</p><p>设标准化后的矩阵为Z,则Z的每一个元素:$z_{ij}=\frac{x_{ij} }{\sqrt{\sum^n_{i=1}x_{ij}^2} }$</p><h2 id="计算比重矩阵"><a href="#计算比重矩阵" class="headerlink" title="计算比重矩阵"></a>计算比重矩阵</h2><p>比重矩阵P的每一个元素$p_{ij}=\frac{\tilde z_{ij} }{\sum\limits^n_{i=1}\tilde z_{ij} }$,容易验证:$\sum\limits_{i=1}^np_{ij}=1$</p><p>信息熵$H(x)=\sum\limits^n_{i=1}\left[p(x_i)I(x_i)\right]=-\sum\limits^n_{i=1}\left[p(x_i)\ln(p(x_i))\right]$</p><p>稍加修改,令信息熵为$e_j=-\frac{1}{\ln n}\sum\limits^n_{i=1}p_{ij}\ln(p_{ij})$</p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-模糊综合评价</title>
    <link href="/2024/11/27/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7/"/>
    <url>/2024/11/27/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E6%A8%A1%E7%B3%8A%E7%BB%BC%E5%90%88%E8%AF%84%E4%BB%B7/</url>
    
    <content type="html"><![CDATA[<h1 id="模糊综合评价"><a href="#模糊综合评价" class="headerlink" title="模糊综合评价"></a>模糊综合评价</h1><h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>现实中的许多现象及关系比较模糊,如高与矮,长与短</p><h2 id="模糊集合"><a href="#模糊集合" class="headerlink" title="模糊集合"></a>模糊集合</h2><h3 id="传统集合的概念"><a href="#传统集合的概念" class="headerlink" title="传统集合的概念"></a>传统集合的概念</h3><ul><li>互异性</li><li>逻辑性</li><li>独立性</li><li>无序性</li><li>纯粹性</li><li>完备性</li></ul><h3 id="传统集合的特征函数"><a href="#传统集合的特征函数" class="headerlink" title="传统集合的特征函数"></a>传统集合的特征函数</h3><p>U为论域,$f_A$是A集合的特征函数,有</p><p>$f_A:U\rightarrow \{0,1\}$</p><h3 id="模糊集合的隶属度"><a href="#模糊集合的隶属度" class="headerlink" title="模糊集合的隶属度"></a>模糊集合的隶属度</h3><p>定义U为论域,$\mu_A$为A集合的特征函数,有:<br>$\mu_A:U\rightarrow [0,1]$</p><h3 id="模糊集合的表示方法"><a href="#模糊集合的表示方法" class="headerlink" title="模糊集合的表示方法"></a>模糊集合的表示方法</h3><p>对于论域$U=&lt;x_1,x_2,\dots,x_n$,模糊集合$A$,隶属度$A(x_i)(i=1,2\dots n)$</p><p>扎德表示法:$A=\frac{A(x_1)}{x_1}+{A(x_2)}{x_2}+\dots+\frac{A(x_n)}{x_n}$</p><h3 id="模糊集合的分类"><a href="#模糊集合的分类" class="headerlink" title="模糊集合的分类"></a>模糊集合的分类</h3><p>极小型:$\mu_A(x)=\begin{cases}1,x<a\\\frac{b-x}{b-a},a\leq x\leq b\\0,x>b\end{cases}$</a\\\frac{b-x}{b-a},a\leq></p><p>中间型:$\mu_A(x)=\begin{cases}0,x&lt;a\\\frac{x-a}{b-a},a\leq x&lt;b\\1,b\leq x&lt;c\\\frac{d-x}{d-c},c\leq x&lt; d\\0,x\geq d\end{cases}$</p><p>极大型:$\mu_A(x)=\begin{cases}0,x<a\\\frac{b-x}{b-a},a\leq x\leq b\\1,x>b\end{cases}$</a\\\frac{b-x}{b-a},a\leq></p><h2 id="F分布确定隶属函数"><a href="#F分布确定隶属函数" class="headerlink" title="F分布确定隶属函数"></a>F分布确定隶属函数</h2><p>柯西分布:$\frac{1}{\pi \gamma \left[1+\left(\frac{x-x_0}{\gamma}^2\right)\right]}$</p>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>数学建模-层次分析法</title>
    <link href="/2024/11/24/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/"/>
    <url>/2024/11/24/%E6%95%B0%E5%AD%A6%E5%BB%BA%E6%A8%A1-%E5%B1%82%E6%AC%A1%E5%88%86%E6%9E%90%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="层次分析法"><a href="#层次分析法" class="headerlink" title="层次分析法"></a>层次分析法</h1><p><img src="image-20241124170552772.png" alt="image-20241124170552772"></p><h2 id="判断矩阵"><a href="#判断矩阵" class="headerlink" title="判断矩阵"></a>判断矩阵</h2><p>将各要素之间相互两两比较,并确定各准则层对目标层的权重</p><p>判断矩阵$A=(a_{ij})_{m\times n}=\begin{pmatrix}a_{11}&amp;a_{12}&amp;\dots&amp;a_{1n}\\\dots&amp;\dots&amp;\dots&amp;\dots\end{pmatrix}$</p><p>其中A中的元素满足:</p><ol><li>$a_{ij}&gt;0$</li><li>$a_{ij}=\frac{1}{a_{ji} }$</li><li>$a_{ii}=1$</li></ol><p><img src="image-20241124170637435.png" alt="Santy的1-9标度方法"></p><h2 id="一致矩阵"><a href="#一致矩阵" class="headerlink" title="一致矩阵"></a>一致矩阵</h2><p>一致性的判断方法:</p><ol><li>正互反矩阵A的秩为1,A的唯一非零特征根为n</li><li>正互反矩阵A的任一列向量都是对于特征根n的特征向量</li><li>当正互反矩阵A不为一致阵时,其最大特征根$\lambda_{max}&gt;n$,$\lambda$与n相差越大,其不一致程度越大</li></ol><h2 id="一致性检验"><a href="#一致性检验" class="headerlink" title="一致性检验"></a>一致性检验</h2><p><em>Consistency Index</em>:$CI=\frac{\lambda_{max}-n}{n-1}\$</p><p>$CI=\begin{cases}0,完全一致性\\接近0,满意的一致性\\越大,一致性越差\end{cases}$</p><p><strong>随机一致性指标RI</strong>,构造500个判断矩阵$A_1,A_2,…,A_{500}$,分别计算$\lambda_{max}$,得到其各自的一致性指标$CI_1,CI_2,…,CI_{500}$</p><p>定义<strong>一致性指标RI</strong>=$\Large\frac{CI_1+CI_2+…+CI_{500} }{500}=\frac{\frac{\lambda_1+\lambda_2+…+\lambda_{500} }{500}-n}{n-1}$</p><p><strong>一致性比例</strong>$CR=\frac{CI}{RI}\begin{cases}&lt;0.1,判断矩阵一致\\\geq 0.1, 判断矩阵不一致\end{cases}$</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ol><li>解决评价类问题</li><li>画出层级结构图(<strong>目标层,准则层,方案层</strong>)</li><li>构造<strong>判断矩阵</strong></li><li>依照评价指标对各个方案进行打分</li><li>求出权重,填表,求得最后得分</li><li>层次总排序一致性检验</li></ol><h2 id="MATLAB代码"><a href="#MATLAB代码" class="headerlink" title="MATLAB代码"></a>MATLAB代码</h2><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% 层次分析法</span><br><span class="hljs-comment">%% 获取判断矩阵</span><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;请输入判断矩阵A:&#x27;</span>)<br>A=input(<span class="hljs-string">&#x27;A=&#x27;</span>);<br>[n,n]=<span class="hljs-built_in">size</span>(A)<br><br><span class="hljs-comment">%% 算数平均法求权重</span><br>sum_A = sum(A);<br>SUM_A = <span class="hljs-built_in">repmat</span>(sum_A, n, <span class="hljs-number">1</span>);<br>stand_A = A ./ SUM_A;<br><br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;算数平均法求权重的结果为:&#x27;</span>);<br>w1=sum(stand_A,<span class="hljs-number">2</span>)./n;<br><span class="hljs-built_in">disp</span>(w1)<br><br><span class="hljs-comment">%% 特征值法求权重</span><br>[V,D]=eig(A); <span class="hljs-comment">% V为特征向量,D为特征值</span><br>MAX_eig = <span class="hljs-built_in">max</span>(<span class="hljs-built_in">max</span>(D)); <span class="hljs-comment">% 最大特征值</span><br>[r,c] = <span class="hljs-built_in">find</span>(D == MAX_eig, <span class="hljs-number">1</span>); <span class="hljs-comment">% 最大特征值所在特征值矩阵中的位置(r为行,c为列)</span><br>w2 = V(:,c) ./ sum(V(:,c));<br><span class="hljs-built_in">disp</span>(w2)<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;两种方法的平均值为:&#x27;</span>)<br><span class="hljs-built_in">disp</span>((w1+w2)/<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">%% 计算一致性比例CR</span><br>CI=(MAX_eig-n) / (n<span class="hljs-number">-1</span>); <br>RI=[<span class="hljs-number">0</span> <span class="hljs-number">0.0001</span> <span class="hljs-number">0.52</span> <span class="hljs-number">0.89</span> <span class="hljs-number">1.12</span> <span class="hljs-number">1.26</span> <span class="hljs-number">1.36</span> <span class="hljs-number">1.41</span> <span class="hljs-number">1.46</span> <span class="hljs-number">1.49</span> <span class="hljs-number">1.52</span> <span class="hljs-number">1.54</span> <span class="hljs-number">1.56</span> <span class="hljs-number">1.58</span> <span class="hljs-number">1.59</span>]; <span class="hljs-comment">%常用随机一致性指标</span><br>CR=CI/RI(n);<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;最大特征值为:&#x27;</span>)<br><span class="hljs-built_in">disp</span>(MAX_eig)<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;一致性指标CI=&#x27;</span>);<span class="hljs-built_in">disp</span>(CI)<br><span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;一致性比例CR=&#x27;</span>);<span class="hljs-built_in">disp</span>(CR)<br><span class="hljs-keyword">if</span> CR &lt; <span class="hljs-number">0.10</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;CR&lt;0.10,该判断矩阵A的一致性可以接受&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;CR&gt;=0.10,该判断矩阵需要进行修改&#x27;</span>);<br><span class="hljs-keyword">end</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>数学建模</category>
      
    </categories>
    
    
    <tags>
      
      <tag>数学建模</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>假设检验</title>
    <link href="/2024/11/22/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/"/>
    <url>/2024/11/22/%E5%81%87%E8%AE%BE%E6%A3%80%E9%AA%8C/</url>
    
    <content type="html"><![CDATA[<h1 id="假设检验"><a href="#假设检验" class="headerlink" title="假设检验"></a>假设检验</h1><h2 id="内容"><a href="#内容" class="headerlink" title="内容"></a>内容</h2><ul><li>参数检验<ul><li>总体均值,均值差的检验</li><li>总体方差,方差比的检验</li></ul></li><li>非参数检验<ul><li>分布拟合检验</li><li>秩和检验</li></ul></li></ul><p>第一类错误-$\alpha$:弃真错误</p><p>第二类错误-$\beta$:取伪错误</p><p>只对犯第一类错误的概率加以控制,而不考虑犯第二类错误的概率的检验,称为<strong>显著性检验</strong></p><p>显著性水平$\alpha$=P{犯第一类错误}</p><p>通常把有把握,有经验的结论作为原假设,或者尽可能使后果严重的错误成为第一类错误</p><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ol><li>建设原假设$H_0$与备选假设$H_1$</li><li>当$H_0$为真时,选择一个合适的检验统计量$V$,他的分布是已知的,由$H_1$确定拒绝域的形式</li><li>给定显著性水平,对应的拒绝域<ol><li>双侧检验$(V<V_{\alpha 2}\cup (v>V_{1-\alpha/2})$</V_{\alpha></li><li>右边检验$(V&gt;V_{1-\alpha}$</li></ol></li></ol><h2 id="单个总体均值的检验"><a href="#单个总体均值的检验" class="headerlink" title="单个总体均值的检验"></a>单个总体均值的检验</h2><h3 id="sigma-已知-关于-mu-的检验-U检验-又称Z检验"><a href="#sigma-已知-关于-mu-的检验-U检验-又称Z检验" class="headerlink" title="$\sigma$已知,关于$\mu$的检验(U检验)(又称Z检验)"></a>$\sigma$已知,关于$\mu$的检验(U检验)(又称Z检验)</h3><p>$Z=\frac{\overline{X}-\mu_0}{\sigma/\sqrt n}$</p><p><img src="image-20241129112156834.png" alt="U检验法(方差已知)"></p><h3 id="sigma-2-未知-关于-mu-的检验-T检验"><a href="#sigma-2-未知-关于-mu-的检验-T检验" class="headerlink" title="$\sigma^2$未知,关于$\mu$的检验(T检验)"></a>$\sigma^2$未知,关于$\mu$的检验(T检验)</h3><p>$X\sim N(\mu,\sigma^2),需检验:H_0=\mu=\mu_0,H_1:\mu\neq \mu_0$</p><p>$T=\frac{\overline{X}-\mu_0}{\frac{S}{\sqrt n}}\sim t(n-1)$</p><p><img src="image-20241129105315451.png" alt="T检验法(方差未知)"></p><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><p><img src="image-20241129105446429.png" alt="image-20241129105446429"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs MATLAB">X = [<span class="hljs-number">159</span> <span class="hljs-number">280</span> <span class="hljs-number">101</span> <span class="hljs-number">212</span> <span class="hljs-number">224</span> <span class="hljs-number">379</span> <span class="hljs-number">179</span> <span class="hljs-number">264</span> <span class="hljs-number">222</span> <span class="hljs-number">362</span> <span class="hljs-number">168</span> <span class="hljs-number">250</span> <span class="hljs-number">149</span> <span class="hljs-number">260</span> <span class="hljs-number">485</span> <span class="hljs-number">170</span>];<br>n=<span class="hljs-built_in">length</span>(X);<br>mu_0=<span class="hljs-number">225</span>;<br>mu=<span class="hljs-built_in">mean</span>(X);<br>s=std(X);<br>t=(mu-mu_0)/(s/<span class="hljs-built_in">sqrt</span>(n));<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;t=&#x27;</span>,num2str(t)]);<br>p=<span class="hljs-number">0.95</span>;<br>z = icdf(<span class="hljs-string">&#x27;T&#x27;</span>, p, n<span class="hljs-number">-1</span>);<br><span class="hljs-keyword">if</span> t&lt;z<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;没有落在拒绝域内&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;落在拒绝域内&#x27;</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="sigma-的双边检验-mu-未知"><a href="#sigma-的双边检验-mu-未知" class="headerlink" title="$\sigma$的双边检验($\mu$未知)"></a>$\sigma$的双边检验($\mu$未知)</h3><p>设$X\sim N(\mu,\sigma^2),\mu未知,需检验:$</p><p>$H_0:\sigma^2=\sigma_0^2,H_1:\sigma^2\neq \sigma_0^2$</p><p>$\chi^2=\frac{(n-1)S^2}{\sigma_0^2}\sim \chi^2(n-1)$</p><p>$P\left\{\frac{(n-1)S^2}{\sigma_0}\leq\chi_{\alpha/2}^2(n-1)或\frac{(n-1)S^2}{\sigma_0^2}\geq \chi_{1-\alpha/2}^2(n-1)\right\}=\alpha$</p><p><img src="image-20241129112119948.png" alt="方差的检验(均值未知)"></p><h2 id="两个正态总体均值差的检验-t检验"><a href="#两个正态总体均值差的检验-t检验" class="headerlink" title="两个正态总体均值差的检验(t检验)"></a>两个正态总体均值差的检验(t检验)</h2><p>$t=\frac{(\overline X-\overline Y)-\delta}{S_\omega\sqrt{\frac 1{n_1}+\frac 1{n_2}}}$</p><p>$S_\omega^2=\frac{(n_1-1)S_1^2+(n_2-1)S_2^2}{n_1+n_2-2},S_\omega=\sqrt {S_\omega^2}$</p><p>拒绝域:$\frac{(\overline X-\overline Y)-\delta}{S_\omega\sqrt{\frac 1{n_1}+\frac 1{n_2}}}\geq t_{\alpha/2}(n_1+n_2-2)$</p><p><img src="image-20241130110711968.png" alt="P185例2"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% P185 例2</span><br>A=[<span class="hljs-number">79.98</span> <span class="hljs-number">80.04</span> <span class="hljs-number">80.02</span> <span class="hljs-number">80.04</span> <span class="hljs-number">80.03</span> <span class="hljs-number">80.03</span> <span class="hljs-number">80.04</span> <span class="hljs-number">79.97</span> <span class="hljs-number">80.05</span> <span class="hljs-number">80.03</span> <span class="hljs-number">80.02</span> <span class="hljs-number">80.00</span> <span class="hljs-number">80.02</span>];<br>B=[<span class="hljs-number">80.02</span> <span class="hljs-number">79.94</span> <span class="hljs-number">79.98</span> <span class="hljs-number">79.97</span> <span class="hljs-number">79.97</span> <span class="hljs-number">80.03</span> <span class="hljs-number">79.95</span> <span class="hljs-number">79.97</span>];<br>n1=<span class="hljs-built_in">length</span>(A);<br>n2=<span class="hljs-built_in">length</span>(B);<br>mean1=<span class="hljs-built_in">mean</span>(A);<br>mean2=<span class="hljs-built_in">mean</span>(B);<br>s1=std(A);<br>s2=std(B);<br>sw=<span class="hljs-built_in">sqrt</span>(((n1<span class="hljs-number">-1</span>)*s1^<span class="hljs-number">2</span>+(n2<span class="hljs-number">-1</span>)*s2^<span class="hljs-number">2</span>) / (n1+n2<span class="hljs-number">-2</span>));<br>t=(mean1-mean2)/(sw*<span class="hljs-built_in">sqrt</span>(<span class="hljs-number">1</span>/n1+<span class="hljs-number">1</span>/n2));<br><span class="hljs-built_in">disp</span>([<span class="hljs-string">&#x27;t=&#x27;</span>,num2str(t)]);<br>p=<span class="hljs-number">0.95</span>;<br>z=icdf(<span class="hljs-string">&#x27;T&#x27;</span>,p,n1+n2<span class="hljs-number">-2</span>);<br><span class="hljs-keyword">if</span> t &gt; z<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;拒绝H0&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;接受H0&#x27;</span>);<br><span class="hljs-keyword">end</span><br><br><span class="hljs-comment">%% 绘制箱线图(在不同图中)</span><br><span class="hljs-built_in">figure</span><br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">1</span>)<br>boxplot(A)<br>subplot(<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>)<br><br><span class="hljs-comment">%% 绘制箱线图(在同一图中)</span><br>A=A.&#x27;;<br>B=B.&#x27;;<br>group = [<span class="hljs-built_in">repmat</span>(<span class="hljs-string">&#x27;A&#x27;</span>,<span class="hljs-built_in">size</span>(A,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>);<span class="hljs-built_in">repmat</span>(<span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-built_in">size</span>(B,<span class="hljs-number">1</span>),<span class="hljs-number">1</span>)];<br>boxplot([A;B],group)<br></code></pre></td></tr></table></figure><h2 id="基于成对数据的检验-t检验"><a href="#基于成对数据的检验-t检验" class="headerlink" title="基于成对数据的检验(t检验)"></a>基于成对数据的检验(t检验)</h2><p><img src="image-20241130113514692.png" alt="P186例3"></p><figure class="highlight matlab"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs matlab"><span class="hljs-comment">%% P186 例3</span><br><span class="hljs-comment">% H0:\mu_D=0,\mu_D\neq 0</span><br>x=[<span class="hljs-number">0.20</span><span class="hljs-number">0.30</span><span class="hljs-number">0.40</span><span class="hljs-number">0.50</span><span class="hljs-number">0.60</span><span class="hljs-number">0.70</span><span class="hljs-number">0.80</span><span class="hljs-number">0.90</span> <span class="hljs-number">1.00</span>];<br>y=[<span class="hljs-number">0.10</span><span class="hljs-number">0.21</span><span class="hljs-number">0.52</span><span class="hljs-number">0.32</span><span class="hljs-number">0.78</span><span class="hljs-number">0.59</span><span class="hljs-number">0.68</span><span class="hljs-number">0.77</span> <span class="hljs-number">0.89</span>];<br>n=<span class="hljs-built_in">length</span>(x);<br>d=x-y;<br>alpha=<span class="hljs-number">0.01</span>;<br>z=icdf(<span class="hljs-string">&#x27;T&#x27;</span>,<span class="hljs-number">1</span>-alpha/<span class="hljs-number">2</span>,n<span class="hljs-number">-1</span>);<br>mean_d=<span class="hljs-built_in">mean</span>(d);<br>s_d=std(d);<br>t=<span class="hljs-built_in">abs</span>(mean_d/(s_d/<span class="hljs-built_in">sqrt</span>(n)));<br><span class="hljs-keyword">if</span> t&lt;z<br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;无明显差异&#x27;</span>);<br><span class="hljs-keyword">else</span><br>    <span class="hljs-built_in">disp</span>(<span class="hljs-string">&#x27;有明显差异&#x27;</span>);<br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h2 id="方差比的检验-F检验"><a href="#方差比的检验-F检验" class="headerlink" title="方差比的检验(F检验)"></a>方差比的检验(F检验)</h2><p>$F=\frac{S_1^2}{S_2^2}$</p><p>$H_1:\sigma_1^2&gt;\sigma_2^2\rightarrow \chi^2\geq \chi_\alpha^2(n-1)$</p><p>$H_1:\sigma_1^2&lt;\sigma_2^2\rightarrow \chi^2\leq \chi_{1-\alpha}^2(n-1)$</p><p>$H_1:\sigma_1^2&gt;\sigma_2^2\rightarrow \chi^2\geq \chi_{\alpha/2}^2(n-1)或\chi^2\leq \chi_{1-\alpha/2}^2(n-1)$</p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>参数估计</title>
    <link href="/2024/11/22/%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/"/>
    <url>/2024/11/22/%E5%8F%82%E6%95%B0%E4%BC%B0%E8%AE%A1/</url>
    
    <content type="html"><![CDATA[<h1 id="概率论-参数估计"><a href="#概率论-参数估计" class="headerlink" title="概率论-参数估计"></a>概率论-参数估计</h1><script type="math/tex; mode=display">统计推断问题\left\{\begin{aligned}&参数估计\left\{\begin{aligned}&点估计\\\\&区间估计\\\end{aligned}\right.\\\\&假设检验\end{aligned}\right.</script><h2 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h2><p>设总体X的分布函数F(x;$\theta$)形式为已知,$\theta$是待估参数.$X_1,X_2…X_n$是X的一个样本,$x_1,x_2,…x_n$,是相应的一个样本值.</p><p>点估计问题就是要构造一个适当的统计量$\hat\theta(X_1,X_2…X_n)$,用它的观察值$\hat\theta(x_1,x_2…x_n)$作为未知参数$\theta$的近似值,</p><p>我们称$\hat\theta(X_1,X_2…X_n)$为0的估计量,称$\hat\theta(x_1,x_2…x_n)$为0的估计值.统称为<strong>估计</strong>,并都简记为$\hat \theta$</p><h2 id="常用的点估计方法-矩法"><a href="#常用的点估计方法-矩法" class="headerlink" title="常用的点估计方法:矩法"></a>常用的点估计方法:<strong>矩法</strong></h2><ul><li>用样本的k阶矩作为总体的k阶矩的估计量</li><li>建立含有待估计参数的方程</li><li>从而可解出待估计参数</li></ul><h2 id="常用的点估计方法-极大似然法"><a href="#常用的点估计方法-极大似然法" class="headerlink" title="常用的点估计方法:极大似然法"></a>常用的点估计方法:极大似然法</h2><p>思想方法:一次试验就出现的事件有较大的概率</p><p>$L(P)=p^{\mathop\Sigma\limits_{i=1}^n x_i}(1-p)^{n-\mathop\Sigma\limits_{i=1}^n x_i}$</p><p>选择恰当的$\theta=\hat\theta$,使得$L(\theta)$取最大值,即</p><p>$L(x_1,x_2,…,x_n,\hat\theta)=\max\limits_{\theta\in \Theta}\{f(x_1,\theta)f(x_2,\theta)…f(x_n,\theta)\}$</p><p>则称这样的$\hat\theta=g(x_1,x_2,…,x_n)$参数$\theta$的极大似然估计值</p><h3 id="极大似然估计值的不变性定理"><a href="#极大似然估计值的不变性定理" class="headerlink" title="极大似然估计值的不变性定理"></a>极大似然估计值的不变性定理</h3><p>设$\hat\theta$是$\theta$的极大似然估计值,$u(\theta)(\theta\in\Theta)$是$\theta$的函数,且具有单值的反函数$\theta=\theta(u),u\in U$,则$\hat u=u(\hat\theta)$是$u(\theta)$的极大似然估计值</p><h2 id="点估计的评价标准"><a href="#点估计的评价标准" class="headerlink" title="点估计的评价标准"></a>点估计的评价标准</h2><ul><li>无偏性</li><li>有效性</li><li>一致性</li></ul><h3 id="无偏性"><a href="#无偏性" class="headerlink" title="无偏性"></a>无偏性</h3><p>定义:设$(X_1,X_2,…,X_n)$是总体X的样本,$\hat\theta=\hat\theta(X_1,X_2,…,X_n)$是总体参数$\theta$的估计量,$E(\hat\theta)$存在,如果:</p><p>$E(\hat\theta)=\theta$</p><p>则称$\hat\theta$为$\theta$的无偏估计量</p><p>在估计时,以样本方差$S^2$估计总体方差</p><h3 id="有效性"><a href="#有效性" class="headerlink" title="有效性"></a>有效性</h3><p>$设\hat\theta_1=\theta_1(X_1,X_2,…,X_n)\\\hat\theta_2=\theta_2(X_1,X_2,…,X_n)$</p><p>都是总体参数$\theta$的无偏估计量,且</p><p>$D(\hat\theta_1)&lt;D(\hat\theta_2)$</p><p>则称$\hat\theta_1$比$\hat\theta_2$更有效</p><h3 id="一致性"><a href="#一致性" class="headerlink" title="一致性"></a>一致性</h3><h2 id="使用到的分布"><a href="#使用到的分布" class="headerlink" title="使用到的分布"></a>使用到的分布</h2><h3 id="卡方分布-chi-square-distribution"><a href="#卡方分布-chi-square-distribution" class="headerlink" title="卡方分布(chi-square distribution)"></a>卡方分布(chi-square distribution)</h3><p>若n个相互独立的随机变量$X_1,X_2\dots X_n$均服从<strong>标准正态分布</strong>,则n个服从标准正态分布的随机变量的平方和$Q=\sum^n_{i=1}X_i^2$构成一个新的随机变量,其分布规律称为$\chi^2$分布,记作$Q\sim \chi^2(v),其中v=n-k$</p><p><img src="2f2f74dc62993ccc0ca878a66db81c2.png" alt="卡方分布"></p><h3 id="t-分布-t-distribution"><a href="#t-分布-t-distribution" class="headerlink" title="t-分布(t-distribution)"></a>t-分布(t-distribution)</h3><ul><li>根据小样本来估计呈正态分布且方差未知的总体的均值</li><li>假如$X\sim N(0,1),Y\sim \chi^2(n)$,则$Z=\dfrac{X}{\sqrt{Y/N} }$称为自由度为n的分布,记为$Z\sim t(n)$</li><li>分布密度函数$f_Z(x)=\dfrac{\Gamma(\dfrac{n+1}{2})}{\sqrt{n\pi}\Gamma(\dfrac{n}{2})}(1+\dfrac{x^2}{n})^{-\dfrac{n+1}{2} }$</li></ul><h3 id="F分布"><a href="#F分布" class="headerlink" title="F分布"></a>F分布</h3><ul><li><p>若总体$X\sim N(0,1)$,$(X_1,X_2,\dots,X_{n_1})$与$(Y_1,Y_2,\dots,Y_{n_2})$来自X的两个独立样本,设统计量</p><p>$F=\dfrac{\sum^{n_1}_{i=1}X_i^2}{n_1}/\dfrac{\sum^n_{i=1}Y_i^2}{n_2}$</p><p>则称统计量$F$服从自由度$n_1$和$n_2$的F分布,记作$F\sim F(n_1,n_2)$</p></li></ul><p><img src="F1.png" alt="F分布"></p><h3 id="辨别三种抽样分布"><a href="#辨别三种抽样分布" class="headerlink" title="辨别三种抽样分布"></a>辨别三种抽样分布</h3><blockquote><p>$X和Y相互独立且都服从N(0,\sigma^2),而X_1,X_2,\dots,X_9和Y_1,Y_2,\dots,Y_9分别是来自总体X和Y的简单随机样本$</p></blockquote><p>$(1)\frac{1}{3\sigma}\sum^9_{i=1}X_i\sim N(0,1)$</p><p>$(2)\frac{1}{\sigma^2}\sum^9_{i=1}Y_i^2=\sum^9_{i=1}(\dfrac{Y_i}{\sigma})^2\sim\chi^2(9)$</p><p>$(3)U=\dfrac{\dfrac{1}{\sqrt{9\sigma} }\sum^9_{i=1}X_i}{\sqrt{\dfrac{1}{\sigma^2}\sum^9_{i=1}Y_i^2/9} }\sim t(n)$</p><p>$(4)U^2=\dfrac{\left(\dfrac{1}{\sqrt{9\sigma} }\sum^9_{i=1}X_i\right)^2/1}{\left(\sqrt{\dfrac{1}{\sigma^2}\sum^9_{i=1}Y_i^2}\right)^2/9}\sim F(1,9)$</p><h2 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h2><p><strong>置信空间</strong>是指由样本统计量所构成的总体参数的估计区间.展现的是这个参数的真实值有一定概率落在测量结果的周围的程度,其给出的是被测量参数的测量值的可信程度,即前面所要求的一个概率.</p><p>$(\bar X-Z_{1-\alpha/2}{\sqrt\frac{\sigma^2}{n} },\bar X+Z_{1-\alpha/2}{\sqrt\frac{\sigma^2}{n} })$</p><p>$\bar X-Z_{1-\alpha/2\sqrt{\frac{\sigma^2}{n} } }$:$\mu$的置信下限</p><p>$\bar X+Z_{1-\alpha/2\sqrt{\frac{\sigma^2}{n} } }$:$\mu$的置信上限</p><p>$1-\alpha$:置信度</p><h3 id="常用公式"><a href="#常用公式" class="headerlink" title="常用公式"></a>常用公式</h3><h4 id="1-方差-sigma-2-已知-mu-的置信区间"><a href="#1-方差-sigma-2-已知-mu-的置信区间" class="headerlink" title="(1)方差$\sigma^2$已知,$\mu$的置信区间"></a>(1)方差$\sigma^2$已知,$\mu$的置信区间</h4><p>$(\bar X-Z_{1-\alpha/2}\sqrt{\frac{\sigma^2}{n} },\bar X+Z_{1-\alpha/2}\sqrt{\frac{\sigma^2}{n} })$</p><p>推导:由$\bar X\sim N(\mu, \frac{\sigma}{\sqrt n})$选取枢轴量</p><p>$\frac{\bar X-\mu}{\frac{\sigma}{\sqrt n} }\sim N(0,1)$</p><p>(其中Z值根据下文标准正态分布表查表得)</p><h4 id="2-方差-sigma-2-未知-mu-的置信区间"><a href="#2-方差-sigma-2-未知-mu-的置信区间" class="headerlink" title="(2)方差$\sigma^2$未知,$\mu$的置信区间"></a>(2)方差$\sigma^2$未知,$\mu$的置信区间</h4><p>选取枢轴量:$T=\frac{\bar X-\mu}{\frac{S}{\sqrt n} }\sim T(n-1)$</p><p>由$P\left( \left|\frac{\bar X-\mu}{\frac{S}{\sqrt n} }\right| \geq t_{1-\frac{\alpha}{2} }(n-1)\right)=\alpha$</p><p>其中$\frac{1}{n-1}\sum^n_{i=1}(X_i-\bar X)^2=S^2$</p><p>$\left(\bar X-t_{1-\alpha/2}(n-1)\frac{S}{\sqrt n},\bar X+t_{1-\alpha/2}(n-1)\frac{S}{\sqrt n}\right)$</p><p>(其中$t$值根据下文T分布表查表得)</p><h4 id="3-当-mu-已知时-方差-sigma-2-的置信空间"><a href="#3-当-mu-已知时-方差-sigma-2-的置信空间" class="headerlink" title="(3)当$\mu$已知时,方差$\sigma^2$的置信空间$"></a>(3)当$\mu$已知时,方差$\sigma^2$的置信空间$</h4><p>$枢轴量Q=\sum\limits_{i=1}^n\left(\frac{X_i-\mu}{\sigma}\right)^2\sim \chi^2(n)$</p><p>由概率$P\left(\chi_{\alpha/2}^2(n)&lt;\frac{\sum^n_{i=1}(X_i-\mu)^2}{\sigma^2}&lt;\chi_{1-\alpha/2}^2(n)\right)=1-\alpha$</p><p>$\sigma^2的置信度为1-\alpha置信区间为:\\\left(\frac{\sum_{i=1}^n(X_i-\mu)^2}{\chi_{1-\alpha/2}^2(n)},\frac{\sum_{i=1}^n(X_i-\mu)^2}{\chi_{\alpha/2}^2(n)}\right)$</p><p>$\chi_{\alpha/2}^2(n)从下文卡方分布表中得到$</p><h4 id="4-由-mu-未知时-方差-sigma-2-的置信区间"><a href="#4-由-mu-未知时-方差-sigma-2-的置信区间" class="headerlink" title="(4)由$\mu$未知时,方差$\sigma^2$的置信区间"></a>(4)由$\mu$未知时,方差$\sigma^2$的置信区间</h4><p>$\frac{(n-1)S^2}{\sigma^2}\sim \chi^2(n-1)$</p><p>$P(\chi_{\alpha/2}^2&lt;\frac{(n-1)s^2}{\sigma^2}&lt;\chi_{1-\alpha/2}^2)=1-\alpha$</p><p>$\sigma^2的置信度为1-\alpha置信区间为:\\\left(\frac{(n-1)S^2}{\chi_{1-\alpha/2}^2(n-1)},\frac{(n-1)S^2}{\chi_{\alpha/2}^2(n-1)}\right)$</p><h3 id="单侧置信空间"><a href="#单侧置信空间" class="headerlink" title="单侧置信空间"></a>单侧置信空间</h3><p>$P(\theta&gt;\theta)=1-\alpha/P(\theta&lt;\theta)=1-\alpha$</p><p>$(-\infty,\bar \theta)或者(\underline \theta,+\infty)$为置信度$1-\alpha$的单侧置信空间</p><h2 id="分布表"><a href="#分布表" class="headerlink" title="分布表"></a>分布表</h2><p><img src="image-20241124145810223.png" alt="标准正态分布表"></p><p><img src="image-20241124150852368.png" alt="卡方分布表"></p><p><img src="72c3c6096138257fe8417c26946a591.png" alt="F检验临界值表alpha=0.05"></p><p><img src="image-20241124094936717.png" alt="F检验临界值表alpha=0.025"></p><p><img src="image-20241124095021691.png" alt="F检验临界值表alpha=0.01"></p><p><img src="image-20241124093640970.png" alt="T分布表"></p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-自然数和基数</title>
    <link href="/2024/11/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C%E5%9F%BA%E6%95%B0/"/>
    <url>/2024/11/22/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E8%87%AA%E7%84%B6%E6%95%B0%E5%92%8C%E5%9F%BA%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h1 id="自然数和基数"><a href="#自然数和基数" class="headerlink" title="自然数和基数"></a>自然数和基数</h1><p><strong>后继集合</strong>:对于任意集合A,其后继集合$A^+$定义为:$A^+=A\cup\{A\}$</p><p>$i)\emptyset^+=\{\emptyset\}$</p><p>$ii)\{\emptyset\}^+=\{\emptyset,\{\emptyset\}\}$</p><p>$iii)A\in A^+$</p><p>$iv)A\subseteq A^+$</p><p>$v)A^+\neq \emptyset$</p><h2 id="自然数系统"><a href="#自然数系统" class="headerlink" title="自然数系统"></a>自然数系统</h2><h2 id="冯诺依曼方案"><a href="#冯诺依曼方案" class="headerlink" title="冯诺依曼方案"></a>冯诺依曼方案</h2><script type="math/tex; mode=display">\begin{aligned}&0=\emptyset\\&1=0^+=\{\emptyset\}=\{0\}\\&2=1^+=\{\emptyset,\{\emptyset\}\}=\{0,1\}\\&...\\&n+1=n^+=...=\{0,1,...,n\}\end{aligned}</script><h3 id="自然数集合-归纳定义法"><a href="#自然数集合-归纳定义法" class="headerlink" title="自然数集合(归纳定义法)"></a>自然数集合(归纳定义法)</h3><script type="math/tex; mode=display">\begin{aligned}&i)0\in N,0=\emptyset\\&ii)n\in N,n^+\in N\\&iii)S\subseteq N满足\\&\ 1)0\in S\\&\ 2)如果n\in S,则n^+\in S\\&\ 则S=N\end{aligned}</script><h3 id="大小-小于"><a href="#大小-小于" class="headerlink" title="大小/小于"></a>大小/小于</h3><p>对每个自然数$n\in N$,皆有$n\in n^+$及$n\subseteq n^+$</p><p>若$m,n\in N$使得$m\in n$,则称m小于n,记为$m&lt;n$</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><p>$proof:\forall n\in N:\bigcup n^+=n$</p><script type="math/tex; mode=display">\begin{aligned}&S=\{n|n\in N且\bigcup n^+=n\}\\&1)0\in S:0\in N且\bigcup\{\emptyset\}=\emptyset=0\\&2)若n\in S,则\bigcup n^+=n且n\in N\\&\therefore n^+\in N,\bigcup((n^+)^+)=\bigcup(n^+\cup\{n^+\})\\&=(\bigcup n^+)\cup(\bigcup\{n^+\})=n\cup n^+=n^+\\&\therefore n^+\in S\end{aligned}</script><h2 id="皮亚诺公理"><a href="#皮亚诺公理" class="headerlink" title="皮亚诺公理"></a>皮亚诺公理</h2><script type="math/tex; mode=display">\begin{aligned}&1)0\in N\\&2)n\in N,则有唯一的后继n^+\in N\\&3)n\in N,则n^+\neq 0\\&4)n,m\in N且n^+=m^+,则n=m\\&5)若S\subseteq N满足i)0\in S,ii)如果n\in S,则n^+\in S\\&则S=n\end{aligned}</script><h2 id="第一数学归纳法"><a href="#第一数学归纳法" class="headerlink" title="第一数学归纳法"></a>第一数学归纳法</h2><p>P(n)是自然数集合上的性质(或<strong>谓词</strong>),如果能证明</p><p>1)$P(0)$是真</p><p>2)对任何$n\in N$,$P(n)\Rightarrow P(n^+)$</p><p>则对所有$n\in N$,P(n)为真</p><p>即:</p><p>$P(0)\wedge (\forall n)(P(n)\rightarrow P(n+1))\Rightarrow (\forall n)P(n)$</p><script type="math/tex; mode=display">\begin{aligned}&S=\{n|n\in N,P(n_0+n)为真\}\\&0\in  S:0\in N且P(n_0+0)为真\\&若n\in S,则n\in N且P(n+n_0)为真\\&因为:n_0+n^+=(n_0+n)^+\\&因此:P(n^++n_0)为真,n^+\in S\end{aligned}</script><h2 id="第二数学归纳法-强归纳定理"><a href="#第二数学归纳法-强归纳定理" class="headerlink" title="第二数学归纳法(强归纳定理)"></a>第二数学归纳法(强归纳定理)</h2><p>$\forall n\in N,令\overline{N_n}=N-N_n=\{n,n+1,n+2,…\}$</p><p>$(\forall n)((\forall k)(k&lt;n\rightarrow P(k))\rightarrow P(n))\Rightarrow (\forall x)P(x)$</p><script type="math/tex; mode=display">\begin{aligned}&Q(n):若k\in N且n_0\leq k\leq n,则P(k)为真\\&Q(n)满足第一归纳法\\&显然Q(n_0)即为真,所以Q(n_0)为真\\&假设对任意n\in\overline{ N_{n_0} },Q(n)为真\\&若k\in N且n_0\leq k\leq n,则P(k)为真\\&因此,当k\in N且n_0< n^+时,P(k)也皆为真\\&P(n^+)为真,表明Q(n^+)为真\\&根据第一归纳法,对任意n\in \overline{ N_{n_0} },P(n)为真\end{aligned}</script><p><img src="image-20241122095313913.png" alt="强归纳定理"></p><h2 id="二重归纳原理"><a href="#二重归纳原理" class="headerlink" title="二重归纳原理"></a>二重归纳原理</h2><p>设$i_0,j_0\in N$,假定对任意自然数$i\geq i_0$及$j\geq j_0$皆有一个命题$P(i,j)$满足:</p><ol><li>$P(i_0,j_0)$真</li><li>对任意自然数$k\geq i_0,l\geq j_0$,若$P(k,l)真,则P(k+1,l)和P(k,l+1)$皆真</li></ol><p>则对任意自然数$i\geq i_0,j\geq j_0,P(i,j)$皆真</p><h1 id="基数"><a href="#基数" class="headerlink" title="基数"></a>基数</h1><h2 id="等势"><a href="#等势" class="headerlink" title="等势"></a>等势</h2><p>从A到B的双射,则称A和B相等/等势,记为$A\sim B$</p><p>无穷集合可以与它本身的真子集<strong>等势</strong></p><h3 id="鸽笼原理"><a href="#鸽笼原理" class="headerlink" title="鸽笼原理"></a>鸽笼原理</h3><p>任何有限集都不能与它的真子集对等</p><p><strong>任何与自身真子集等势的集合均是无穷集合</strong></p><h2 id="集合的基数"><a href="#集合的基数" class="headerlink" title="集合的基数"></a>集合的基数</h2><p>$设n\in N,A\sim n,则\sharp(A)=n$</p><p>无限集的基数:$\sharp(N)=\aleph_0$</p><p><strong>任意两个基数都可以比较大小</strong></p><h2 id="相等和大小顺序"><a href="#相等和大小顺序" class="headerlink" title="相等和大小顺序"></a>相等和大小顺序</h2><ol><li>如果$A\sim B$,就称A和B的基数相等,记作$\sharp(A)=\sharp(B)$</li><li>如果存在从A到B的单射,就称A的基数小于等于B的基数,记作$\sharp(A)\leq\sharp(B)$</li></ol><h2 id="无穷集的等价条件"><a href="#无穷集的等价条件" class="headerlink" title="无穷集的等价条件"></a>无穷集的等价条件</h2><p>以下三个条件等价:</p><ol><li>A为无穷集</li><li>A有可数无穷子集</li><li>A有与它对等的真子集</li></ol><script type="math/tex; mode=display">\begin{aligned}&1)\rightarrow 2)\\&设A为无限集,取a_0\in A,对每个n\in N,若\{a_0,a_1,\dots,a_n\}\subseteq A,\\&则必有a_{n+1}\in A且a_{n+1}\notin \{a_1,a_2,\dots,a_n\},因此,B=\{a_i|i\in N\}即为A的可列子集\\&2)\rightarrow 3)\\&A无穷,\therefore A\neq \emptyset\\&任取a_1\in A\\&再取a_2\in A-\{a_1\}\\&\dots\\&C=\{a_1,a_2\dots,a_n,\dots\}\\&A=C\cup (A-C)\\&A^`=(C-\{a_1\})\cup(A-C)\\&设f:A\rightarrow A^`\\&f(x)=\begin{cases}x,x\in A-C\\a_{i+1},x=a_i\end{cases}\end{aligned}</script><h2 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h2><ul><li>任何无穷集合必含有<strong>可数无穷子集</strong></li><li>实数集合R是<strong>不可数的</strong></li><li>对每个集合A,皆有$\sharp(A)&lt;\sharp(\rho(A))$</li><li>$\sharp(R\times R)=\aleph$</li></ul><h2 id="例"><a href="#例" class="headerlink" title="例"></a>例</h2><blockquote><p>取52个整数,必有两数之和或两数之差,被100整除</p></blockquote><script type="math/tex; mode=display">\begin{aligned}&在51个抽屉:\{0\},\{1,99\},\{2,98\},\dots\{49,1\},\{50\}中选取52个整数\\&必有两个整数r_a\mod 100,r_b\mod 100正好落在同一抽屉中\\&a)r_a=r_b,则(r_a-r_b)|\ 100\\&b)r_a\neq r_b,则(r_a+r_b)|\ 100\end{aligned}</script><blockquote><p>A=[0,1],B=(0,1),构造A到B的双射</p></blockquote><script type="math/tex; mode=display">C=\{a_0,a_1,a_2,\dots a_i,\dots\}\\(0,1)=C\cup\{(0,1)-C\}\\C^`=(C-\{a_0,a_1\})\cup\{(0,1)-C\}\\f:C\rightarrow C^`\cup\{0,1\}\\f(x)=\begin{cases}a_0,x=0\\a_1,x=1\\a_{i+2},x=a_{i+1}\\x,其他\\\end{cases}\\</script><blockquote><p>$\sharp(R)=\aleph$</p></blockquote><script type="math/tex; mode=display">\begin{aligned}&f:\mathscr P(N)\rightarrow [0,1]\\&f(A)=\sum^\infty_{i=0}\frac{\chi_A(i)}{2^{i+1} },A\subseteq N\\&f是满射,所以\sharp([0,1])\leq \aleph\\&g:\mathscr P(n)\rightarrow [0,1]\\&g(A)=\sum^\infty_{i=0}\frac{\chi_A(i)}{3^{i+1} },A\subseteq N\\&若A,B\subseteq N且A\neq B,A\oplus B\neq \emptyset,i_0是A\oplus B的最小元素\\&则\left|g(A)-g(B)\right|\geq \frac{1}{3^{i_0+1} }-\sum^{\infty}_{j=2}\frac{1}{3^{i_o+j} }>0\\&\therefore g(A)\neq g(B)\\&因此g是内射\\&\aleph\leq \sharp([0,1])\\&所以\sharp([0,1])=\aleph,但\sharp([0,1])=\sharp(R)\\&\sharp(R)=\aleph\end{aligned}</script><blockquote><p>设集合$S=\{x|x\in(0,1)\}$</p></blockquote><script type="math/tex; mode=display">\begin{aligned}&假设S可数,把S的元素排列成无穷序列S_0,S_1,\dots,S_n,\dots\\&已知S_i是0和1之间的实数,任何小于1的正数s可以表示为:\\&s=0.y_1y_2y_3\dots\\&这里y_i\in\{0,1,2,\dots,9\}\\&S_0=0.a_{11}a_{12}a_{13}\cdots\\&S_1=0.a_{21}a_{22}a_{23}\cdots\\&构造一个实数r=0.b_1b_2b_3\cdots b_n\cdots\\&若a_{jj}\neq 1,则取b_j=1;若a_{jj}=1,则取b_j=2\\&r\notin S,导致矛盾,因此S是不可数的\\&因为R和S是等势的,R也是不可数的\\\end{aligned}</script><p>与集合R等势的集合的基数,用$\aleph$来表示,并称为连续统的势,#$\rho(N)$记为$\aleph$</p><blockquote><h1 id="R-times-R-aleph"><a href="#R-times-R-aleph" class="headerlink" title="$(R\times R)=\aleph$"></a>$(R\times R)=\aleph$</h1></blockquote><script type="math/tex; mode=display">\begin{aligned}&证明:即证\text{ \sharp}([0,1)\times[0,1))= \text{ \sharp}([0,1))\\&不妨设x=0.x_1x_2\dots\\&y=y_1y_2\dots\\&f(x,y)=0.x_1y_1x_2y_2\dots\\&若存在f(x',y')=0.x_1'y_1'x_2'y_2'\dots=f(x,y),\\&则x_1=x_1',y_1=y_1',\dots,故f为单射\\&对于任意z=z_1z_2z_3\dots\in[0,1)\\&存在x=z_1z_3\dots z_{2i+1}\dots,y=z_2z_4\dots z_{2i}\dots,\\&使得f(x,y)=z\\&因此f是满射\\&所以\sharp([0,1)\times[0,1))=\sharp([0,1))\\\end{aligned}</script><blockquote><p>$Q_+\sim N_+$</p></blockquote><p><img src="v2-45abdc94da8b0be1dcffc08eb0ba8c41_1440w.png" alt="正有理数到正整数"></p><h2 id="“小于”的定义"><a href="#“小于”的定义" class="headerlink" title="“小于”的定义"></a>“小于”的定义</h2><p>若#A=$\alpha$,#B=$\beta$,且A$\prec$B,则称$\alpha$小于$\beta$,记为$\alpha&lt;\beta$</p>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>样本及抽样分布</title>
    <link href="/2024/11/17/%E6%A0%B7%E6%9C%AC%E5%8F%8A%E6%8A%BD%E6%A0%B7%E5%88%86%E5%B8%83/"/>
    <url>/2024/11/17/%E6%A0%B7%E6%9C%AC%E5%8F%8A%E6%8A%BD%E6%A0%B7%E5%88%86%E5%B8%83/</url>
    
    <content type="html"><![CDATA[<h1 id="样本及抽样分布"><a href="#样本及抽样分布" class="headerlink" title="样本及抽样分布"></a>样本及抽样分布</h1><h2 id="随机样本"><a href="#随机样本" class="headerlink" title="随机样本"></a>随机样本</h2><p>在相同条件下对总体X进行n次重复的,独立的观察,将n次观察结果按试验的次序记为$X_1,X_2,…,X_n$,成为来自总体$X$的一个简单随机样本,n称为这个样本的容量</p><p>$(X_1,X_2,…,X_n)$的分布函数:</p><p>$F^*(x_1,x_2,…,x_n)=\prod\limits_{i=1}^nF(x_i)$</p><p>$(X_1,X_2,…,X_n)$的概率密度:</p><p>$f^*(x_1,x_2,…,x_n)=\prod\limits_{i=1}^nf(x_i)$</p><h2 id="直方图和箱线图"><a href="#直方图和箱线图" class="headerlink" title="直方图和箱线图"></a>直方图和箱线图</h2><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><ul><li>高为$\frac{f_i}{n\Delta}$</li></ul><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><p>样本p分位数$x_p$:</p><ol><li>至少有$np$个观察值小于或等于$x_p$</li><li>至少有$np(1-p)$个观察值大于或等于$x_p$</li></ol><p>$x_p=\begin{cases}x_{[np]+1},np不是整数\\\frac{1}{2}[x_{(np)}+x_{(np+1)}],np是整数\end{cases}$</p><p>$p=0.5\rightarrow$<strong>样本中位数</strong></p><p>$p=0.25\rightarrow$<strong>样本第一四分位数</strong></p><p>$p=0.75\rightarrow$<strong>样本第三四分位数</strong></p><h3 id="疑似异常值"><a href="#疑似异常值" class="headerlink" title="疑似异常值"></a>疑似异常值</h3><p>$Q_1-Q_2\mathop =\limits^{记为}IQR$</p><p>$若数据小于Q_1-1.5IQR或者大于Q_2+1.5IQR,就认为它是疑似异常值$</p><h2 id="抽样分布"><a href="#抽样分布" class="headerlink" title="抽样分布"></a>抽样分布</h2><p>$X_1,X_2,\dots,X_n$是来自总体X的一个样本,$g(X_1,X_2,\dots,X_n)$是$X_1,X_2,\dots,X_n$的函数,若$g$中不含未知参数,则称$g(X_1,X_2,\dots,X_n)$是一<strong>统计量</strong></p><ul><li>样本平均值$\bar{X}=\frac{1}{n}\sum\limits_{i=1}^nX_i$</li><li>样本方差$S^2=\frac{1}{n-1}\sum\limits_{i=1}^n(X_i-\bar X)^2$</li><li>样本k阶原点矩$A_k=\frac{1}{n}\sum\limits^n_{i=1}X_i^k,k=1,2,\dots$</li></ul><p>$S^2$称为无偏估计(unbiased estimator)</p><p><strong>无偏估计</strong>:估计出来的参数的数学期望等于被估计的参数的真实值.</p><blockquote><p>样本的均值a是否为无偏估计$\mu$?</p></blockquote><p>$E(a)=\frac{1}{n}E(\sum_{i=1}^n x_i)=\frac{1}{n}\sum^n_{i=1}E(x_i)=\frac{1}{n}\sum^n_{i=1}\mu=\mu$</p><blockquote><p>样本的方差$b=\frac{1}{n}\sum^n_{i=1}(X_i-\mu)^2$是否是无偏估计?</p></blockquote><p>$E(b)=E(\frac{1}{n}\sum^n_{i=1}(X_i-\mu)^2)=<br>\frac{1}{n}\sum^n_{i=1}E(X_i)-\frac{1}{n}E([2a\cdot n\cdot a])+E(a^2)=E(X_i^2)-E(a^2)=E^2(X)+D(X)-[E^2(a)+D(a)]=\mu^2+\sigma^2-\mu^2-\frac{1}{n}\sigma^2=\frac{n-1}{n}\sigma^2$</p><h3 id="经验分布函数"><a href="#经验分布函数" class="headerlink" title="经验分布函数"></a>经验分布函数</h3><p>$S(x)表示X_1,X_2,…,X_n中不大于x的随机变量的个数$</p><p>$F_n(x)=\frac{1}{n}S(x),-\infty&lt;x&lt;\infty$</p><p>$F_n(x)=\begin{cases}0,x&lt;x_{(1)},\\\frac{k}{n},x_{(k)}\leq x&lt;x_{(k+1)},\\1,x\geq x_{(n)},\end{cases}$</p><p>可证:$P\{\lim\limits_{n\rightarrow \infty}\sup\limits_{-\infty&lt;x&lt;\infty}|F_x(x)-F(x)|=0\}=1$</p><h3 id="chi-2-分布"><a href="#chi-2-分布" class="headerlink" title="$\chi^2$分布"></a>$\chi^2$分布</h3><h4 id="分布"><a href="#分布" class="headerlink" title="分布"></a>分布</h4><p>假设$X_1,X_2,…,X_n$是来自总体$N(0,1)$的样本且都服从标准正态分布$N(0,1)$</p><p>则称统计量$\chi^2=X_1^2+X_2^2+…+X^2_n\sim\chi^2(n)$</p><p>$f(x)=\begin{cases}\frac{1}{ 2^{\frac{n}{2} }\Gamma(\frac{n}{2}) }e^{-\frac{x}{2} } x^{ \frac{n}{2}-1},x&gt;0\\0,x\leq 0\end{cases}$</p><p>其中$\Gamma(x)=\int^{+\infty}_0t^{x-1}e^{-t}dt$</p><p>在$x&gt;0$时收敛,称为$\Gamma$函数</p><h4 id="分布性质"><a href="#分布性质" class="headerlink" title="分布性质"></a>分布性质</h4><ul><li>$E(\chi^2(x))=n,D(\chi^2(n))=2n$</li><li>$若X_1= \chi^2(n_1),X_2=\chi^2(n_2),X_1,X_2相互独立,X_1+X_2\sim \chi^2(n_1+n_2)$</li><li>$\chi^2(x)$的$\alpha$分位数:$n&gt;45时,\chi^2_\alpha(n)\approx\frac{1}{2}(z_\alpha+\sqrt{2n-1})^2$</li></ul><h3 id="t-分布"><a href="#t-分布" class="headerlink" title="$t$分布"></a>$t$分布</h3><h4 id="分布-1"><a href="#分布-1" class="headerlink" title="分布"></a>分布</h4><p>$X\sim N(0,1),Y\sim \chi^2(n),X,Y相互独立$</p><p>$T=\frac{X}{\sqrt{Y/N} }$,则称T所服从的分布称为自由度为$n$的$T$分布</p><p>其密度函数:</p><p>$f(t)=\frac{\Gamma(\frac{n+1}{2})}{\sqrt{n\pi}\Gamma(\frac{n}{2})}(1+\frac{t^2}{n})^{-\frac{n+1}{2} },-\infty&lt;t&lt;\infty$</p><h4 id="分布性质-1"><a href="#分布性质-1" class="headerlink" title="分布性质"></a>分布性质</h4><ul><li>$n\rightarrow \infty,f_n(t)\rightarrow \phi(t)=\frac{1}{\sqrt{2\pi} }e^{-\frac{t^2}{2} }$</li><li>$f_n(t)$是偶函数</li></ul><h3 id="F-分布"><a href="#F-分布" class="headerlink" title="$F$分布"></a>$F$分布</h3><p>$f(t,n,m)=\begin{cases}\frac{\Gamma(\frac{n+m}{2})}{\Gamma(\frac{n}{2})\Gamma(\frac{m}{2})}(\frac{n}{m})^{\frac{n}{2} }t^{\frac{n}{2}-1}(1+\frac{n}{m}t)^{-\frac{n+m}{2} },t&gt;0\\0,t\leq 0\end{cases}$</p><h4 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h4><ul><li>$P(F\leq F_\alpha(n,m))=\alpha$</li><li>$\frac{1}{F}\sim F(m,n)$</li></ul><p>$F_{1-\alpha}(n,m)=\frac{1}{F_\alpha(m,n)}$</p><h2 id="正态总体的样本均值与样本方差的分布"><a href="#正态总体的样本均值与样本方差的分布" class="headerlink" title="正态总体的样本均值与样本方差的分布"></a>正态总体的样本均值与样本方差的分布</h2><p>$\bar X,S^2$分别为样本均值,样本方差</p><p>$E(\bar X)=\mu,D(\bar X)=\frac{\sigma^2}{n}{},E(S^2)=\sigma^2$</p><p>$\bar X\sim N(\mu, \frac{\sigma^2}{n})$</p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>序列模型</title>
    <link href="/2024/11/14/%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/"/>
    <url>/2024/11/14/%E5%BA%8F%E5%88%97%E6%A8%A1%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h2 id="统计工具"><a href="#统计工具" class="headerlink" title="统计工具"></a>统计工具</h2><ul><li>在时间$t$观察到$x_t$,得到T个<strong>不独立</strong>的随机变量</li></ul><p>$(x_1,…,x_T)\sim p(\tt x)$</p><p>$p({\bf x})=p(x_1)\cdot p(x_2|x_1)\cdot p(x_3|x_1,x_2)\cdot\dots\cdotp(x_T|x_1,…,x_{T-1})$</p><h2 id="序列模型"><a href="#序列模型" class="headerlink" title="序列模型"></a>序列模型</h2><ul><li>对条件概率建模</li></ul><p>$p(x_t|x_1,…,x_{t-1})=p(x_t|f(x_1,…,x_{t-1}))$</p><p>对见过的数据建模,也称<strong>自回归模型</strong></p><h2 id="马尔科夫假设"><a href="#马尔科夫假设" class="headerlink" title="马尔科夫假设"></a>马尔科夫假设</h2><ul><li>当前之和最近少数数据相关,从而简化模型</li></ul><p>$p(x_t|x_1,…,x_{t-1})=p(x_t|x_{y-\tau},…,x_{t-1})=p(x_t|f(x_{t-\tau,..,x_{t-1} }))$</p><h2 id="潜变量模型"><a href="#潜变量模型" class="headerlink" title="潜变量模型"></a>潜变量模型</h2><ul><li>使用潜变量来概括历史信息</li></ul><p>$h_t=f(x_1,…,x_{t-1})\\x_t=p(x_t|h_t)$</p><h2 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h2>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Batch Normalization</title>
    <link href="/2024/11/14/Batch%20Normalization/"/>
    <url>/2024/11/14/Batch%20Normalization/</url>
    
    <content type="html"><![CDATA[<h1 id="批量归一化层"><a href="#批量归一化层" class="headerlink" title="批量归一化层"></a>批量归一化层</h1><h2 id="公式"><a href="#公式" class="headerlink" title="公式"></a>公式</h2><p>$\mu_B=\frac{1}{|B|} \mathop \Sigma \limits_{i\in B}x_i$</p><p>$\sigma_B^2=\frac{1}{ |B| } \mathop \Sigma\limits_{i \in B}(x_i- \mu_B )^2+\epsilon$</p><p>再做额外调整:</p><p>$x_{ i+1 }=\gamma\frac{x_i- \mu_B }{ \sigma_B}+\beta$</p><ul><li>可学习的参数为$\gamma,\beta$</li><li>作用在:<ul><li>全连接层和卷积层输出上,激活函数前</li><li>全连接层和卷积层输入上</li></ul></li><li>对全连接层,作用在特征维</li><li>对卷积层,作用在通道维</li></ul><h2 id="Code"><a href="#Code" class="headerlink" title="Code"></a>Code</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">batchNormalization</span>(<span class="hljs-params">X, gamma, beta, moving_mean, moving_var, eps, momentum</span>):<br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> torch.is_grad_enabled():<br>        X_hat = (X - moving_mean) / torch.sqrt(moving_var + eps)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">assert</span> <span class="hljs-built_in">len</span>(X.shape) <span class="hljs-keyword">in</span> (<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(X.shape) == <span class="hljs-number">2</span>:<br>            mean = X.mean(dim=<span class="hljs-number">0</span>)<br>            var = ((X - mean)**<span class="hljs-number">2</span>).mean(dim=<span class="hljs-number">0</span>)<br>        <span class="hljs-keyword">else</span>:<br>            mean = X.mean(dim=(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>), keepdims=<span class="hljs-literal">True</span>)<br>            var = ((X - mean)**<span class="hljs-number">2</span>).mean(dim=(<span class="hljs-number">0</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>),keepdim=<span class="hljs-literal">True</span>)<br>        X_hat = (X - mean) / torch.sqrt(var + eps)<br>        moving_mean = momentum * moving_mean + (<span class="hljs-number">1</span> - momentum) * mean<br>        moving_var = momentum * moving_var + (<span class="hljs-number">1</span> - momentum) * var<br>    Y=gamma * X_hat + beta<br>    <span class="hljs-keyword">return</span> Y, moving_mean, moving_var.data<br></code></pre></td></tr></table></figure><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><ul><li>起初用来减少内部变量转移</li><li>后续指出可能是通过在每个小批量里加入噪音控制模型复杂度</li><li>不用和丢弃法混合使用</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><ul><li>可以加速收敛速度,一般不改变模型精度</li><li>使用真实数据时,第一步是标准化输入特征(使其均值为0,方差为1),这种标准化可以很好地与优化器配合使用</li></ul><h2 id="BatchNorm和LayerNorm的区别"><a href="#BatchNorm和LayerNorm的区别" class="headerlink" title="BatchNorm和LayerNorm的区别"></a>BatchNorm和LayerNorm的区别</h2><p>以<code>BatchNorm1d</code>为例:</p><p>$y = \frac{x - \mathrm{E}[x]}{\sqrt{\mathrm{Var}[x] + \epsilon} } * \gamma + \beta$</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-built_in">input</span> = torch.randn(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) <span class="hljs-comment"># 1:batch, 2:feature, 3:sequence length</span><br>bn1 = nn.BatchNorm1D(<span class="hljs-number">2</span>) <span class="hljs-comment"># 选取特征为2</span><br><span class="hljs-built_in">print</span>(bn1(<span class="hljs-built_in">input</span>))<br><br><span class="hljs-comment">#tensor([[[ 0.9848, -1.3714,  0.3865],</span><br><span class="hljs-comment">#         [ 1.2078, -1.2410,  0.0332]]], grad_fn=&lt;NativeBatchNormBackward0&gt;)</span><br></code></pre></td></tr></table></figure><p>这可以等同于以下操作:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python">a1 = (<span class="hljs-built_in">input</span>[:,<span class="hljs-number">0</span>,:] - <span class="hljs-built_in">input</span>[:,<span class="hljs-number">0</span>,:].mean()) / torch.sqrt(<span class="hljs-built_in">input</span>[:,<span class="hljs-number">0</span>,:].var(unbiased=<span class="hljs-literal">False</span>) + <span class="hljs-number">1e-5</span>)<br>a2 = (<span class="hljs-built_in">input</span>[:,<span class="hljs-number">1</span>,:] - <span class="hljs-built_in">input</span>[:,<span class="hljs-number">1</span>,:].mean()) / torch.sqrt(<span class="hljs-built_in">input</span>[:,<span class="hljs-number">1</span>,:].var(unbiased=<span class="hljs-literal">False</span>) + <span class="hljs-number">1e-5</span>)<br><br>torch.cat((a1, a2), dim=<span class="hljs-number">0</span>).reshape(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>) - bn1(<span class="hljs-built_in">input</span>) &lt; <span class="hljs-number">1e-5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br><span class="hljs-string">a1 = (input[:,0,:] - input[:,0,:].mean()) / torch.sqrt(input[:,0,:].var(unbiased=False) + 1e-5)</span><br><span class="hljs-string">a2 = (input[:,1,:] - input[:,1,:].mean()) / torch.sqrt(input[:,1,:].var(unbiased=False) + 1e-5)</span><br><span class="hljs-string"># 比较两种方法</span><br><span class="hljs-string">torch.cat((a1, a2), dim=0).reshape(1,2,3) - bn1(input) &lt; 1e-5</span><br><span class="hljs-string">&#x27;&#x27;&#x27;</span><br></code></pre></td></tr></table></figure><p><code>LayerNorm</code></p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P6-CPU设计文档</title>
    <link href="/2024/11/13/P6-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/11/13/P6-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="P6-CPU设计文档"><a href="#P6-CPU设计文档" class="headerlink" title="P6-CPU设计文档"></a>P6-CPU设计文档</h1><h2 id="流水线架构"><a href="#流水线架构" class="headerlink" title="流水线架构"></a>流水线架构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> mips.v<br><span class="hljs-bullet">-</span> IF.v #取指阶段<br><span class="hljs-bullet">-</span> pc.v<br><span class="hljs-bullet">-</span> im.v<br><span class="hljs-bullet">-</span> IF<span class="hljs-emphasis">_ID.v #IF与ID之间的寄存器</span><br><span class="hljs-emphasis">- ID.v #译码阶段</span><br><span class="hljs-emphasis">- ctrl.v #采用分布式译码</span><br><span class="hljs-emphasis">- grf.v # 寄存器堆</span><br><span class="hljs-emphasis">- ext.v # 立即数扩展</span><br><span class="hljs-emphasis">- cmp.v # 比较2个数</span><br><span class="hljs-emphasis">- npc.v # 为B类/J计算下条地址</span><br><span class="hljs-emphasis">- ID_</span>EX.v #ID与EX之间的寄存器<br><span class="hljs-bullet">-</span> EX.v  #执行阶段<br><span class="hljs-bullet">-</span> ctrl.v #采用分布式译码<br><span class="hljs-bullet">-</span> alu.v<br><span class="hljs-bullet">-</span> EX<span class="hljs-emphasis">_MEM.v #EX与MEM之间的寄存器</span><br><span class="hljs-emphasis">- MEM.v #存储阶段</span><br><span class="hljs-emphasis">- ctrl.v #采用分布式译码</span><br><span class="hljs-emphasis">- dm.v</span><br><span class="hljs-emphasis">- MEM_</span>WB.v #MEM与WB之间的寄存器<br><span class="hljs-bullet">-</span> HAZARD<span class="hljs-emphasis">_CTRL.v #冒险控制模块</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><h3 id="IF"><a href="#IF" class="headerlink" title="IF"></a>IF</h3><h4 id="顶层"><a href="#顶层" class="headerlink" title="顶层"></a>顶层</h4><blockquote><p>Instruction Fetch阶段,从指令寄存器中读取指令</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr><td>enablePC</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr><td>IF_PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr></tbody></table></div><h4 id="PC部件"><a href="#PC部件" class="headerlink" title="PC部件"></a>PC部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr><td>PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr></tbody></table></div><h3 id="IF-ID"><a href="#IF-ID" class="headerlink" title="IF_ID"></a>IF_ID</h3><blockquote><p>在时钟上升沿将IF_PC,IF_instr的值传递给ID_PC,ID_instr</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>enable</td><td>in</td><td></td><td></td></tr><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF传入PC地址</td></tr><tr><td>IF_instr</td><td>in</td><td>[31:0]</td><td>IF传入指令</td></tr><tr><td>ID_PC</td><td>out</td><td>[31:0]</td><td>ID接收PC地址</td></tr><tr><td>ID_instr</td><td>out</td><td>[31:0]</td><td>IF接收指令</td></tr></tbody></table></div><h3 id="ID"><a href="#ID" class="headerlink" title="ID"></a>ID</h3><blockquote><p>Instruction Decode阶段</p></blockquote><h4 id="顶层-1"><a href="#顶层-1" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF区的PC,用于正常的地址+4操作</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td>ID区的PC</td></tr><tr><td>ID_instr</td><td>in</td><td>[31:0]</td><td>ID区的指令</td></tr><tr><td>ID_RD1_forward</td><td>in</td><td>[31:0]</td><td>转发的Data1</td></tr><tr><td>ID_RD2_forward</td><td>in</td><td>[31:0]</td><td>转发的Data2</td></tr><tr><td>WB_WD</td><td>in</td><td>[31:0]</td><td>写入数据,来自于WB阶段</td></tr><tr><td>WB_A3</td><td>in</td><td>[31:0]</td><td>写入寄存器地址,来自于WB阶段</td></tr><tr><td>WB_PC</td><td>in</td><td>[31:0]</td><td>写入数据对应PC地址,传递给$display语句,作为显示,来自于WB阶段</td></tr><tr><td>ID_RD1</td><td>out</td><td>[31:0]</td><td>ID输出rs寄存器读出值</td></tr><tr><td>ID_RD2</td><td>out</td><td>[31:0]</td><td>ID输出rt寄存器读出值</td></tr><tr><td>ID_IMM32</td><td>out</td><td>[31:0]</td><td>ID输出经过位扩展的立即数</td></tr><tr><td>ID_A3</td><td>out</td><td>[4:0]</td><td>ID阶段的A3,向后传递用</td></tr><tr><td>ID_WD</td><td>out</td><td>[31:0]</td><td>ID阶段的写入数据,向后传递</td></tr><tr><td>NPC</td><td>out</td><td>[31:0]</td><td>ID阶段(内部NPC模块)计算的下一个地址</td></tr><tr><td>ID_A1_USE</td><td>out</td><td>[1:0]</td><td>ID阶段rs寄存器的$T_{USE}$</td></tr><tr><td>ID_A2_USE</td><td>out</td><td>[1:0]</td><td>ID阶段rt寄存器的$T_{USE}$</td></tr><tr><td>ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr></tbody></table></div><h4 id="EXT部件"><a href="#EXT部件" class="headerlink" title="EXT部件"></a>EXT部件</h4><blockquote><p>立即数扩展</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>imm16</td><td>in</td><td>[15:0]</td><td>输入的16位立即数</td></tr><tr><td>ExtControl</td><td>in</td><td></td><td>决定零扩展还是符号扩展</td></tr><tr><td>imm32</td><td>out</td><td>[31:0]</td><td>输出的为扩展后的32位立即数</td></tr></tbody></table></div><h4 id="CMP部件"><a href="#CMP部件" class="headerlink" title="CMP部件"></a>CMP部件</h4><blockquote><p>判断两个输入(从寄存器取出来的两个值)是否相等,输出zero,用于处理beq信号通路</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>A</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data1(RD1_forward)</td></tr><tr><td>B</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data2(RD2_forward)</td></tr><tr><td>CMPControl</td><td>in</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr><td>zero</td><td>out</td><td></td><td>若相等则输出1,否则输出0</td></tr></tbody></table></div><h4 id="CMPControl信号表"><a href="#CMPControl信号表" class="headerlink" title="CMPControl信号表"></a>CMPControl信号表</h4><div class="table-container"><table><thead><tr><th>指令</th><th>CMPControl</th></tr></thead><tbody><tr><td>beq</td><td>4’b0000</td></tr><tr><td>bgez</td><td>4’b0001</td></tr><tr><td>bgtz</td><td>4’b0010</td></tr><tr><td>blez</td><td>4’b0011</td></tr><tr><td>bltz</td><td>4’b0100</td></tr><tr><td>bne</td><td>4’b0101</td></tr></tbody></table></div><h4 id="NPC部件"><a href="#NPC部件" class="headerlink" title="NPC部件"></a>NPC部件</h4><blockquote><p>计算下一个PC地址</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF输出的PC</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_imm26</td><td>in</td><td>[25:0]</td><td></td></tr><tr><td>Jr_Reg_Data</td><td>in</td><td>[31:0]</td><td>Jr指定的寄存器的值</td></tr><tr><td>Branch</td><td>in</td><td></td><td>Branch信号(beq激活)</td></tr><tr><td>Jal</td><td>in</td><td></td><td>Jal信号(jal激活)</td></tr><tr><td>Jr</td><td>in</td><td></td><td>Jr信号(jr激活)</td></tr><tr><td>NPC</td><td>out</td><td>[31:0]</td><td>下一个PC地址</td></tr></tbody></table></div><h4 id="Control部件-共用"><a href="#Control部件-共用" class="headerlink" title="Control部件(共用)"></a>Control部件(共用)</h4><blockquote><p>控制信号生成部件,这里我们采用的是分布式译码,这里展示的共用Control部件在ID阶段被使用的端口</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:left">端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td style="text-align:left">instr</td><td>in</td><td>[31:0]</td><td>输入的指令</td></tr><tr><td style="text-align:left">zero</td><td>in</td><td></td><td>ID_RD1_forward与ID_RD2_forward是否相等</td></tr><tr><td style="text-align:left">Branch</td><td>out</td><td></td><td>Branch信号(beq激活)</td></tr><tr><td style="text-align:left">Jal</td><td>out</td><td></td><td>Jal信号(jal激活)</td></tr><tr><td style="text-align:left">Jr</td><td>out</td><td></td><td>Jr信号(jr激活)</td></tr><tr><td style="text-align:left">ExtControl</td><td>out</td><td></td><td>控制ext部件的信号</td></tr><tr><td style="text-align:left">Sel_ID_WD</td><td>out</td><td></td><td>与jal相关,若执行jal指令则为1,该信号为1时将Write Data(写入寄存器)指定为ID_PC+8</td></tr><tr><td style="text-align:left">ID_A3</td><td>out</td><td>[4:0]</td><td>解码阶段输出的写入寄存器地址</td></tr><tr><td style="text-align:left">ID_A1_USE</td><td>out</td><td>[1:0]</td><td>rs的$T_{USE}$</td></tr><tr><td style="text-align:left">ID_A2_USE</td><td>out</td><td>[1:0]</td><td>rt的$T_{USE}$</td></tr><tr><td style="text-align:left">CMPControl</td><td>out</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr><td style="text-align:left">ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr></tbody></table></div><h4 id="ID控制信号表"><a href="#ID控制信号表" class="headerlink" title="ID控制信号表"></a>ID控制信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>ExtControl</th><th>Sel_ID_WD</th><th>ID_A3</th><th>Branch</th><th>Jal</th><th>Jr</th></tr></thead><tbody><tr><td>ori</td><td>1(立即数零扩展)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>add</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>sub</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>lw</td><td>0(立即数符号扩展)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>sw</td><td>0(立即数符号扩展)</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>beq</td><td>0(立即数符号扩展)</td><td>0</td><td>$0</td><td>1 if zero == 1 else 0</td><td></td><td></td></tr><tr><td>lui</td><td>0(立即数符号扩展)(其实随意)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>jal</td><td>\</td><td>1(选择PC+8)</td><td>$31</td><td></td><td>1</td><td></td></tr><tr><td>jr</td><td>\</td><td>0</td><td>\</td><td></td><td></td><td>1</td></tr><tr><td>swc</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>bonall</td><td>0(立即数符号扩展)</td><td>1</td><td>31</td><td></td><td></td><td></td></tr><tr><td>lh</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>sh</td><td>0</td><td>0</td><td>\</td><td></td><td></td><td></td></tr><tr><td>lb</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>sb</td><td>0</td><td>0</td><td>\</td><td></td><td></td><td></td></tr><tr><td>and</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>or</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>slt</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>sltu</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>addi</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>andi</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr><td>mult</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>multu</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>div</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>divu</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>mflo</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>mfhi</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr><td>mtlo</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr><td>mthi</td><td>\</td><td>0</td><td>$0</td><td></td><td></td></tr></tbody></table></div><h4 id="T-USE-表"><a href="#T-USE-表" class="headerlink" title="$T_{USE}$表"></a>$T_{USE}$表</h4><div class="table-container"><table><thead><tr><th></th><th>ID_A1_USE</th><th>ID_A2_USE</th></tr></thead><tbody><tr><td>add</td><td>1</td><td>1</td></tr><tr><td>sub</td><td>1</td><td>1</td></tr><tr><td>ori</td><td>1</td><td>3(z)</td></tr><tr><td>lw</td><td>1</td><td>3(z)</td></tr><tr><td>sw</td><td>1</td><td>2</td></tr><tr><td>beq</td><td>0</td><td>0</td></tr><tr><td>lui</td><td>3(z)</td><td>3(z)</td></tr><tr><td>jal</td><td>3(z)</td><td>3(z)</td></tr><tr><td>jr</td><td>0</td><td>3(z)</td></tr><tr><td>swc</td><td>1</td><td>1</td></tr><tr><td>bonall</td><td>0</td><td>0</td></tr><tr><td>lb</td><td>1</td><td>3(z)</td></tr><tr><td>sb</td><td>1</td><td>2</td></tr><tr><td>lh</td><td>1</td><td>3(z)</td></tr><tr><td>sh</td><td>1</td><td>2</td></tr><tr><td>and</td><td>1</td><td>1</td></tr><tr><td>or</td><td>1</td><td>1</td></tr><tr><td>slt</td><td>1</td><td>1</td></tr><tr><td>sltu</td><td>1</td><td>1</td></tr><tr><td>addi</td><td>1</td><td>0</td></tr><tr><td>andi</td><td>1</td><td>0</td></tr><tr><td>mult</td><td>1</td><td>1</td></tr><tr><td>div</td><td>1</td><td>1</td></tr><tr><td>multu</td><td>1</td><td>1</td></tr><tr><td>divu</td><td>1</td><td>1</td></tr><tr><td>mflo</td><td>3(z)</td><td>3</td></tr><tr><td>mfhi</td><td>3</td><td>3</td></tr><tr><td>mtlo</td><td>1</td><td>3</td></tr><tr><td>mthi</td><td>1</td><td>3</td></tr></tbody></table></div><h4 id="GRF部件"><a href="#GRF部件" class="headerlink" title="GRF部件"></a>GRF部件</h4><blockquote><p>32个32bit寄存器组成的寄存器堆</p></blockquote><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>A1</td><td>in</td><td>[4:0]</td><td>A1读出寄存器地址</td></tr><tr><td>A2</td><td>in</td><td>[4:0]</td><td>A2读出寄存器地址</td></tr><tr><td>A3</td><td>in</td><td>[4:0]</td><td>A3写入寄存器地址</td></tr><tr><td>WD</td><td>in</td><td>[31:0]</td><td>写入数据</td></tr><tr><td>PC</td><td>in</td><td>[31:0]</td><td>当前PC($display用)</td></tr><tr><td>RD1</td><td>out</td><td>[31:0]</td><td>A1寄存器读出值</td></tr><tr><td>RD2</td><td>out</td><td>[31:0]</td><td>A2寄存器读出值</td></tr></tbody></table></div><h3 id="ID-EX"><a href="#ID-EX" class="headerlink" title="ID_EX"></a>ID_EX</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr><td>flush</td><td>in</td><td></td><td>冲洗信号,和reset作用相同</td></tr><tr><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD1</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD2</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_imm32</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ID_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>ID_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>EX_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD1</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD2</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_imm32</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>EX_WD</td><td>out</td><td>[31:0]</td></tr></tbody></table></div><h3 id="EX"><a href="#EX" class="headerlink" title="EX"></a>EX</h3><h4 id="顶层-2"><a href="#顶层-2" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段的指令</td></tr><tr><td>EX_imm32</td><td>in</td><td>[31:0]</td><td>32位扩展的立即数</td></tr><tr><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX阶段接收的写入寄存器堆的数据</td></tr><tr><td>EX_RD1_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A1值</td></tr><tr><td>EX_RD2_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A2值</td></tr><tr><td>EX_MEM_RES</td><td>out</td><td>[31:0]</td><td>传递ALU计算结果</td></tr><tr><td>EX_MEM_WD</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Write Data</td></tr><tr><td>EX_MEM_RD2</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Read Data2</td></tr><tr><td>EX_NEW</td><td>out</td><td>[1:0]</td><td>EX阶段的$T_{NEW}$</td></tr></tbody></table></div><h4 id="MULT-DIV部件"><a href="#MULT-DIV部件" class="headerlink" title="MULT_DIV部件"></a>MULT_DIV部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr><td>reset</td><td>in</td><td></td><td>重制信号</td></tr><tr><td>A</td><td>in</td><td>[31:0]</td><td>计算数A</td></tr><tr><td>B</td><td>in</td><td>[31:0]</td><td>计算数B</td></tr><tr><td>start</td><td>in</td><td></td><td>有效一个时钟周期,启动信号</td></tr><tr><td>MULT_DIV_OP</td><td>in</td><td>[2:0]</td><td>乘除模块计算方式</td></tr><tr><td>MFHI</td><td>in</td><td></td><td>mfhi信号</td></tr><tr><td>MFLO</td><td>in</td><td></td><td>mflo信号</td></tr><tr><td>busy</td><td>out</td><td></td><td>输出延迟信号</td></tr><tr><td>HI</td><td>out</td><td>[31:0]</td><td>$hi值</td></tr><tr><td>LO</td><td>out</td><td>[31:0]</td><td>$lo值</td></tr></tbody></table></div><h4 id="乘除槽相关信号表"><a href="#乘除槽相关信号表" class="headerlink" title="乘除槽相关信号表"></a>乘除槽相关信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>MULT_DIV_OP</th><th>MULT_DIV_START</th></tr></thead><tbody><tr><td>mult</td><td>`mult</td><td>1</td></tr><tr><td>multu</td><td>`multu</td><td>1</td></tr><tr><td>div</td><td>`div</td><td>1</td></tr><tr><td>divu</td><td>`divu</td><td>1</td></tr></tbody></table></div><h4 id="ALU部件"><a href="#ALU部件" class="headerlink" title="ALU部件"></a>ALU部件</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>SrcA</td><td>in</td><td>[31:0]</td><td>操作数A</td></tr><tr><td>SrcB</td><td>in</td><td>[31:0]</td><td>操作数B</td></tr><tr><td>ALUOp</td><td>in</td><td>[3:0]</td><td>计算方式</td></tr><tr><td>ALURes</td><td>out</td><td>[31:0]</td><td>ALU计算结果</td></tr></tbody></table></div><h4 id="Control部件-共用-1"><a href="#Control部件-共用-1" class="headerlink" title="Control部件(共用)"></a>Control部件(<em>共用</em>)</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>ALUOp</td><td>out</td><td>[3:0]</td><td>选择ALU操作方式</td></tr><tr><td>ALU_A_Sel</td><td>out</td><td></td><td>选择</td></tr><tr><td>ALU_B_Sel</td><td>out</td><td></td><td>选择32位立即数或者寄存器rt的值</td></tr><tr><td>WD_Sel</td><td>out</td><td></td><td>选择Write Data来源(1:ID阶段的PC+8,0:ALURes)</td></tr><tr><td>EX_NEW</td><td>out</td><td></td><td>当前EX阶段$T_{USE}$</td></tr><tr><td>MULT_DIV_OP</td><td>out</td><td></td><td>乘除模块计算方式</td></tr><tr><td>MULT_DIV _START</td><td>out</td><td></td><td>乘除模块开始信号</td></tr><tr><td>MTHI</td><td>out</td><td></td><td>mthi信号,下同理</td></tr><tr><td>MTLO</td><td>out</td><td></td><td></td></tr><tr><td>MFHI</td><td>out</td><td></td><td></td></tr><tr><td>MFLO</td><td>out</td><td></td></tr></tbody></table></div><h4 id="EX控制信号表"><a href="#EX控制信号表" class="headerlink" title="EX控制信号表"></a>EX控制信号表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>ALUOp</th><th>ALU_B_Sel</th><th>WD_Sel</th></tr></thead><tbody><tr><td>ori</td><td>`aluOr</td><td>1(选择立即数)</td><td>0(Write Data选择aluRes)</td></tr><tr><td>add</td><td>`aluAdd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>sub</td><td>`aluSub</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>beq</td><td>\</td><td>\</td><td>\</td></tr><tr><td>lw</td><td>`aluAdd</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>sw</td><td>`aluAdd</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>lui</td><td>`aluLui</td><td>1(选择立即数)</td><td>0</td></tr><tr><td>jal</td><td>\</td><td>\</td><td>1(Write Data选择ID传递值)</td></tr><tr><td>jr</td><td>\</td><td>\</td><td>\</td></tr><tr><td>swc</td><td>`aluSwc</td><td>0</td><td>0</td></tr><tr><td>bonall</td><td>\</td><td>\</td><td>1(Write Data选择ID传递值)</td></tr><tr><td>and</td><td>`aluAnd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>or</td><td>`aluOr</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr><td>slt</td><td>`aluSlt</td><td>0</td><td>0</td></tr><tr><td>sltu</td><td>`aluSltu</td><td>0</td><td>0</td></tr><tr><td>addi</td><td>`aluAdd</td><td>1</td><td>0</td></tr><tr><td>andi</td><td>`aluAnd</td><td>1</td><td>0</td></tr><tr><td>mult</td><td>\</td><td>\</td><td>0</td></tr><tr><td>mflo</td><td>\</td><td>\</td><td>\</td></tr><tr><td>mfhi</td><td>\</td><td>\</td><td>\</td></tr></tbody></table></div><h4 id="EX-T-NEW-表"><a href="#EX-T-NEW-表" class="headerlink" title="EX$T_{NEW}$表"></a>EX$T_{NEW}$表</h4><div class="table-container"><table><thead><tr><th></th><th>EX_NEW</th></tr></thead><tbody><tr><td>add</td><td>1</td></tr><tr><td>sub</td><td>1</td></tr><tr><td>ori</td><td>1</td></tr><tr><td>lw</td><td>2</td></tr><tr><td>sw</td><td>0</td></tr><tr><td>beq</td><td>0</td></tr><tr><td>lui</td><td>1</td></tr><tr><td>jal</td><td>0</td></tr><tr><td>jr</td><td>0</td></tr><tr><td>swc</td><td>1</td></tr><tr><td>bonall</td><td>0</td></tr><tr><td>lb</td><td>2</td></tr><tr><td>sb</td><td>0</td></tr><tr><td>lh</td><td>2</td></tr><tr><td>sh</td><td>0</td></tr><tr><td>and</td><td>1</td></tr><tr><td>or</td><td>1</td></tr><tr><td>slt</td><td>1</td></tr><tr><td>sltu</td><td>1</td></tr><tr><td>addi</td><td>1</td></tr><tr><td>andi</td><td>1</td></tr><tr><td>mflo</td><td>1</td></tr><tr><td>mfhi</td><td>1</td></tr></tbody></table></div><h3 id="EX-MEM"><a href="#EX-MEM" class="headerlink" title="EX_MEM"></a>EX_MEM</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>flush</td><td>in</td><td></td><td></td></tr><tr><td>EX_PC</td><td>in</td><td>[31:0]</td><td>EX阶段PC地址</td></tr><tr><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段指令</td></tr><tr><td>EX_A3</td><td>out</td><td>[4:0]</td><td>EX阶段传递的A3</td></tr><tr><td>EX_WD</td><td>out</td><td>[31:0]</td><td>EX阶段Write Data</td></tr><tr><td>EX_RES</td><td>out</td><td>[31:0]</td><td>EX阶段ALURes</td></tr><tr><td>EX_RD2</td><td>out</td><td>[31:0]</td><td>EX阶段Read Data2</td></tr><tr><td>MEM_PC</td><td>out</td><td>[31:0]</td><td>MEM阶段PC地址</td></tr><tr><td>MEM_instr</td><td>out</td><td>[31:0]</td><td>MEM阶段指令</td></tr><tr><td>MEM_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>MEM_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RES</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2</td><td>out</td><td>[31:0]</td></tr></tbody></table></div><h3 id="MEM"><a href="#MEM" class="headerlink" title="MEM"></a>MEM</h3><h4 id="顶层-3"><a href="#顶层-3" class="headerlink" title="顶层"></a>顶层</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>MEM_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RES</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2_forward</td><td>in</td><td>[31:0]</td><td>WB转发的Read Data2</td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递的A3寄存器地址</td></tr><tr><td>RD</td><td>in</td><td>[31:0]</td><td>从Memory中读出的数据</td></tr><tr><td>MEM_WB_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>MEM_WB_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_A2_NEW</td><td>out</td><td>[1:0]</td><td>MEM$T_{NEW}$</td></tr><tr><td>MEM_BYTE_EN</td><td>out</td><td>[3:0]</td><td>写入MEM数据的按字节使能信号</td></tr><tr><td>MEM_WRITE_DATA</td><td>out</td><td>[31:0]</td><td>写入MEM,按字节重新排序的数据</td></tr><tr><td>MEM_DATA_ADDR</td><td>out</td><td>[31:0]</td><td>写入或读出的Memory地址</td></tr><tr><td>MEM_INST_ADDR</td><td>out</td><td>[31:0]</td><td>当load/store指令对应的PC地址</td></tr></tbody></table></div><h4 id="MEMControl部件-共用"><a href="#MEMControl部件-共用" class="headerlink" title="MEMControl部件(共用)"></a>MEMControl部件(共用)</h4><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>instr</td><td>in</td><td></td><td></td></tr><tr><td>MEM_WE</td><td>out</td><td></td><td>选择是否写入Memory</td></tr><tr><td>MEM_Sel</td><td>out</td><td></td><td>选择是否将Memory读出值向后传递(1:yes)</td></tr><tr><td>MEM_A2_NEW</td><td>out</td><td></td><td>MEM区$T_{NEW}$</td></tr><tr><td>MEM_PART</td><td>out</td><td>[1:0]</td><td>选择存入/读取Word,Half或者Byte</td></tr><tr><td>MEM_EXT_Control</td><td>out</td><td>[2:0]</td><td>MEM_EXT部件控制信号</td></tr></tbody></table></div><h4 id="MEM信号及-T-NEW-表"><a href="#MEM信号及-T-NEW-表" class="headerlink" title="MEM信号及$T_{NEW}$表"></a>MEM信号及$T_{NEW}$表</h4><div class="table-container"><table><thead><tr><th>指令/信号</th><th>MEM_WE</th><th>MEM_Sel</th><th>MEM_A2_NEW</th><th>MEM_PART</th><th>MEM_EXT_Control</th></tr></thead><tbody><tr><td>sw</td><td>1</td><td>0</td><td>0</td><td>`memWord</td><td>3’bz</td></tr><tr><td>sh</td><td>1</td><td>0</td><td>0</td><td>`memHalf</td><td>3’bz</td></tr><tr><td>sb</td><td>1</td><td>0</td><td>0</td><td>`memByte</td><td>3’bz</td></tr><tr><td>lw</td><td>0</td><td>1</td><td>1</td><td>`memWord</td><td>`nonExt</td><td></td></tr><tr><td>lh</td><td>0</td><td>1</td><td>1</td><td>`memHalf</td><td>`signedHalfExt</td><td></td></tr><tr><td>lb</td><td>0</td><td>1</td><td>1</td><td>`memByte</td><td>`signedByteExt</td><td></td></tr><tr><td>else</td><td>0</td><td>0</td><td>0</td><td>2’bz</td><td>3’bz</td></tr></tbody></table></div><h3 id="MEM-WB"><a href="#MEM-WB" class="headerlink" title="MEM_WB"></a>MEM_WB</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td>MEM_PC</td><td>in</td><td>[31;0]</td><td></td></tr><tr><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td>WB_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>WB_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>WB_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr><td>WB_WD</td><td>out</td><td>[31:0]</td></tr></tbody></table></div><h3 id="HAZARD-CTRL"><a href="#HAZARD-CTRL" class="headerlink" title="HAZARD_CTRL"></a>HAZARD_CTRL</h3><div class="table-container"><table><thead><tr><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr><td>clk</td><td>in</td><td></td><td></td></tr><tr><td>reset</td><td>in</td><td></td><td></td></tr><tr><td><strong>ID阶段</strong></td><td></td><td></td><td></td></tr><tr><td>ID_A1</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A1寄存器</td></tr><tr><td>ID_A2</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A2寄存器</td></tr><tr><td>ID_RD1</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A1对应值</td></tr><tr><td>ID_RD2</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A2对应值</td></tr><tr><td>ID_A1_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>ID_A2_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>ID_MD</td><td>in</td><td></td><td>ID区处理指令是否与乘除相关</td></tr><tr><td><strong>EX阶段</strong></td><td></td><td></td><td></td></tr><tr><td>EX_A1</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>EX_A2</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>EX_RD1</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr><td>EX_RD2</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr><td>EX_A1_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>EX_A2_USE</td><td>in</td><td>[1:0]</td><td>$T_{USE}$</td></tr><tr><td>EX_A3</td><td>in</td><td>[4:0]</td><td>EX传递的A3寄存器(rd)</td></tr><tr><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX传递的Write Data</td></tr><tr><td>MULT_DIV_BUSY</td><td>in</td><td></td><td>乘除模块忙碌信号</td></tr><tr><td>MULT_DIV_START</td><td>in</td><td></td><td>乘除模块开始信号</td></tr><tr><td><strong>MEM阶段</strong></td><td></td><td></td><td></td></tr><tr><td>MEM_A2</td><td>in</td><td>[4:0]</td><td>MEM正在使用的A2</td></tr><tr><td>MEM_RD2</td><td>in</td><td>[31:0]</td><td>MEM的Read Data2,由EX传递而来</td></tr><tr><td>MEM_A2_NEW</td><td>in</td><td>[1:0]</td><td>MEM的$T_{NEW}$</td></tr><tr><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递A3</td></tr><tr><td>MEM_WD</td><td>in</td><td>[31:0]</td><td>MEM传递的Write Data</td></tr><tr><td><strong>WB</strong></td><td></td><td></td><td></td></tr><tr><td>WB_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr><td>WB_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr><td><strong>转发FORWARD</strong></td><td></td><td></td><td></td></tr><tr><td>ID_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>ID_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>EX_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td>MEM_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr><td><strong>暂停信号STALL</strong></td><td></td><td></td><td></td></tr><tr><td>Enable_PC</td><td>out</td><td></td><td>PC使能信号</td></tr><tr><td>Enable_IF_ID</td><td>out</td><td></td><td>IF_ID流水寄存器使能信号</td></tr><tr><td>Enable_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器使能信号</td></tr><tr><td>Flush_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器刷新信号</td></tr><tr><td>Flush_EX_MEM</td><td>out</td><td></td><td>EX_MEM流水寄存器刷新信号</td></tr></tbody></table></div><h2 id="阻塞矩阵"><a href="#阻塞矩阵" class="headerlink" title="阻塞矩阵"></a>阻塞矩阵</h2><div class="table-container"><table><thead><tr><th>IF/ID当前指令</th><th></th><th></th><th>ID/EX</th><th></th><th></th><th>EX/MEM</th><th></th><th></th><th>MEM/WB</th><th></th><th></th></tr></thead><tbody><tr><td>指令类型</td><td>源寄存器</td><td>$T_{use}$</td><td>cal_r<br>1/rd)<br></td><td>cal_i<br>(1/rt)<br></td><td>load<br>(2/rt)<br></td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(1/rt)</td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(0/rt)</td></tr><tr><td>beq</td><td>rs/rt</td><td>0</td><td>X</td><td>X</td><td>X</td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr><tr><td>cal_r</td><td>rs_rt</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>cal_i</td><td>rs</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>load</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>store</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td>store</td><td>rt</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div><h2 id="暂停实现"><a href="#暂停实现" class="headerlink" title="暂停实现"></a>暂停实现</h2><blockquote><p>使用课程讲解的AT法,在流水线运行期间,ID区提供$T_{USE}$,EX,MEM区提供$T_{NEW}$,在冒险控制模块中采用以下判断逻辑:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL =  (ID_A1 == EX_A3 &amp;&amp; ID_A1_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)  <br>              || (ID_A2 == EX_A3 &amp;&amp; ID_A2_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A1 == MEM_A3 &amp;&amp; ID_A1_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A2 == MEM_A3 &amp;&amp; ID_A2_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>STALL信号会控制三个行为:</p><ol><li>暂停IF区的PC模块</li><li>暂停IF_ID间流水寄存器</li><li>刷新ID_EX间流水寄存器(等同于reset)</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> Enable_PC = !STALL;<br><span class="hljs-keyword">assign</span> Enable_IF_ID = !STALL;<br><span class="hljs-keyword">assign</span> Flush_ID_EX = STALL;<br></code></pre></td></tr></table></figure></blockquote><h2 id="转发实现"><a href="#转发实现" class="headerlink" title="转发实现"></a>转发实现</h2><blockquote><p>转发有五条可能的数据通路:</p><ol><li>$EX_MEM\rightarrow ID$</li><li>$MEM_WB\rightarrow ID$</li><li>$EX_MEM\rightarrow EX$</li><li>$MEM_WB\rightarrow EX$</li><li>$MEM_WB\rightarrow MEM$</li></ol><p>这里以ID区的RD1转发数据逻辑为例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> ID_RD1_forward = (ID_A1 == <span class="hljs-number">5&#x27;b0</span>) ? <span class="hljs-number">0</span> :<br>                        (ID_A1 == MEM_A3) ? MEM_WD :<br>                        (ID_A1 == WB_A3) ? WB_WD :<br>                        ID_RD1;<br></code></pre></td></tr></table></figure></blockquote><h2 id="寄存器内部转发实现"><a href="#寄存器内部转发实现" class="headerlink" title="寄存器内部转发实现"></a>寄存器内部转发实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">// 考虑寄存器内部转发</span><br><span class="hljs-keyword">assign</span> RD1 = (A1 == A3 &amp;&amp; A1 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A1]; <br><span class="hljs-keyword">assign</span> RD2 = (A2 == A3 &amp;&amp; A2 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A2];<br></code></pre></td></tr></table></figure><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><ol><li><code>Python</code>自动生成测试mips文件</li><li><code>Mars</code>运行mips文件,生成正确结果和机器码</li><li><code>iverilog</code>运行CPU文件,生成测试结果</li><li><code>Python</code>比较两份答案</li></ol><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p>1、为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的 HI、LO 寄存器？</p><blockquote><p>乘除法的运算速率明显低于其他运算,需要多个时钟周期,将乘除法分离出ALU可以避免乘除指令干扰其他运算指令的进行.</p><p>独立的HI,LO寄存器可以保存乘除法运算的值,若不实现该独立寄存器,要等待运算完成后再将值送回寄存器堆中,严重降低流水线CPU的性能.</p></blockquote><p>2、真实的流水线 CPU 是如何使用实现乘除法的？请查阅相关资料进行简单说明。</p><blockquote><ol><li>乘法</li></ol><p>CPU会初始化三个通用寄存器,分别存放被乘数,乘数,部分积.部分积寄存器初始化为0.</p><p>判断乘数寄存器的低位是低电平(0)还是高电平(1),如果是0则将乘数寄存器右移一位,同时将部分积寄存器也右移一位</p><p>如果为1,则将部分积寄存器加上被乘数寄存器的值,再进行移位操作</p><p>乘数寄存器低位溢出的一位丢弃,部分寄存器低位溢出的一位填充到乘数寄存器的高位</p><p>处理完毕后,乘数寄存器即<code>$lo</code>,部分积寄存器即<code>$hi</code></p><ol><li>除法</li></ol><p>首先CPU会初始化三个寄存器,分别用来存放被除数,除数,部分商.</p><p>余数(被除数与除数比较的结果)放到被除数的有效高位上.</p><p>首先CPU会把被除数bit位与除数bit位对齐,然后在让对齐的被除数与除数比较(双符号位判断).</p><p>双符号位判断： 比如01-10=11(前面的1是符号位) 1-2=-1 计算机通过符号位和后一位的bit位来判断大于和小于，那么01-10=11 就说明01小于10，如果得数为01就代表大于，如果得数为00代表等于。 </p><p>如果得数大于或等于则将比较的结果放到被除数的有效高位上然后在商寄存器上商：1 并向后多看一位 (上商就是将商的最低位左移1位腾出商寄存器最低位上新的商) </p><p>如果得数小于则上商：0 并向后多看一位 </p><p>循环做以上操作当所有的被除数都处理完后，商做结果被除数里面的值就是余数.</p></blockquote><p>3、请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的？</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL =  (ID_A1 == EX_A3 &amp;&amp; ID_A1_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)  <br>              || (ID_A2 == EX_A3 &amp;&amp; ID_A2_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A1 == MEM_A3 &amp;&amp; ID_A1_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A2 == MEM_A3 &amp;&amp; ID_A2_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_MD &amp;&amp; (MULT_DIV_BUSY || MULT_DIV_START));<br></code></pre></td></tr></table></figure><p>当<code>EX</code>区的乘除部件在计算乘除结果时,<code>MULT_DIV_BUSY</code>置1;当ID区遇到乘除相关指令(<code>ID_MD</code>=1)时,若<code>MULT_DIV_BUSY</code>或<code>MULT_DIV_START</code>为1,则周期阻塞.</p></blockquote><p>4、请问采用字节使能信号的方式处理写指令有什么好处？（提示：从清晰性、统一性等角度考虑）</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> MEM_BYTE_EN =  (WE == <span class="hljs-number">0</span>) ? <span class="hljs-number">4&#x27;b0000</span> :<br>                 (MEM_PART == `memWord) ? <span class="hljs-number">4&#x27;b1111</span> :<br>                 (MEM_PART == `memHalf &amp;&amp; half == <span class="hljs-number">0</span>) ? <span class="hljs-number">4&#x27;b0011</span> :<br>                 (MEM_PART == `memHalf &amp;&amp; half == <span class="hljs-number">1</span>) ? <span class="hljs-number">4&#x27;b1100</span> :<br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b00</span>) ? <span class="hljs-number">4&#x27;b0001</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b01</span>) ? <span class="hljs-number">4&#x27;b0010</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b10</span>) ? <span class="hljs-number">4&#x27;b0100</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b11</span>) ? <span class="hljs-number">4&#x27;b1000</span> :<br>                 <span class="hljs-number">4&#x27;b0000</span>;<br></code></pre></td></tr></table></figure><p>使得代码清晰易读,避免了大量的位拼接的情况,可以处理按字,半字,字节读入/写入的操作,统一性好.</p></blockquote><p>5、请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM 写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢？</p><blockquote><p>不是,我们从DM获得的数据和向DM写入的数据都是一字,通过处理后选择其中一个字节执行操作.</p><p>当指令序列有大量涉及<code>lh,sh,lb,sb</code>的指令时.</p></blockquote><p>6、为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助？</p><blockquote><p>译码:将指令进行分类,降低译码代码复杂度和书写难度</p><p>处理数据冲突:将数据通路的阻塞操作和转发操作分离,各部件的选择信号均由Control部件产生,减少各部件的耦合度</p></blockquote><p>7、在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？</p><blockquote><p>ID区和EX区均在执行乘除类指令:STALL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $1, $0, 0x3456<br>ori $2, $0, 0x4675<br>ori $3, $0, 0x786922<br>multu $1, $2<br>mult $2, $3<br>mflo $3<br>mfhi $4<br></code></pre></td></tr></table></figure></blockquote><p>8、如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证<strong>覆盖</strong>了所有需要测试的情况；如果你是<strong>完全随机</strong>生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了<strong>特殊的策略</strong>，比如构造连续数据冒险序列，请你描述一下你使用的策略如何<strong>结合了随机性</strong>达到强测的效果。</p><blockquote><p>不足之处:可能会遗漏特殊的阻塞和转发情况</p><p>策略:</p><ol><li><p>限制使用的寄存器个数,提高数据冲突的可能性</p></li><li><p>生成beq,jal等跳转类指令时打印一组语句,指定跳转的寄存器值或<code>PC+OFFSET</code>,避免跳转地址不合理</p></li></ol></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cache</title>
    <link href="/2024/11/11/cache/"/>
    <url>/2024/11/11/cache/</url>
    
    <content type="html"><![CDATA[<h1 id="Cache"><a href="#Cache" class="headerlink" title="Cache"></a>Cache</h1><h2 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h2><p><strong>数据块</strong>:Cache和主存被划分为大小相等的块,称为Cache块(行)</p><ul><li>Cache块数小于主存中的块数</li><li>每块由若干字节组成</li></ul><p><strong>标记</strong>:每一个Cache数据块有一个标记字段</p><p><strong>有效位</strong>:每一组Block都有一个有效位,用于指示相应数据块是否包含有效数据</p><p><strong>命中率</strong>:CPU欲访问的信息已在Cache中的比率称为Cache的命中率,Cache的总命中次数为$N_c$,访问主存的总次数为$N_m$,命中率为$H=\frac{N_c}{N_c+N_m}$</p><h2 id="映射"><a href="#映射" class="headerlink" title="映射"></a>映射</h2><h3 id="直接映射"><a href="#直接映射" class="headerlink" title="直接映射"></a>直接映射</h3><ul><li>Cache行号=主存块号 mod Cache总行数</li><li>假设Cache共有$2^c$行,主存有$2^m$块,在直接映射方式中,主存的第0块,第$2^c$块,第$2^{c+1}$块映射到Cache的第0行</li><li>给每个Cache行设置一个长为$t=m-c$的标记(tag)</li></ul><p>直接映射的<strong>地址结构</strong>为:</p><div class="table-container"><table><thead><tr><th>标记</th><th>Cache 行号</th><th>块内地址</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="访存过程"><a href="#访存过程" class="headerlink" title="访存过程"></a>访存过程</h4><ol><li>根据访存地址中间的c位(Cache行号)找到对应的cache行</li><li>将对应Cache行中的标记和主存地址的高t位标记进行比较</li><li>若相等且有效位为1,则访问Cache<strong>“命中”</strong>,此时根据主存地址中低位的块内地址,在对应的Cache行中存取信息</li><li>若不想等或有效位为0,则不命中,此时CPU从主存中读出该地址所在的一块信息送到对应的Cache行中,将有效位置1,并将标记设置为地址中的高t位,同时将该地址中的内容送CPU</li></ol><h4 id="计算"><a href="#计算" class="headerlink" title="计算"></a>计算</h4><p>$Cache块数=Cache容量/Block大小$</p><p>$主存块数=主存容量/Block大小$</p><p>$主存分区=主存块数/Cache块数$</p><p>$主存地址位数=主存块数对应位数+块内地址位置$</p><p><img src="image-20241113085451710.png" alt="image-20241113085451710"></p><p><strong>缺点</strong>:</p><ol><li>其他地方有空闲的Cache块,但不能使用</li></ol><h3 id="全相联映射"><a href="#全相联映射" class="headerlink" title="全相联映射"></a>全相联映射</h3><ul><li>主存中的每一块都可以装入Cache中的任何位置</li><li>同时与所有tag进行比较,需要N个比较器</li><li>数据访问和标记并行执行</li></ul><h4 id="地址结构"><a href="#地址结构" class="headerlink" title="地址结构"></a>地址结构</h4><div class="table-container"><table><thead><tr><th>标记</th><th>块内地址</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="访存过程-1"><a href="#访存过程-1" class="headerlink" title="访存过程"></a>访存过程</h4><ol><li>将主存地址的高位标记(位数=$log_2$主存块数)与Cache各行的标记进行比较</li><li>若有一个相等且对应有效位为1,则命中,此时根据块内地址从该Cache行中取出信息</li><li>若都不想等,则不命中,此时CPU从主存中读出该地址所在的一块信息送到Cache的<strong>任意一个空闲行</strong>中,将有效位置1,并设置标记,同时将该地址中的内容送CPU</li></ol><p><img src="image-20241113103805490.png" alt="image-20241113103805490"> </p><p><img src="image-20241111151042631.png" alt="image-20241111151042631"></p><p><strong>优点</strong>:</p><ol><li>存储空间充分利用,命中率高,灵活性</li></ol><p><strong>缺点</strong>:</p><ol><li>查找标记最慢</li></ol><p><strong>缺点</strong>:</p><ol><li>主存地址中的块地址要与Cache中所有Tag比较后,才能知晓是否不命中</li></ol><h3 id="组相联映射-可放到特定分组"><a href="#组相联映射-可放到特定分组" class="headerlink" title="组相联映射(可放到特定分组)"></a>组相联映射(可放到特定分组)</h3><ul><li>将Cache分为Q个大小相等的组,每个主存块可以装入固定组的任意一行,即组间采用直接映射,组内采用全相联映射的方式</li></ul><div class="table-container"><table><thead><tr><th>标记</th><th>组号</th><th>块内地址</th></tr></thead><tbody><tr><td></td></tr></tbody></table></div><h4 id="计算-1"><a href="#计算-1" class="headerlink" title="计算"></a>计算</h4><p><img src="image-20241113085633270.png" alt="image-20241113085633270"></p><p>2路组相连映射—2块为1组,分4组</p><h2 id="缺失处理"><a href="#缺失处理" class="headerlink" title="缺失处理"></a>缺失处理</h2><p><img src="image-20241113092733659.png" alt="image-20241113092733659"></p><h2 id="替换处理"><a href="#替换处理" class="headerlink" title="替换处理"></a>替换处理</h2><p><img src="image-20241113092832343.png" alt="image-20241113092832343"></p><h3 id="替换策略"><a href="#替换策略" class="headerlink" title="替换策略"></a>替换策略</h3><h4 id="LRU-近期最少使用算法"><a href="#LRU-近期最少使用算法" class="headerlink" title="LRU(近期最少使用算法)"></a>LRU(近期最少使用算法)</h4><ul><li>LRU算法对每个位设置一个计数器(LRU替换位)</li><li>计数器位数与组大小相关,二路时有1位LRU位(要区分组内的计数器大小,有0,1两个数即可),四路时有2位LRU位(可以有0,1,2,3四个计数)</li><li>命中时,所命中的行的计数器清零,比其低的计数器加1,其余不变</li><li>未命中且有空闲行时,新装入的行的计数器置0,其余全加1</li><li>未命中且无空闲行时,计数值为$2^{组数}-1$(就是计数最大)的行的信息块被替换,新装入的行的计数器置0,其余全加1</li><li>这种计数方式保证了所有的行的计数在0到$2^{组数}-1$之间,并各不相同</li></ul><h4 id="FIFO-先进先出算法"><a href="#FIFO-先进先出算法" class="headerlink" title="FIFO(先进先出算法)"></a>FIFO(先进先出算法)</h4><p>容易实现,但未遵循程序访问的局部性原理,最早进入的主存块可能是目前经常要用的</p><h4 id="LFU-最不经常使用算法"><a href="#LFU-最不经常使用算法" class="headerlink" title="LFU(最不经常使用算法)"></a>LFU(最不经常使用算法)</h4><p>将一段时间内被访问次数最少的Cache行换出,每行也设置一个计数器,新行装入后从0开始计数,每访问1次,被访问的行计数器加1,需要替换时比较各特定行的计数值,将计数值最小的行换出</p><h4 id="RAND-随机算法"><a href="#RAND-随机算法" class="headerlink" title="RAND(随机算法)"></a>RAND(随机算法)</h4><p>随机的确定替换的Cache行,实现简单</p><p><img src="image-20241113105108759.png" alt="image-20241113105108759"></p><h1 id="相关计算问题"><a href="#相关计算问题" class="headerlink" title="相关计算问题"></a>相关计算问题</h1><h2 id="直接映射-1"><a href="#直接映射-1" class="headerlink" title="直接映射"></a>直接映射</h2><ul><li>主存地址空间大小,Cache地址空间大小,块大小一般为已知条件</li><li>$主存块数=\frac{主存地址空间大小}{块大小}=2^m$</li><li>$Cache行数=\frac{Cache地址空间大小}{块大小}=2^c$</li><li>主存地址结构为:</li></ul><div class="table-container"><table><thead><tr><th>标记</th><th>Cache行号</th><th>块内地址</th></tr></thead><tbody><tr><td>$m-c$位</td><td>$c$位</td><td>$k$位</td></tr></tbody></table></div><h2 id="全相联映射-1"><a href="#全相联映射-1" class="headerlink" title="全相联映射"></a>全相联映射</h2><ul><li>主存地址空间大小,Cache地址空间大小,块大小一般为已知条件</li><li>$主存块数=\frac{主存地址空间大小}{块大小}=2^m$</li><li>$Cache行数=\frac{Cache地址空间大小}{块大小}=2^c$</li><li>主存地址结构为:</li></ul><div class="table-container"><table><thead><tr><th>标记</th><th>块内地址</th></tr></thead><tbody><tr><td>$m-k$位</td><td>$k$位</td></tr></tbody></table></div><h2 id="组相联映射"><a href="#组相联映射" class="headerlink" title="组相联映射"></a>组相联映射</h2><ul><li>主存地址空间大小,Cache地址空间大小,组数,块大小一般为已知条件</li><li>$主存块数=\frac{主存地址空间大小}{块大小}=2^m$</li><li>$Cache行数=\frac{Cache地址空间大小}{块大小}=2^c$</li><li>$组数=2^r$</li><li>$主存组内块数=2^{m-r}$</li><li>主存地址结构为:</li></ul><div class="table-container"><table><thead><tr><th>标记</th><th>组号</th><th>块内地址</th></tr></thead><tbody><tr><td>$m-r$位</td><td>$r$位</td><td>$k$位</td></tr></tbody></table></div><h2 id="Cache总容量计算"><a href="#Cache总容量计算" class="headerlink" title="Cache总容量计算"></a>Cache总容量计算</h2><blockquote><p>假设某个计算机的主存地址空间大小为256MB,按字节编址,其数据Cache有8个Cache行,行长为64B</p><p>(1)若不考虑用于Cache的一致维护性位(脏位)和替换算法控制位,并且采用直接映射方式,则该数据Cache的总容量为多少?</p><p>每个Cache行对应一个标记项(包括有效位,脏位,替换算法位,标记位)</p></blockquote><p>由于按字节寻址:</p><p>$块内地址位数=\log_2(64)=6$</p><p>$Cache行号位数=\log_2(8)=3$</p><p>$标记位数=\log_2(256\times 10^{20})-6-3=19$</p><p>主存地址空间结构为</p><div class="table-container"><table><thead><tr><th>标记</th><th>Cache行号</th><th>块内地址</th></tr></thead><tbody><tr><td>19位</td><td>3位</td><td>6位</td></tr></tbody></table></div><p>本题每行(总共8行)的存储器容量为:</p><div class="table-container"><table><thead><tr><th>有效位</th><th>标记</th><th>每行存储的数据</th></tr></thead><tbody><tr><td>1bit</td><td>19bit</td><td>64B=512bit</td></tr></tbody></table></div><p>因此:总容量为$(1+19+512)\times 8=4256$位</p>]]></content>
    
    
    <categories>
      
      <category>计算机组成原理</category>
      
    </categories>
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>CPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-函数</title>
    <link href="/2024/11/10/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/11/10/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="部分函数"><a href="#部分函数" class="headerlink" title="部分函数"></a>部分函数</h2><blockquote><p>如果从集合X到Y的二元关系f是”单值”的,即f满足以下条件:</p><p>若$<x,y_1>\in f\wedge <x,y_2>\in f,则y_1=y_2$</x,y_2></x,y_1></p><p>f为X到Y的部分函数</p></blockquote><p>从X到Y的函数个数:$\sharp (Y^X)=(\sharp Y)^{\sharp X}$</p><h2 id="定义域"><a href="#定义域" class="headerlink" title="定义域"></a>定义域</h2><p>$dom(f)=\{x\in X|y\in Y使得y=f(x)\}$</p><p>若$x \in  dom(f)$,则f在x处有定义,记为$f(x)\downarrow$,否则称f在x处无定义,$f(x)\uparrow$,显然$dom(f)\subseteq X$</p><ol><li>$若\text{dom}(f)=X,则记f为X到Y的全函数,f为X到Y的函数,记作f:X\rightarrow Y$</li><li>$若\text{dom}(f)\subset X,则称f为X到Y的严格部分函数$</li><li>$若\text{ran}(f)=Y,则称f为X到Y上的部分函数$</li><li>$若\text{ran}(f)\subset Y,则称f为X到Y内的部分函数$</li><li>若对任意$x_1,x_2\in \text{dom}(f),当x_1\neq x_2时,皆有f(x_1)\neq f(x_2)$</li></ol><h2 id="限制"><a href="#限制" class="headerlink" title="限制"></a>限制</h2><p>设函数$f:X\rightarrow Y,A\subseteq X$,则$f\cap (A\times Y)$是从A到Y的函数,则称f在A上的限制,记作$f|_A$,又称$f$是$f_A$到X的延拓</p><p>$f|_A=\{<x,y>|<x,y>\in F\wedge x\in A\}$</x,y></x,y></p><h2 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h2><p>$1)f|U(A)|=U\{f[A]|A\in A\}$</p><p>$任取y\in f[U\mathscr A],\therefore \exists x\in \cup \mathscr A使得f(x)=y\$</p><p>$\exists A\in\mathscr A,x\in A\therefore y\in f(A),\therefore y\in \cup\{f[A]|A\in\mathscr A\},\therefore f[\cup\mathscr A]\subseteq \cup\{f[A]|A\in\mathscr A\}$</p><p>$任取A\in\mathscr A,A\subseteq \cup \mathscr A,f[A]\subseteq f[U\mathscr A]$</p><p>$\cup \{f[A]|A\in A\}\subseteq f[\cup\mathscr A]$</p><p>4)$B=\emptyset,f^{-1}[\cap \mathscr B]=\cap\{f^{-1}[B]|B\in\mathscr B\}$</p><p><img src="image-20241106151958714.png" alt="image-20241106151958714"></p><h2 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h2><p>若f为从集合X到Y的部分函数且$A\subseteq X$,则:</p><p>$dom(f|_A)=A\cap dom\ f$</p><p>$ran(f|_A)=f[A]$</p><p>若$A\subseteq dom(f)$,则$f|_A$为全函数</p><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><p><img src="image-20241106153418485.png" alt="image-20241106153418485"></p><h1 id="函数的复合"><a href="#函数的复合" class="headerlink" title="函数的复合"></a>函数的复合</h1><p>$g\cdot f$定义为:</p><p>$\{<x,z>|x\in X\wedge z\in Z\wedge \exists y(y\in Y\wedge y=f(x)\wedge z=g(y))\}$</x,z></p><h2 id="定理1"><a href="#定理1" class="headerlink" title="定理1"></a>定理1</h2><p>1)$dom(g\cdot f)=f^{-1}[dom g]$</p><p>2)$ran(g\cdot f)=g[ranf]$</p><p>3)若f,g都是全函数,$g\cdot f$也是全函数</p><h2 id="定理2"><a href="#定理2" class="headerlink" title="定理2"></a>定理2</h2><p>$h\cdot(g\cdot f)=(h\cdot g)\cdot f$</p><h1 id="特殊性质的函数与逆函数"><a href="#特殊性质的函数与逆函数" class="headerlink" title="特殊性质的函数与逆函数"></a>特殊性质的函数与逆函数</h1><h2 id="自然映射"><a href="#自然映射" class="headerlink" title="自然映射"></a>自然映射</h2><p>$\phi=\{<x,[x]_R>|x\in A\}$</x,[x]_R></p><h2 id="定理-2"><a href="#定理-2" class="headerlink" title="定理"></a>定理</h2><p>$若g\cdot f是满射,则g是满射$</p><p>$1)ran\ g\subseteq Z,g[ran\ f]=g[Y]=ran\ g$</p><p>$g[ran\ f]=ran(g\cdot f)$</p><p>$由于g\cdot\ f为满射,ran(g\cdot f)=Z$</p><p>$\therefore Z\subseteq ran\ g$</p><p>$\therefore Z=ran\ g$,即g为满射</p><p>2)$g\cdot f是单射,则f是单射$</p><p>3)$若g\cdot f是双射,则g是满射且f是单射$</p><p><strong>左满右单</strong></p><h2 id="思考题-1"><a href="#思考题-1" class="headerlink" title="思考题"></a>思考题</h2><p>a)<strong>有多少个从A到B的函数为单射？</strong></p><p>  <strong>① 当 m</strong> $\leq$<strong>n时，有$p^m_n=\frac{n!}{(n-m)!}$个单射；</strong></p><p>  <strong>② 当 m &gt; n时，有0个单射</strong></p><p><strong>有多少个从A到B的函数为</strong> <strong>满射</strong>？</p><p>   <strong>① 当 m &lt; n时，有 0 个满射；</strong></p><p>   <strong>② 当 n = 0且m &gt; 0 时，0个；</strong></p><p>   <strong>③ 当 n = 0且m = 0时， 1个；</strong></p><p>   <strong>④ 当 m</strong> $\geq$<strong>n</strong> $\geq$ <strong>1时，为第二类Stirling数：</strong></p><p>$F(n,m)=\mathop\Sigma\limits^m_{i=0}\frac{(-1)^{m-i}i^n}{i!(m-i)!}$</p><h2 id="第二类斯特林数"><a href="#第二类斯特林数" class="headerlink" title="第二类斯特林数"></a>第二类斯特林数</h2><p>$S(n,m)=S(n-1,m-1)+S(n-1,m)*m$</p><script type="math/tex; mode=display">\begin{align}&G_i=i^n\\&G_i=\mathop\Sigma_{j=0}^iC^i_jF_j\\&F_i=\mathop\Sigma_{j=0}^i(-1)^{i-j}C^i_jG_j\\&=\mathop\Sigma^i_{j=0}\frac{i!(-1)^{i-j}j^n}{j!(i-j)!}\\&S(n,m)=\frac{F_m}{m!}=\mathop\Sigma_{i=o}^m\frac{(-1)^{m-i}i^n}{i!(m-i)!}\end{align}</script><h2 id="逆函数"><a href="#逆函数" class="headerlink" title="逆函数"></a>逆函数</h2><p>$1)若有g:Y\rightarrow X使得g\cdot f=I_X,则称f为左可逆的,\\并称g为f的一个左逆函数$</p><p>$2)若有g:Y\rightarrow X使得f\cdot g=I_Y,则称f为左可逆的,\\并称g为f的一个右逆函数$</p><h2 id="可逆判定"><a href="#可逆判定" class="headerlink" title="可逆判定"></a>可逆判定</h2><p>$f:X\rightarrow Y为左可逆的\leftrightarrow f为单射$</p><p>$证明:(充分性)\exists g:Y\rightarrow X,使得g\cdot f=I_X$</p><p>$I_X是满射,则f是单射$</p><p>$(必要性)由于f是单射,存在g=f^{-1}\cup ((Y-ran\ f)\times \{a\}),使得g\cdot f=I_X$</p><p>$f:X\rightarrow Y是右可逆的\leftrightarrow f为满射$</p><p>$\begin{align}证明:&amp;\exists g:Y\rightarrow X使得 f\cdot g=I_Y\\&amp;由于I_A是双射,f为满射\\&amp;(必要性)设f为满射,\\&amp;i)X=\emptyset,f为满射,Y=ran\ f=\emptyset,定理显然成立\\&amp;ii)X\neq\emptyset,对于每个有y\in Y,令\\&amp;S_y=\{x|x\in X\wedge f(x)=y\}\\&amp;\{S_y|y\in Y\}是X的一个划分,对于每个y\in Y,都任意取定S_y中唯一的一个元素x_y,显然f(x_y)=y,并令\\&amp;g=\{<y,x_y>|y\in Y\}\\&amp;则g显然是一个从Y到X的全函数,且f\cdot g=I_Y\end{align}$</y,x_y></p><h2 id="可逆性质"><a href="#可逆性质" class="headerlink" title="可逆性质"></a>可逆性质</h2><p>以下条件等价:</p><ol><li>f是双射</li><li>f是可逆的</li><li>f的逆关系$f^{-1}$即为f的逆函数</li></ol><h2 id="定理-3"><a href="#定理-3" class="headerlink" title="定理"></a>定理</h2><p>$f:X\rightarrow Y,g:Y\rightarrow Z都是可逆的$</p><p>$则g\cdot f也是可逆的,且(g\cdot f)^{-1}=f^{-1}\cdot g^{-1}$</p><h2 id="思考题-2"><a href="#思考题-2" class="headerlink" title="思考题"></a>思考题</h2><p><img src="image-20241115093739220.png" alt="image-20241115093739220"></p><script type="math/tex; mode=display">\begin{align}&n=1时,f=I_A,则f为双射\\&n>1时,\\&f^n=f\cdot f^{n-1}=I_A,故f为满射\\&f^n=f^{n-1}\cdot f=I_A,故f为单射\\&因此f为双射\end{align}</script><script type="math/tex; mode=display">\begin{align}&设n(A)=m,则双射最大数量为m!\\&存在0\leq i<j\leq m!,使得f^i=f^j\\&因此f^{i}\cdot (f^i)^{-1}=f^k\cdot (f^i)^{-1}\\&f^{k-i}=I_A\\\end{align}</script><h3 id="定理-4"><a href="#定理-4" class="headerlink" title="定理"></a>定理</h3><p>$X,Y为二集合且X\neq \emptyset,若f:X\rightarrow Y,则下列条件等价:$</p><ol><li>$f$为内射</li><li>$f$左可逆</li><li>$f$可左消去,即对任意集合$Z$及任意的$g$:$Z\rightarrow X,h:Z\rightarrow X$,当$f\cdot g=f\cdot h$时,皆有$g=h$</li></ol><h1 id="集合的特征函数"><a href="#集合的特征函数" class="headerlink" title="集合的特征函数"></a>集合的特征函数</h1><p>$设U是全集,A是U的子集,A的特征函数\Phi_A:U\rightarrow \{0,1\}\\\Phi_A(x)=\begin{cases}1,x\in A\\0,x\notin A\end{cases}$</p><h2 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h2><p>$\forall x(\Phi_A(x)=0)\Leftrightarrow A=\emptyset$</p><p>$\forall x(\Phi_A(x)=1)\Leftrightarrow A=U$</p><p>$\forall x(\Phi_A(x)\leq \Phi_B(x))\Leftrightarrow A\subseteq B$</p><p>$\forall x(\Phi_A(x)=\Phi_B(x))\Leftrightarrow A=B$</p><p>$\chi_A\leq \chi_B\Leftrightarrow A\subseteq B$</p><script type="math/tex; mode=display">\begin{aligned}(充分性)&任取x\in A,\chi_A(x)=1,\\&由于\chi_A\leq \chi_B,则\chi_B=1\\&x\in B,\therefore A\subseteq B\end{aligned}</script><p>$\chi_A=\chi_B\Leftrightarrow A=B$</p><p>$\chi_{\sim A}=1-\chi_{A}$</p><p>$\chi_{A\cap B}=\chi_A*\chi_B$</p><p>$\chi_{A\cup B}=\chi_A+\chi_B-\chi_A*\chi_B$</p><p>$\chi_{A}*\chi_B=\chi_A当且仅当A \subseteq B$</p><p>$\chi_A*\chi_A=\chi_A$</p><p>$证明:A\cup(B\cap C)=(A\cup B)\cap(A\cup C)$</p><script type="math/tex; mode=display">\begin{aligned}\chi_{A\cup(B\cap C)}&=\chi_A+\chi_{B\cap C}-\chi_B\cap \chi_C\\&=\chi_A+\chi_B*\chi_C-\chi_A*\chi_B*\chi_A\\\chi_{(A\cup B)\cap (A\cup C)}&=\chi_{A\cup B}*\chi_{A\cup C}\\&=(\chi_A+\chi_B-\chi_A*\chi_B)*(\chi_A+\chi_C-\chi_A*\chi_C)\\&=\chi_A+\chi_B*\chi_C-\chi_A*\chi_B*\chi_C\\\end{aligned}</script><p>所以$\chi_{A\cup(B\cap C)}=\chi_{(A\cup B)\cap(A\cup C)}$:</p><p>$A\cup(B\cap C)=(A\cup B)\cap(A\cup C)$</p>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2024/11/05/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/11/05/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="从全连接层道卷积"><a href="#从全连接层道卷积" class="headerlink" title="从全连接层道卷积"></a>从全连接层道卷积</h1><h2 id="全连接层"><a href="#全连接层" class="headerlink" title="全连接层"></a>全连接层</h2><p>$[H]_{i,j}=[U]_{i,j}+\mathop\sum\limits_{k}\mathop\sum\limits_l [W]_{i,j,k,l}[X]_{k,l}\\=[U]_{i,j}+\mathop\sum\limits_{a}\mathop\sum\limits_{b} [V]_{a,b}[X]_{i+a,j+a}$</p><h3 id="平移不变性"><a href="#平移不变性" class="headerlink" title="平移不变性"></a>平移不变性</h3><blockquote><p>检测对象在输入X中的平移,只会导致隐藏层H中的平移</p><p>V和U实际上不依赖于(i,j)的值,即$[V]_{i,j,a,b}=[V]_{a,b}$,且U是一个常数</p></blockquote><p>$[H]_{i,j}=u+\sum\limits_a\sum\limits_b[V]_{a,b}[X]_{i+a,j+b}$</p><h3 id="局部性"><a href="#局部性" class="headerlink" title="局部性"></a>局部性</h3><blockquote><p>$[H]_{i,j}$不会关注距离(i,j)太远的地方</p></blockquote><p>$[H]_{i,j}=u_d+\sum\limits^{\Delta}_{a=-\Delta}\sum\limits^{\Delta}_{b=-\Delta}[V]_{a,b}[X]_{i+a,j+b}$</p><h3 id="代价"><a href="#代价" class="headerlink" title="代价"></a>代价</h3><ul><li>特征必须平移不变</li><li>每一层只包含局部信息</li></ul><h2 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h2><blockquote><p>对于图像,一般是三维的张量</p></blockquote><p>$[H]_{i,j,d}=\sum\limits^{\Delta}_{a=-\Delta}\sum\limits^{\Delta}_{b=-\Delta}\sum\limits^{\Delta}_{c}[V]_{a,b,c,d}[X]_{i+a,j+b,c}$</p><h1 id="图像卷积"><a href="#图像卷积" class="headerlink" title="图像卷积"></a>图像卷积</h1><p>$n_k\times n_w的输入矩阵,k_h\times k_w的卷积核,输出矩阵为(n_k-k_h+1)\times(n_w-k_w+1)$</p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4-CPU设计文档</title>
    <link href="/2024/11/04/P4-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/11/04/P4-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU设计文档"><a href="#CPU设计文档" class="headerlink" title="CPU设计文档"></a>CPU设计文档</h1><h2 id="设计草稿"><a href="#设计草稿" class="headerlink" title="设计草稿"></a>设计草稿</h2><h3 id="层次设计"><a href="#层次设计" class="headerlink" title="层次设计"></a>层次设计</h3><blockquote><p><code>mips.v</code>为主电路文件,内含8个子电路文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">-- mips<br>-- uut1 - pc<br>-- uut2 - im<br>-- uut3 - grf<br>-- uut4 - alu<br>-- uut5 - nxtad<br>-- uut6 - dm<br>-- uut7 - ctrl<br>-- uut8 - ext<br></code></pre></td></tr></table></figure><h3 id="数据通路设计"><a href="#数据通路设计" class="headerlink" title="数据通路设计"></a>数据通路设计</h3><p><img src="image-20241029153321435.png" alt="数据通路"></p><h3 id="PC设计"><a href="#PC设计" class="headerlink" title="PC设计"></a>PC设计</h3><blockquote><p>在时钟上升沿,<code>reset</code>为1则将<code>pc_out</code>置位<code>32&#39;h3000</code>;否则将<code>pc_in</code>传递给<code>pc_out</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> pc(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_out<br>    );<br></code></pre></td></tr></table></figure><h3 id="IM设计"><a href="#IM设计" class="headerlink" title="IM设计"></a>IM设计</h3><blockquote><p>访问ROM中的<code>pc</code>地址,输出数据到<code>instr</code>,容量为$4096\times 32bit$</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> im(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] instr<br>    );<br></code></pre></td></tr></table></figure><h3 id="GRF设计"><a href="#GRF设计" class="headerlink" title="GRF设计"></a>GRF设计</h3><blockquote><p>一个由32个32位寄存器组成寄存器堆</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> grf(<br>    <span class="hljs-keyword">input</span> write_enable, <span class="hljs-comment">// 写入使能信号</span><br>    <span class="hljs-keyword">input</span> clk, <span class="hljs-comment">// 时钟信号</span><br>    <span class="hljs-keyword">input</span> reset, <span class="hljs-comment">// 同步复位信号</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a1, <span class="hljs-comment">// 读出数据的寄存器</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a2, <span class="hljs-comment">// 读出数据的寄存器</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a3, <span class="hljs-comment">// 写入数据的寄存器</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] rd1, <span class="hljs-comment">// a1寄存器的读出值</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] rd2, <span class="hljs-comment">// a2寄存器的读出值</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] wpc, <span class="hljs-comment">// 当前指令地址</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] wd3 <span class="hljs-comment">// a3寄存器的写入值</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="ALU设计"><a href="#ALU设计" class="headerlink" title="ALU设计"></a>ALU设计</h3><blockquote><p>计算模块,根据<code>ALUControl</code>信号对<code>src_a</code>,<code>src_b</code>进行计算,结果输出到<code>alu_result</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> alu(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src_a, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src_b,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] alu_control, <span class="hljs-comment">// ALU控制信号</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] alu_result, <span class="hljs-comment">// 计算结果</span><br>    <span class="hljs-keyword">output</span> zero <span class="hljs-comment">// src_a, src_b相减为0时置1</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="NXTAd设计"><a href="#NXTAd设计" class="headerlink" title="NXTAd设计"></a>NXTAd设计</h3><blockquote><p>计算下一个指令地址的模块</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> nxtad(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc, <span class="hljs-comment">// 当前指令地址</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] instr, <span class="hljs-comment">// 当前指令</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] gpr_rs, <span class="hljs-comment">// GPR[rs]</span><br>    <span class="hljs-keyword">input</span> jump, <span class="hljs-comment">// Jump信号(由指令jal激活)</span><br>    <span class="hljs-keyword">input</span> jr, <span class="hljs-comment">// Jr信号(由指令jr激活)</span><br>    <span class="hljs-keyword">input</span> zero, <span class="hljs-comment">// zero信号(来自于ALU)</span><br>    <span class="hljs-keyword">input</span> branch, <span class="hljs-comment">// Branch信号(由指令beq激活)</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] next_pc, <span class="hljs-comment">// 下一个指令地址</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_plus_four <span class="hljs-comment">// 当前指令地址 + 4</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="DM设计"><a href="#DM设计" class="headerlink" title="DM设计"></a>DM设计</h3><blockquote><p>数据存储器,容量为$3072\times 32bit$</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dm(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> MemWrite, <span class="hljs-comment">// memory write enable</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr, <span class="hljs-comment">// memory&#x27;s address for write</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] din, <span class="hljs-comment">// write data</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc, <span class="hljs-comment">// instruction address</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] dout <span class="hljs-comment">// read data</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="Ctrl设计"><a href="#Ctrl设计" class="headerlink" title="Ctrl设计"></a>Ctrl设计</h3><blockquote><p>Control模块,根据指令输出对应的控制信号</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ctrl(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> RegWrite,<br>    <span class="hljs-keyword">output</span> MemWrite,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] ALUControl,<br>    <span class="hljs-keyword">output</span> ALUSrc,<br>    <span class="hljs-keyword">output</span> MemtoReg,<br>    <span class="hljs-keyword">output</span> RegDst,<br>    <span class="hljs-keyword">output</span> Branch,<br>    <span class="hljs-keyword">output</span> Jump,<br>    <span class="hljs-keyword">output</span> ExtControl,<br>    <span class="hljs-keyword">output</span> Jr,<br>    <span class="hljs-keyword">output</span> Jal<br>    );<br></code></pre></td></tr></table></figure><h3 id="Ext设计"><a href="#Ext设计" class="headerlink" title="Ext设计"></a>Ext设计</h3><blockquote><p>扩位模块,根据信号<code>ExtControl</code>对立即数进行不同形式的扩展</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ext(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] imm16,<br>    <span class="hljs-keyword">input</span> ExtControl, <span class="hljs-comment">// 控制信号</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] imm32 <span class="hljs-comment">// 32位输出(零扩展或者符号扩展)</span><br>    );<br></code></pre></td></tr></table></figure><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><h3 id="Python自动生成asm文件"><a href="#Python自动生成asm文件" class="headerlink" title="Python自动生成asm文件"></a>Python自动生成asm文件</h3><blockquote><p>利用python生成asm文件</p></blockquote><h3 id="Mars产生机器码文件及正确运行结果"><a href="#Mars产生机器码文件及正确运行结果" class="headerlink" title="Mars产生机器码文件及正确运行结果"></a>Mars产生机器码文件及正确运行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar Mars_perfect.jar mc CompactDataAtZero a dump .text HexText code.txt nc instruction.asm<br>java -jar Mars_perfect.jar mc CompactDataAtZero nc instruction.asm &gt; right_ans.txt<br></code></pre></td></tr></table></figure><blockquote><p>机器码文件:</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">00000000</span><br>3555ec49<br>3c0b8baa<br><span class="hljs-number">00ada820</span><br>...<br><span class="hljs-number">0399e020</span><br>12bcfff3<br><span class="hljs-number">341000b8</span><br>8e1d0034<br><br></code></pre></td></tr></table></figure><blockquote><p>正确运行结果:</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@00003004:</span> $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">0000</span>ec49<br><span class="hljs-variable">@00003008</span>: $<span class="hljs-number">11</span> &lt;= <span class="hljs-number">8</span>baa0000<br><span class="hljs-variable">@0000300c</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00000000</span><br>...<br><span class="hljs-variable">@00003240</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00001</span>bef<br></code></pre></td></tr></table></figure><h3 id="iverilog产生检测文件运行结果"><a href="#iverilog产生检测文件运行结果" class="headerlink" title="iverilog产生检测文件运行结果"></a>iverilog产生检测文件运行结果</h3><blockquote><p><code>cmd</code>执行以下命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iverilog -o wave -y docs tb_mips.v<br>vvp -n wave -lxt2 &gt; your_ans.txt<br></code></pre></td></tr></table></figure><p>运行结果输出到<code>your_ans.txt</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@00003004:</span> $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">0000</span>ec49<br><span class="hljs-variable">@00003008</span>: $<span class="hljs-number">11</span> &lt;= <span class="hljs-number">8</span>baa0000<br><span class="hljs-variable">@0000300c</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00000000</span><br>...<br><span class="hljs-variable">@00003240</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00001</span>bef<br></code></pre></td></tr></table></figure><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>阅读下面给出的 DM 的输入示例中（示例 DM 容量为 4KB，即 32bit × 1024字），根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr 位数为什么是 [11:2] 而不是 [9:0] ？</p><p><img src="http://cscore.buaa.edu.cn/assets/cscore-image/refkxh/86953c72-c519-48b2-8cb8-7b2c90850e53/66.png" alt="66.png"></p><blockquote><p><code>addr</code>来自<code>ALU</code>模块的计算结果,该计算结果为<code>GPR[base]+SignExtend[imm]</code>,其中<code>base</code>是指令的25-21位,<code>imm</code>是指令的15-0位.</p><p>由于DM容量为4KB,DM应当取[11:0],又因为按字节寻址,只要取[11:2],</p></blockquote></li><li><p>思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣。</p><blockquote><p>记录指令对应的控制信号:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 写入寄存器使能信号</span><br><span class="hljs-keyword">assign</span> RegWrite = R || lui || ori || lw || jal;<br><span class="hljs-comment">// 写入Memory使能信号</span><br><span class="hljs-keyword">assign</span> MemWrite = sw;<br><span class="hljs-comment">// ALU控制信号</span><br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">0</span>] = ori || lui;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">1</span>] = sub || lui || lw || sw || add || beq;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">2</span>] = sub || beq;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// ALUSrc:ALU读入端口来源控制信号(寄存器 or 立即数)</span><br><span class="hljs-keyword">assign</span> ALUSrc = lui || lw || sw || ori;<br><span class="hljs-comment">// MemtoReg:为1时,寄存器写入数据来自Memory,否则为ALU计算结果</span><br><span class="hljs-keyword">assign</span> MemtoReg = lw;<br><span class="hljs-comment">// RegDst:寄存器写入地址端口选择信号(1-&gt;15:11, 0-&gt;20:16)</span><br><span class="hljs-keyword">assign</span> RegDst = R;<br><span class="hljs-comment">// Branch:跳转信号</span><br><span class="hljs-keyword">assign</span> Branch = beq;<br><span class="hljs-comment">// Jump:jal,j跳转信号</span><br><span class="hljs-keyword">assign</span> Jump = jal;<br><span class="hljs-comment">// ExtControl:选择Ext扩位方式</span><br><span class="hljs-keyword">assign</span> ExtControl = ori || lui;<br><span class="hljs-comment">// Jr</span><br><span class="hljs-keyword">assign</span> Jr = jr;<br><span class="hljs-comment">// Jal</span><br><span class="hljs-keyword">assign</span> Jal = jal;<br></code></pre></td></tr></table></figure><p>记录控制信号每种取值对应的指令:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">case</span>(option)<br>    beq:<span class="hljs-keyword">begin</span><br>        RegWrite = <span class="hljs-number">1&#x27;b0</span>;<br>        MemWrite = <span class="hljs-number">1&#x27;b0</span>;<br>        ALUControl=<span class="hljs-number">4&#x27;b110</span>;<br>        <span class="hljs-comment">// RegDst = 1&#x27;bX; (无关信号)</span><br>        <span class="hljs-comment">// MemtoReg = 1&#x27;bX; (无关信号)</span><br>        ALUSrc = <span class="hljs-number">1&#x27;b0</span>;<br>        Branch = <span class="hljs-number">1&#x27;b1</span>;<br>        Jump = <span class="hljs-number">1&#x27;b0</span>;<br>        ExtControl = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    ...<br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><p>优劣:</p><ol><li>前者在添加新的信号时修改代码更为方便,减少工作量,后者代码量较大,需要指明新指令对应的每个信号的值;</li><li>后者更为直观,容易检查错误,前者不够直观.</li></ol></blockquote></li><li><p>在相应的部件中，复位信号的设计都是<strong>同步复位</strong>，这与 P3 中的设计要求不同。请对比<strong>同步复位</strong>与<strong>异步复位</strong>这两种方式的 reset 信号与 clk 信号优先级的关系。</p><blockquote><p>同步复位:<code>reset</code>小于<code>clk</code></p><p>异步复位:<code>reset</code>大于<code>clk</code></p></blockquote></li><li><p>C 语言是一种弱类型程序设计语言。C 语言中不对计算结果溢出进行处理，这意味着 C 语言要求程序员必须很清楚计算结果是否会导致溢出。因此，如果仅仅支持 C 语言，MIPS 指令的所有计算指令均可以忽略溢出。 请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu 是等价的。提示：阅读《MIPS32® Architecture For Programmers Volume II: The MIPS32® Instruction Set》中相关指令的 Operation 部分。</p></li></ol><blockquote><p><code>addi</code>,<code>add</code>在发生溢出时,会放弃对寄存器赋值的操作,<code>addiu</code>,<code>addu</code>会忽略溢出.当在忽略溢出的前提下,<code>addi</code>与<code>addiu</code>等价,<code>add</code>与<code>addu</code>等价</p></blockquote><h2 id="附件"><a href="#附件" class="headerlink" title="附件"></a>附件</h2><h3 id="Python自动生成代码"><a href="#Python自动生成代码" class="headerlink" title="Python自动生成代码"></a>Python自动生成代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=gb2312</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br>number = <span class="hljs-number">50</span><br>gpr = [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span><br>mem = [<span class="hljs-number">0</span>] * (<span class="hljs-number">2</span>**<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_add</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rd = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> -<span class="hljs-number">2</span>**<span class="hljs-number">31</span> &lt;= gpr[rs] + gpr[rt] &lt;= <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:  <span class="hljs-comment"># 若溢出,则不打印这条指令</span><br>        gpr[rd] = gpr[rs] + gpr[rt] <span class="hljs-keyword">if</span> rd != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        f.write(<span class="hljs-string">&#x27;add &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_sub</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rd = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> -<span class="hljs-number">2</span>**<span class="hljs-number">31</span> &lt;= gpr[rs] + gpr[rt] &lt;= <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:  <span class="hljs-comment"># 若溢出,则不打印这条指令</span><br>        gpr[rd] = gpr[rs] + gpr[rt] <span class="hljs-keyword">if</span> rd != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        f.write(<span class="hljs-string">&#x27;sub &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_ori</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>        gpr[rt] = gpr[rs] | imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lw</span>(<span class="hljs-params">f</span>):<br>    base = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">if</span> base != <span class="hljs-number">0</span>:<br>        gpr[base] = imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    offset = (randint(-<span class="hljs-number">200</span>, <span class="hljs-number">200</span>) // <span class="hljs-number">4</span>) * <span class="hljs-number">4</span> - (gpr[base] % <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">10</span> &gt; offset + gpr[base] &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>            gpr[rt] = mem[gpr[base] + offset]<br>        f.write(<span class="hljs-string">&#x27;lw &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(offset) + <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;)\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_sw</span>(<span class="hljs-params">f</span>):<br>    base = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">if</span> base != <span class="hljs-number">0</span>:<br>        gpr[base] = imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    offset = (randint(-<span class="hljs-number">200</span>, <span class="hljs-number">200</span>) // <span class="hljs-number">4</span>) * <span class="hljs-number">4</span> - (gpr[base] % <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> ** <span class="hljs-number">10</span> &gt; offset + gpr[base] &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>            gpr[rt] = mem[gpr[base] + offset]<br>        f.write(<span class="hljs-string">&#x27;sw &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(offset) + <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;)\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ori</span>(<span class="hljs-params">f, key, num</span>):<br>    gpr[key] = num<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(key) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">f, rd, rs, rt</span>):<br>    gpr[rd] = gpr[rs] + gpr[rt]<br>    f.write(<span class="hljs-string">&#x27;add &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">f, rd, rs, rt</span>):<br>    gpr[rd] = gpr[rs] - gpr[rt]<br>    f.write(<span class="hljs-string">&#x27;sub &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>label_ct = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_beq</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> label_ct<br>    rs = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 排除$0</span><br>    rt = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">while</span> rt == rs:<br>        rt = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># rt != rs</span><br>    key1 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 中转</span><br>    <span class="hljs-keyword">while</span> key1 == rt <span class="hljs-keyword">or</span> key1 == rs:<br>        key1 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br>    key2 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 中转</span><br>    <span class="hljs-keyword">while</span> key2 == rt <span class="hljs-keyword">or</span> key2 == rs <span class="hljs-keyword">or</span> key2 == key1:<br>        key2 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br><br><br>    mod = randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 跳转方向</span><br>    equal = randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 是否相等</span><br>    label = <span class="hljs-string">&#x27;labelx&#x27;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct))<br>    label_ct += <span class="hljs-number">1</span><br>    in_ct = randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>)  <span class="hljs-comment"># 指令总数</span><br><br>    <span class="hljs-comment"># 这里为了避免溢出,我们取一个较小的数而且它不能是0</span><br>    imm = randint(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>**<span class="hljs-number">10</span>-<span class="hljs-number">1</span>)<br>    ori(f, key1, imm)  <span class="hljs-comment"># 将中转寄存器key1设为imm</span><br>    ori(f, key2, imm)<br><br>    <span class="hljs-keyword">if</span> mod == <span class="hljs-number">1</span>:   <span class="hljs-comment"># 向下跳转</span><br>        <span class="hljs-keyword">if</span> equal == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 相等</span><br><br>            imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = gpr[rs] = imm<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 不相等(极小概率相等)</span><br>            imm1 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            imm2 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = imm1<br>            gpr[rs] = imm2<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;beq &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> +<span class="hljs-built_in">str</span> (rt) + <span class="hljs-string">&#x27;,&#x27;</span> + label + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        run(f, in_ct)<br>        f.write(label + <span class="hljs-string">&#x27;:\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 向上跳转</span><br>        f.write(label + <span class="hljs-string">&#x27;:\n&#x27;</span>)<br>        run(f, in_ct)<br>        <span class="hljs-keyword">if</span> equal == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 相等,这里处理死循环的可能</span><br>            sub(f, key1, key1, key2) <span class="hljs-comment"># 第一次循环key1为0</span><br>            imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = gpr[rs] = imm<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            add(f, rt, rt, key1) <span class="hljs-comment"># gpr[rt] = gpr[rt] + 0(key1)</span><br>        <span class="hljs-keyword">else</span>:<br>            imm1 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            imm2 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = imm1<br>            gpr[rs] = imm2<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;beq &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span><br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> + label + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lui</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>        gpr[rt] = imm &lt;&lt; <span class="hljs-number">16</span><br>    f.write(<span class="hljs-string">&#x27;lui&#x27;</span> + <span class="hljs-string">&#x27; $&#x27;</span> + <span class="hljs-built_in">str</span>(rt) +<br>            <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_nop</span>(<span class="hljs-params">f</span>):<br>    f.write(<span class="hljs-string">&#x27;nop\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_jal</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> label_ct<br>    f.write(<span class="hljs-string">&quot;jal labelx\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>    run(f, randint(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>))<br>    f.write(<span class="hljs-string">&quot;labelx:\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>    label_ct += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">f, ct</span>):<br>    op_set = [<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;ori&#x27;</span>, <span class="hljs-string">&#x27;lw&#x27;</span>, <span class="hljs-string">&#x27;sw&#x27;</span>, <span class="hljs-string">&#x27;lui&#x27;</span>, <span class="hljs-string">&#x27;nop&#x27;</span>]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>        op = op_set[randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(op_set)-<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;add&#x27;</span>:<br>            print_add(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sub&#x27;</span>:<br>            print_sub(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;ori&#x27;</span>:<br>            print_ori(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lw&#x27;</span>:<br>            print_lw(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sw&#x27;</span>:<br>            print_sw(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lui&#x27;</span>:<br>            print_lui(f)<br>        <span class="hljs-keyword">else</span>:<br>            print_nop(f)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    op_set = [<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;ori&#x27;</span>, <span class="hljs-string">&#x27;lw&#x27;</span>, <span class="hljs-string">&#x27;sw&#x27;</span>, <span class="hljs-string">&#x27;beq&#x27;</span>, <span class="hljs-string">&#x27;lui&#x27;</span>, <span class="hljs-string">&#x27;nop&#x27;</span>, <span class="hljs-string">&#x27;jal&#x27;</span>]<br>    path = <span class="hljs-string">&#x27;instruction.asm&#x27;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>            ori(f, x, randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number):<br>            op = op_set[randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(op_set) - <span class="hljs-number">1</span>)]<br>            <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;add&#x27;</span>:<br>                print_add(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sub&#x27;</span>:<br>                print_sub(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;ori&#x27;</span>:<br>                print_ori(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lw&#x27;</span>:<br>                print_lw(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sw&#x27;</span>:<br>                print_sw(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;beq&#x27;</span>:<br>                print_beq(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lui&#x27;</span>:<br>                print_lui(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;jal&#x27;</span>:<br>                print_jal(f)<br>            <span class="hljs-keyword">else</span>:<br>                print_nop(f)<br>    <span class="hljs-comment"># 接下来打印jr语句</span><br>        f.write(<span class="hljs-string">&quot;jal labelx\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;jal End\n&quot;</span>)<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;labelx:\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;jr $ra\n&quot;</span>)<br>        <span class="hljs-comment"># &quot;结束&quot;标签</span><br>        f.write(<span class="hljs-string">&quot;End:\n&quot;</span>)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>振动与波</title>
    <link href="/2024/11/04/%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/"/>
    <url>/2024/11/04/%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="阻尼振动方程"><a href="#阻尼振动方程" class="headerlink" title="阻尼振动方程"></a>阻尼振动方程</h2><script type="math/tex; mode=display">\begin{split}&f_阻=-\gamma v=-\gamma \frac{dx}{dt}\\&m\frac{d^2x}{dt^2}=-\gamma\frac{dx}{dt}-kx\\&令\beta=\frac{\gamma}{2m}\\&\frac{dx^2}{dt^2}+2\beta\frac{dx}{dt}+\omega_0^2x=0\\\end{split}</script><h3 id="补充-二阶微分方程"><a href="#补充-二阶微分方程" class="headerlink" title="补充:二阶微分方程"></a>补充:二阶微分方程</h3><script type="math/tex; mode=display">\begin{split}&常系数二阶齐次线性方程:对于y^{``}+py^`+qy=0\\&常系数二阶非齐次线性方程:对于y^{``}+py^`+qy=f(x)\\&非常系数二阶齐次线性方程:y^{``}+P(x)y^`+Q(x)y=0\\&非常系数二阶非齐次线性方程:y^{``}+P(x)y^`+Q(x)y=f(x)\\\end{split}</script><h4 id="常系数二阶齐次线性方程通解"><a href="#常系数二阶齐次线性方程通解" class="headerlink" title="常系数二阶齐次线性方程通解"></a>常系数二阶齐次线性方程通解</h4><script type="math/tex; mode=display">\begin{split}&对于y^{``}+py^`+qy=0\\&设方程:r^2+pr+q=0\\a)&\Delta >0,y=C_1e^{r_1}+C_2e^{r_2}\\b)&\Delta =0,y=Ce^{x}+Cxe^{x}\\c)&\Delta <0,r=a\pm bi\\&y=e^{ax}(C_1\cos(bx)+iC_2\sin(bx) )\\\end{split}</script><h4 id="朗斯基行列式"><a href="#朗斯基行列式" class="headerlink" title="朗斯基行列式"></a>朗斯基行列式</h4><script type="math/tex; mode=display">\begin{split}&朗斯基行列式\\&W(y_1,y_2)=\begin{vmatrix}&y_1&y_2\\&y_1^`&y_2^`\\\end{vmatrix}=y_1y_2^`-y_2y_1^`\\&\frac{d^2y}{dx^2}+p\frac{dy}{dx}+qy=f(x)的特解:\\&y_p(x)=-y_1(x)\int\frac{y_2(x)f(x)}{W(y_1,y_2)}dx+y_2(x)\int\frac{y_1(x)f(x)}{W(y_1,y_2)}dx\end{split}</script><h4 id="刘维尔公式"><a href="#刘维尔公式" class="headerlink" title="刘维尔公式"></a>刘维尔公式</h4><script type="math/tex; mode=display">\begin{split}&对于方程:\\&y^{``}+p(x)y^`+q(x)y=0\\&y_1(x),y_2(x)是该方程的解,则C_1y_1(x)+C_2y_2(x)也是该方程的解\\\end{split}</script><script type="math/tex; mode=display">\begin{align}&令y_2=uy_1:\\y_2=uy_1&\Leftrightarrow y_2^`=u^`y_1+uy_1^`\\&\Leftrightarrow y_2^{``}=u^{``}y_1+2u^`y_1^`+uy_1^{``}\\\end{align}</script><script type="math/tex; mode=display">\begin{split}&u^{``}y_1+2u^`y_1^`+uy_1^{``}+p(x)(u^`y_1+uy_1^`)+q(x)uy_1=0\\&解得:u=\int\frac{1}{y_1^2}\cdot e^{-\int pdx}dx\\&另一个特解:y_2=y_1\int\frac{1}{y_1^2}e^{-\int pdx}dx(刘维尔公式)\\\end{split}</script><script type="math/tex; mode=display">\begin{split}那么方程的解:y=C_1y+C_2y_1\int\frac{1}{y_1^2}e^{-\int pdx}dx\end{split}</script><blockquote><p>回到阻尼振动方程</p></blockquote><h3 id="阻尼振动方程-1"><a href="#阻尼振动方程-1" class="headerlink" title="阻尼振动方程"></a>阻尼振动方程</h3><script type="math/tex; mode=display">\begin{split}&\frac{dx^2}{dt^2}+2\beta\frac{dx}{dt}+\omega_0^2x=0\\&r^2+2\beta r+\omega_0^2=0\\&\Delta=4\beta^2-4\omega_0^2\\&这里我们要求阻尼较小,即\beta<<\omega_0,则\Delta <0\\&r=-\beta\pm\sqrt{\omega_0^2-\beta^2}\ i\\&则解为:\\&x=e^{-\beta t}(C_1\cos(\sqrt{\omega_0^2-\beta^2}t)+C_2i\sin(\sqrt{\omega_0^2-\beta^2}t))\\&可以得到x=A_0e^{-\beta t}\cos (\omega^`t+\phi),\omega^`=\sqrt{\omega_0-\beta^2}\\\end{split}</script>]]></content>
    
    
    
    <tags>
      
      <tag>Physics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUAA OOPre总结</title>
    <link href="/2024/11/01/BUAA%202024OOPre%E6%80%BB%E7%BB%93/"/>
    <url>/2024/11/01/BUAA%202024OOPre%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="BUAA-2024-OOPre总结"><a href="#BUAA-2024-OOPre总结" class="headerlink" title="BUAA 2024 OOPre总结"></a>BUAA 2024 OOPre总结</h1><h2 id="架构设计"><a href="#架构设计" class="headerlink" title="架构设计"></a>架构设计</h2><h3 id="最终架构"><a href="#最终架构" class="headerlink" title="最终架构"></a>最终架构</h3><p>最终作业架构的设计如下(<code>Bouml</code>软件制作):</p><p><img src="image-20241101173321658.png" alt="最终架构设计"></p><ul><li>主函数为<code>Main()</code>,调用<code>Solver</code>类</li><li><code>Solver</code>类接收输入,内含一个<code>ArrayList&lt;Adventurer&gt;</code>,通过输入调用对应函数对<code>ArrayList&lt;Adventurer&gt;</code>进行处理</li><li><code>Adventurer</code>类继承<code>Employer</code>,<code>Employee</code>接口</li><li><code>Adventurer</code>类拥有<code>Bottle</code>,<code>Equipment</code>,<code>Fragments</code>的组合,表示该冒险者拥有的药水瓶,装备,碎片</li><li><code>AdventurerGame</code>依赖于<code>Guard</code>接口,<code>Guard</code>接口由<code>Stn</code>,<code>Flm</code>,<code>Stn</code>,<code>Frz</code>,<code>Wnd</code>五种类(怪物)实现</li><li><code>TreasureFactory</code>依赖于<code>Treasure</code>接口,<code>Treasure</code>接口由<code>StnTreasure</code>,<code>FlmTreasure</code>,<code>StnTreasure</code>,<code>FrzTreasure</code>,<code>WndTreasure</code>五种类(宝物)实现</li></ul><h3 id="迭代调整"><a href="#迭代调整" class="headerlink" title="迭代调整"></a>迭代调整</h3><ol><li>第三次作业实现了继承,将<code>Bottle</code>类实现为父类,<code>HpBottle</code>,<code>AtkBottle</code>,<code>DefBottle</code>类作为子类继承其方法</li><li>第五次作业新增<code>Fragment</code>类,并撰写了一个<code>Solver</code>类来处理输入,由于评测机的<code>JUnit</code>测试似乎不支持文件重定向,将<code>Solver</code>类调用的函数修改为以字符串为参数</li><li>第六次作业新增工厂模式生成<code>Treasure</code>类,观察者模式实现<code>Employee</code>与<code>Employer</code>接口</li></ol><h2 id="JUnit使用心得体会"><a href="#JUnit使用心得体会" class="headerlink" title="JUnit使用心得体会"></a>JUnit使用心得体会</h2><p>在进行<code>JUnit</code>测试的过程中我们要实现两个目标:</p><ol><li>代码覆盖度高,这需要我们撰写出可以覆盖足够多情况的测试样例</li><li>排查代码隐患和错误,考虑足量多的极端情况,比如第六次作业中可能出现被雇佣人攻击雇佣人的情况,这时处理<code>normalFight</code>的顺序非常关键</li></ol><p><code>JUnit</code>可以降低对复杂指令的检查难度,例如<code>chainFight</code>中计算被攻击者的队列,我通过不同的输入样例确保了递归在次数为5会停止</p><p>在对<code>JUnit</code>的探索中,我认识到<code>assert</code>语句的重要性,它可以减少花在排查输出结果的时间</p><p><code>JUnit</code>还可以搭配自动化生成测试数据的程序,虽然不能和正确程序对拍,但是对于理解题目要求与测试覆盖率都有很大的帮助</p><h2 id="OOPre心得体会"><a href="#OOPre心得体会" class="headerlink" title="OOPre心得体会"></a>OOPre心得体会</h2><p>我从OOPre课程中学到了层次化设计,初步理解了面向对象思想,并掌握了<code>Git</code>,<code>Junit</code>等工具的使用</p><p>以我的理解,面向对象即把问题中所有的事物都”抽象”成”对象”,通过封装,继承,多态的概念设计程序,这样的思路极大地提高了代码的可扩展性与可维护性,这些都是我在C语言中的学习中没有机会掌握的</p><p>另外,通过这门课,我的<code>debug</code>能力得到了很大的提升,通过使用<code>JUnit</code>和<code>BreakPoint</code>排查了很多错误</p><p>对代码的重构也是一件很重要的事,<code>checkstyle</code>在敲代码过程中会对重复代码和冗余的代码提出修改,如果重复出现在同一个类中,我们可以重复代码提出来作为一个单独的函数;冗余代码可以根据IDEA提示修改,例如删除一个<code>ArrayList</code>中元素的操作,<code>if (...) remove(...)</code>的代码段可以用一句<code>removeIf()</code>替代.这样,代码才能保持足够的清晰可读性和可维护性</p><h2 id="对OOPre课程建议"><a href="#对OOPre课程建议" class="headerlink" title="对OOPre课程建议"></a>对OOPre课程建议</h2><p>请加入互测功能</p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeNet&amp;AlexNet</title>
    <link href="/2024/11/01/LeNet&amp;AlexNet/"/>
    <url>/2024/11/01/LeNet&amp;AlexNet/</url>
    
    <content type="html"><![CDATA[<h2 id="AlexNet"><a href="#AlexNet" class="headerlink" title="AlexNet"></a>AlexNet</h2><h3 id="第一层"><a href="#第一层" class="headerlink" title="第一层"></a>第一层</h3><div class="table-container"><table><thead><tr><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr><td>image(3X224X224)</td><td>image(32X32)</td><td></td></tr><tr><td>11X11 Conv(96), stride 4</td><td>5X5 Conv,PAD2</td><td></td></tr><tr><td>3X3 MaxPool, stride 2</td><td>2x2 AvrgPool</td></tr></tbody></table></div><h3 id="第二层"><a href="#第二层" class="headerlink" title="第二层"></a>第二层</h3><div class="table-container"><table><thead><tr><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr><td>5X5 Conv(256),pad 2</td><td></td><td></td></tr><tr><td>3X3 MaxPooling,stride 2</td><td></td><td></td></tr><tr><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr><td>3X3 MaxPool, stride 2</td><td></td></tr></tbody></table></div><h3 id="第三层"><a href="#第三层" class="headerlink" title="第三层"></a>第三层</h3><div class="table-container"><table><thead><tr><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr><td>Dense(4096)</td><td>Dense(84)</td><td></td></tr><tr><td>Dense(4096)</td><td>Dense(84)</td><td></td></tr><tr><td>Dense(1000)</td><td>Dense(10)</td></tr></tbody></table></div><p>更多细节</p><ul><li>激活函数从Sigmoid变到了ReLu(减缓梯度消失)</li><li>隐藏全连接层后加入了丢弃层</li><li>数据增加</li></ul><script type="math/tex; mode=display">\text{out}(N_i, C_{\text{out}_j}) = \text{bias}(C_{\text{out}_j}) +        \sum_{k = 0}^{C_{\text{in}} - 1} \text{weight}(C_{\text{out}_j}, k) \star \text{input}(N_i, k)</script>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机变量的数字特征</title>
    <link href="/2024/11/01/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81/"/>
    <url>/2024/11/01/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p>$X\sim U(-\frac{1}{2},\frac{1}{2}),Y=g(X)=\begin{cases}lnX,X&gt;0,\\0,X\leq 0\end{cases}$</p></blockquote><p>$\begin{align}<br>E(Y)=&amp;\int^{+\infty}_{\infty}g(x)f_X(x)dx\\<br>=&amp;\int^{\frac{1}{2} }_{-\frac{1}{2} }g(x)\cdot1dx\\<br>=&amp;\int^{\frac{1}{2} }_{0}\ln xdx\\<br>=&amp;-\frac{1}{2}\ln 2-\frac{1}{2}\\<br>\\<br>E(Y^2)=&amp;\int^{+\infty}_{\infty}g^2(x)f_X(x)dx\\<br>=&amp;\int^{\frac{1}{2} }_{0}\ln xdx\\<br>=&amp;\frac{1}{2}\ln^2 2+1+\ln 2\\<br>D(Y)=&amp;E(Y^2)-(E(Y))^2<br>\end{align}$</p><p><img src="image-20241101101003214.png" alt="image-20241101101003214"></p><div class="table-container"><table><thead><tr><th>$X_i$</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>P</td><td>$\frac{1}{n}$</td><td>$1-\frac{1}{n}$</td></tr></tbody></table></div><p>$E(X_i)=1\cdot \frac{1}{n}+0\cdot (1-\frac{1}{n})=\frac{1}{n}$</p><p>$E(X)=\mathop{\Sigma} _{ i=1}^{n}E(X_i)=1$</p><p>$E(X^2)=E(\Sigma_{i=1}^{n}X_i)^2=\Sigma_{i=1}^n E(X_i^2)+2\Sigma_{1\leq i\leq j\leq n}^nE(X_iX_j)$</p><div class="table-container"><table><thead><tr><th>$X_iX_j$</th><th>1</th><th>0</th></tr></thead><tbody><tr><td>P</td><td>$\frac{1}{n(n-1)}$</td><td>$1-\frac{1}{n(n-1)}$</td></tr></tbody></table></div><p>$E(X_iX_j)=\frac{1}{n(n-1)},i,j=1,2,…,n$</p><p>$E(X_i^2)=\frac{1}{n},n=1,2,…,n$</p><p>$E(X^2)=n\cdot \frac{1}{n}+2\cdot C^2_n\cdot \frac{1}{n(n-1)}=2$</p><p>$D(x)=2-1=1$</p><h2 id="标准化随机变量"><a href="#标准化随机变量" class="headerlink" title="标准化随机变量"></a>标准化随机变量</h2><p>设随机变量X的期望E(X),方差D(X)都存在,且D(X)$\neq$0,称$X^\star=\frac{X-E(X)}{\sqrt{D(X)} }$为X的标准化随机变量</p><p>$E(X^\star)=0,D(X^\star)=1$</p><blockquote><p>若已知分布的类型,及期望和方差,常能确定分布</p></blockquote><p><img src="image-20241101102752881.png" alt="image-20241101102752881"></p><p>$\begin{align}<br>&amp;\int^1_0(Ax^2+Bx)dx=\frac{A}{3}+\frac{B}{2}=1\\<br>&amp;E(X)=\int^1_0x(Ax^2+Bx)dx=\frac{A}{4}+\frac{B}{3}=0.5\\<br>\end{align}$</p><p>$得到:A=-6,B=6$</p><h2 id="协方差"><a href="#协方差" class="headerlink" title="协方差"></a>协方差</h2><p>$E((X-E(X))(Y-E(Y))为随机变量X,Y的协方差$</p><p>$记作\text{cov}(X,Y)=E(XY)-E(X)E(Y)$</p><p>称$\begin{bmatrix}D(X)&amp;\text{cov}(X,Y)\\\text{cov}(X,Y)&amp;D(Y)\end{bmatrix}$</p><p>为(X,Y)的协方差矩阵</p><p>$\rho_{XY}=\frac{\text{cov}(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)} }$</p><p>事实上:$\rho_{XY}=\text{cov}(X^\star,Y^\star)$</p><blockquote><p>若$\rho_{XY}=0$,则称X,Y不相关</p></blockquote><p>$\text{cov}(X,Y)=E((X-E(X))(Y-E(Y)))\\=E(XY)-E(X)E(Y)$</p><p>X,Y相互独立$\Leftrightarrow $X,Y不相关</p><p><img src="image-20241101110908054.png" alt="image-20241101110908054"></p><p>$\begin{align}<br>cov(U,V)=&amp;E(UV)-E(U)E(V)\\<br>=&amp;E(a^2X^2-b^2Y^2)-[E(aX+bY)][E(aX-bY)]\\<br>=&amp;a^2E(X^2)-b^2E(Y^2)-[a^2E^2(X)-b^2E^2(Y)]\\<br>=&amp;a^2[E(X^2)-E^2(X)]-b^2[E(Y^2)-E^2(Y)]\\<br>=&amp;a^2D(X)-b^2D(Y)\\<br>=&amp;(a^2-b^2)\sigma^2\\<br>D(U)=&amp;D(aX+bY)\\<br>=&amp;a^2D(X)+b^2D(Y)=(a^2+b^2)\sigma^2\\<br>D(Y)=&amp;(a^2+b^2)\sigma\\<br>\rho_{UV}=&amp;\frac{cov(U,V)}{\sqrt {D(U)}\sqrt{D(V)} }\\<br>=&amp;\frac{a^2-b^2}{a^2+b^2}\\<br>\end{align}$</p><h2 id="协方差的性质"><a href="#协方差的性质" class="headerlink" title="协方差的性质"></a>协方差的性质</h2><ol><li>$cov(X,Y)=cov(Y,X)=E(XY)-E(X)E(Y)$</li><li>$\text{cov}(aX,bY)=ab\text{cov}(X,Y)$</li><li>$\text{cov}(X,X)=D(X)$</li><li>$|\text{cov}(X,Y)|^2\leq D(X)D(Y)$当且仅当$P(Y-E(Y)=t_0(X-E(X)))=1$</li></ol><h3 id="Cauchy-Schwarz不等式"><a href="#Cauchy-Schwarz不等式" class="headerlink" title="Cauchy-Schwarz不等式"></a>Cauchy-Schwarz不等式</h3><p>$|E(XY)|^2\leq E(X^2)E(Y^2)$</p><p>$\begin{align}<br>g(t)=&amp;E[(X-E(X))\cdot t-(Y-E(Y))]^2\\<br>=&amp;E[(X-E(X))^2t^2-2(X-E(X))t(Y-E(Y))+(Y-E(Y))^2]\\<br>=&amp;D(X)t^2-2\text{cov}(X,Y)+D(Y)\\<br>\end{align}$</p><p>对于任何实数$t$,$g(t)\geq 0\rightarrow 4\text{cov}^2(X,Y)-4D(X)D(Y)\leq 0$</p><p>即$|cov(X,Y)|^2\leq D(X)D(Y)$</p><p>$g(t_0)=0$时,有两个相等的实零点</p><p>等号成立,$|cov(x,Y)|^2=D(X)D(Y)$</p><p>$t_0=\pm\sqrt{\frac{D(Y)}{D(X)} }$</p><p>$\begin{cases}E[(Y-E(Y))-t_0(X-E(X))]^2=0\\E[(Y-E(Y))-t_0(X-E(X))]=0\end{cases}\leftrightarrow \begin{cases}D[(Y-E(Y))-t_0(X-E(X))]=0\\E[(Y-E(Y))-t_0(X-E(X))=0]=1\end{cases}$</p><p>若X,Y服从二维正态分布,$X,Y相互独立\Leftrightarrow X,Y不相关$</p><p><img src="image-20241101115529133.png" alt="image-20241101115529133"></p><p>$\begin{align}<br>&amp;E(X)=E(Y)=1,D(X)=D(Y)=4,\rho_{XY}=\frac{1}{2}\\<br>&amp;cov(X,Y)=\rho_{XY}\sqrt{D(X)}\sqrt{D(Y)}=2\\<br>&amp;cov(X,Z)=cov(X,X)+cov(X,Y)=D(X)+\rho_{XY}\sqrt{D(X)}\sqrt{D(Y)}\\<br>&amp;=4+\frac{1}{2}\cdot\sqrt{4}\cdot \sqrt{4}=6\\<br>&amp;D(Z)=D(X)+D(Y)+2cov(X,Y)=12\\<br>&amp;\rho_{XZ}=\frac{\sqrt {3} }{2}\end{align}$</p><h2 id="重要数学期望"><a href="#重要数学期望" class="headerlink" title="重要数学期望"></a>重要数学期望</h2><p>$E(X^k)$X的k阶原点矩</p><p>$E(|X|^k)$X的k阶绝对原点矩</p><p>$E((X-E(X))^k)$X的k阶中心矩</p><h2 id="马尔可夫不等式"><a href="#马尔可夫不等式" class="headerlink" title="马尔可夫不等式"></a>马尔可夫不等式</h2><p>$P(X\geq \varepsilon)\leq \frac{E(x)}{\varepsilon}$</p><p>$证:P(X\geq\varepsilon)=\int^{+\infty}_{\varepsilon}f(x)dx\leq\int^{+\infty}_{\varepsilon}\frac{x}{\varepsilon}f(x)dx\\\leq\frac{1}{\varepsilon}\int^{+\infty}_0 xf(x)dx=\frac{E(X)}{\varepsilon}$</p><h3 id="推论1"><a href="#推论1" class="headerlink" title="推论1"></a>推论1</h3><p>$P(|X|\geq \varepsilon)\leq\frac{E(|X|^k)}{\varepsilon^k}$</p><script type="math/tex; mode=display">\begin{aligned}&P(|X|\geq \varepsilon)=P(|X|^k\geq \varepsilon^k) \leq \dfrac{E(|X|^k)}{\varepsilon_k}\end{aligned}</script><h3 id="推论2-切比雪夫不等式"><a href="#推论2-切比雪夫不等式" class="headerlink" title="推论2 切比雪夫不等式"></a>推论2 切比雪夫不等式</h3><p>$P(|X-E(X)|\geq \varepsilon)\leq \frac{D(X)}{\varepsilon^2}$</p><p>$proof:P(|X-E(x)|\geq \varepsilon)=P(|X-E(x)|^2\geq \varepsilon^2)\\\leq \frac{E(|X-E(X)|^2)}{\varepsilon^2}=\frac{D(X)}{\varepsilon^2}$</p><p><img src="image-20241108101426956.png" alt="image-20241108101426956"></p><p>$X\sim B(6000,\frac{1}{6})\\E(X)=1000\\D(X)=6000\times\frac{1}{6}\times\frac{5}{6}=\frac{5000}{6}$</p><p>$P(|\frac{X}{6000}-\frac{1}{6}|&lt;0.01)=P(|X-6000|&lt;60)\\\geq 1-\frac{\frac{5000}{6} }{60^2}=0.7685$</p><h2 id="切比雪夫大数定律"><a href="#切比雪夫大数定律" class="headerlink" title="切比雪夫大数定律"></a>切比雪夫大数定律</h2><p>$D(X_k)=\sigma^2_k\leq c,k=1,2,…$</p><p>则有</p><p>$\lim\limits_{n\rightarrow \infty}D(\frac{1}{n}\mathop\Sigma\limits_{k=1}^nE(X_k))=0$</p><p>$proof:E(\frac{1}{n}\mathop\Sigma\limits^n_{i=1}X_i)=\frac{1}{n}\mathop\Sigma\limits^n_{i=1}E(X_i)\\D(\frac{1}{n}\mathop\Sigma^n_{i=1}X_i)=\frac{1}{n^2}\mathop\Sigma^n_{i=1}D(X_i)=\frac{1}{n^2}\cdot nc\\=\frac{c}{n}$</p><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>$\lim\limits_{n\rightarrow \infty}P(|Y_n-a|\geq \varepsilon)=0\\\lim\limits_{n\rightarrow \infty}P(|Y_n-a|&lt; \varepsilon)=1$</p><p>记作$Y_n\mathop\rightarrow\limits^P_{n\rightarrow \infty}a$</p><h3 id="辛钦大数定律"><a href="#辛钦大数定律" class="headerlink" title="辛钦大数定律"></a>辛钦大数定律</h3><p>$\lim\limits_{n\rightarrow \infty}(|\frac{1}{n}\mathop\Sigma\limits_{k=1}^nX_k-\mu|\geq\varepsilon)=0$</p><h2 id="伯努利大数定律"><a href="#伯努利大数定律" class="headerlink" title="伯努利大数定律"></a>伯努利大数定律</h2><p>$\lim\limits_{n\rightarrow \infty} P(|\frac{n_A}{n}-p|\geq \varepsilon)=0$</p><h3 id="意义"><a href="#意义" class="headerlink" title="意义"></a>意义</h3><p>回答了:为何能以某事件发生的概率作为事件的概率的估计</p><h2 id="独立同分布的中心极限定理"><a href="#独立同分布的中心极限定理" class="headerlink" title="独立同分布的中心极限定理"></a>独立同分布的中心极限定理</h2><p>$随机变量序列X_1,X_2,…,X_n,…相互独立,\\服从同一分布,且有期望和方差:\\E(X_k)=\mu,D(X_k)=\sigma^2,k=1,2…$</p><p>$\lim\limits_{n\rightarrow \infty}P(\frac{\mathop\Sigma\limits^{n}_{k=1}X_k-n\mu}{\sqrt{n}\sigma}\leq x)=\frac{1}{\sqrt{2\pi} }\int^x_{-\infty}e^{-\frac{t^2}{2} }dt$</p><h2 id="德莫佛-拉普拉斯中心极限定理"><a href="#德莫佛-拉普拉斯中心极限定理" class="headerlink" title="德莫佛-拉普拉斯中心极限定理"></a>德莫佛-拉普拉斯中心极限定理</h2><p>$Y_n\sim B(n,p),0&lt;p&lt;1,n=1,2,…$</p><p>$\lim\limits_{n\rightarrow \infty}P(\frac{Y_n-n\mu}{\sqrt{np(1-p)} }\leq x)=\frac{1}{\sqrt{2\pi} }\int^x_{-\infty}e^{-\frac{t^2}{2} }dt$</p><p>即对任意的a&lt;b,</p><p>$\lim\limits_{n\rightarrow \infty}P(a&lt;\frac{Y_n-np}{\sqrt{np(1-p)} }\leq b)=\frac{1}{\sqrt{2\pi} }\int^b_ae^{-\frac{t^2}{2} }dt$</p><p>$Y_n\sim N(np,np(1-p))(近似)$</p><p><img src="image-20241108114422370.png" alt="标准正态分布表"></p>]]></content>
    
    
    <categories>
      
      <category>概率与数理模型</category>
      
    </categories>
    
    
    <tags>
      
      <tag>概统</tag>
      
      <tag>概率统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令流水线</title>
    <link href="/2024/10/30/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4/"/>
    <url>/2024/10/30/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="指令流水线"><a href="#指令流水线" class="headerlink" title="指令流水线"></a>指令流水线</h1><h2 id="指令流水"><a href="#指令流水" class="headerlink" title="指令流水"></a>指令流水</h2><ol><li>取值</li><li>分析</li><li><p>执行</p></li><li><p>顺序执行方式,传统的冯诺依曼机采用顺序执行方式,又称为串行执行方式</p></li><li>一次重叠执行方式</li></ol><p><img src="image-20241030161836112.png" alt="一次重叠"></p><p>优点:执行时间缩短1/3,部件利用率提高</p><p>缺点:硬件上开销代价大,控制过程更为复杂</p><ol><li>二次重叠执行方式</li></ol><p><img src="image-20241030162048191.png" alt="image-20241030162048191"></p><p>缩短近2/3(理想情况)</p><blockquote><p>我们可以将指令执行分为四或五个阶段,并且每个阶段利用的部件相互独立,则可以让CPU实现同时运行四/五条指令</p></blockquote><p>流水线的表示方法</p><ol><li>指令执行过程图</li></ol><p>​    <img src="image-20241030162415476.png" alt="image-20241030162415476"></p><ol><li>时空图</li></ol><p><img src="image-20241030162435291.png" alt="image-20241030162435291"></p><h2 id="性能标准"><a href="#性能标准" class="headerlink" title="性能标准"></a>性能标准</h2><p><strong>吞吐率</strong>:处理完成n个任务所用的时间为$T_k$,$TP=\frac{n}{T_K}$</p><p> $TP_{max}=\frac{1}{\Delta t}$</p><p><img src="image-20241030162818987.png" alt="image-20241030162818987"></p><p>$0-k\Delta t$:装入时间</p><p>$k\Delta t-(k+n-1)\Delta t$</p><p><strong>加速比</strong>:完成同样一批任务,不使用流水线所用的时间与所用流水线的时间之比</p><p><strong>效率</strong>:流水线的设备利用率</p><p><img src="image-20241030163430255.png" alt="image-20241030163430255"></p><p>$n\rightarrow \infty时,E_{max}=1$</p><h2 id="影响因素"><a href="#影响因素" class="headerlink" title="影响因素"></a>影响因素</h2><p><img src="image-20241030163719987.png" alt="机器周期的设置"></p><blockquote><p>由经典MIPS架构提出的五阶段执行理念</p></blockquote><p>五阶段:</p><ol><li><strong>Instruction Fetch</strong>:取指令</li><li><strong>Instruction Decode</strong>:解码指令</li><li><strong>EXecute</strong>:执行指令</li><li><strong>Memory</strong>:访存</li><li><strong>Write Back</strong>:回写</li></ol><blockquote><p>为方便流水线的设计,将每个阶段的耗时取成一样,以最长耗时为准</p><p>为了保证各阶段之间数据的传递,我们在每个阶段之间需要增加一个缓冲寄存器(或称为锁存器),作用是保存本流水段的执行结果,提供给下一流水段使用</p></blockquote><p>影响因素</p><ol><li>结构相关(资源冲突)</li><li>数据相关(数据冲突)</li><li>控制相关(控制冲突)</li></ol><h3 id="结构相关"><a href="#结构相关" class="headerlink" title="结构相关"></a>结构相关</h3><p>多条指令在同一时刻争用同一资源而形成的冲突称为结构相关</p><p>解决办法:</p><ol><li>后一指令暂停一周期</li><li>资源重复配置:数据存储器+指令存储器</li></ol><h3 id="数据相关"><a href="#数据相关" class="headerlink" title="数据相关"></a>数据相关</h3><p>在一个程序中,存在必须等前一条指令执行完才能执行后一条指令的情况</p><p> 解决办法:</p><ol><li>把遇到数据相关的指令及其后续指令都暂停一至几个时钟周期,直到数据相关问题消失后再继续执行,分为:<ol><li>硬件阻塞</li><li>软件插入<code>NOP</code></li></ol></li><li>数据旁路技术</li><li>编译优化:通过编译器调整指令顺序来解决数据相关</li></ol><h3 id="控制相关"><a href="#控制相关" class="headerlink" title="控制相关"></a>控制相关</h3><p>当流水线遇到转移指令和其他改变PC值的指令而造成断流时,会引起控制相关</p><p>解决办法:</p><ol><li>转移指令分支预测</li><li>预取转移成功和不成功两个控制流方向上的目标指令</li><li>加快和提前形成条件码</li></ol><p>流水线的分类</p><ol><li>部件功能级,处理机级,处理机间级流水线</li><li>单功能流水线和多功能流水线</li><li>静态流水线和动态流水线</li></ol><p><img src="image-20241030190211089.png" alt="数据通路"></p><p>集中式控制器</p><ul><li>控制器只集中实现在ID阶段</li><li>控制器产生全部的译码信号</li><li>流水所有的译码信号,直到其不再需要为止</li></ul><p>分布式控制器</p><ul><li>控制器分布实现在多个流水线阶段</li><li>每级控制器只产生该级功能部件相关的译码信号</li><li>流水指令,作为各级控制器的输入</li></ul><h2 id="多发技术"><a href="#多发技术" class="headerlink" title="多发技术"></a>多发技术</h2><ol><li>超标量技术</li></ol><ul><li>每个时钟周期内可并发多条指令</li><li>要配置多个功能部件</li><li>不能调整指令的顺序</li></ul><ol><li>超流水技术</li></ol><ul><li>在一个时钟周期内再分段</li><li>在一个时钟周期内一个功能部件使用多次</li><li>不能调整指令的执行顺序</li><li>靠编译器解决优化问题</li></ul><ol><li>超长指令字</li></ol><h2 id="三控制器架构规划"><a href="#三控制器架构规划" class="headerlink" title="三控制器架构规划"></a>三控制器架构规划</h2><h3 id="功能部件控制器"><a href="#功能部件控制器" class="headerlink" title="功能部件控制器"></a>功能部件控制器</h3><h3 id="暂停控制器"><a href="#暂停控制器" class="headerlink" title="暂停控制器"></a>暂停控制器</h3><h3 id="转发控制器"><a href="#转发控制器" class="headerlink" title="转发控制器"></a>转发控制器</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>次序关系</title>
    <link href="/2024/10/25/%E6%AC%A1%E5%BA%8F%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/10/25/%E6%AC%A1%E5%BA%8F%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="次序关系"><a href="#次序关系" class="headerlink" title="次序关系"></a>次序关系</h1><h2 id="偏序关系"><a href="#偏序关系" class="headerlink" title="偏序关系"></a>偏序关系</h2><ul><li>自反,反对称,传递</li><li>$\leq$表示偏序关系,$&lt;P,\leq$表示偏序结构</li><li>例:$\lt N,\leq\gt,\lt N,\geq\gt,\lt P(A),\subseteq\gt,\lt I_+,|\gt$</li></ul><h2 id="全序关系"><a href="#全序关系" class="headerlink" title="全序关系"></a>全序关系</h2><ul><li>设$\lt P,\leq\gt$是一个偏序结构,如果对于任意$x,y\in P$,或者$x\leq y$,或者$y\leq x$,则称$\leq$为P上的<strong>全序</strong>或线序,并称$\lt P,\leq\gt$为<strong>全序结构</strong>或链</li><li>$\forall x\forall y(x\in P\wedge y\in P\rightarrow x\leq y\vee y\leq x)$</li></ul><h2 id="可比"><a href="#可比" class="headerlink" title="可比"></a>可比</h2><p>对于偏序集合$\lt P,\leq\gt,x,y\in P$,如果有$x\leq y$或者$y\leq x$,就说P的元素x和y是可比的</p><h2 id="严格偏序关系-拟序关系"><a href="#严格偏序关系-拟序关系" class="headerlink" title="严格偏序关系(拟序关系)"></a>严格偏序关系(拟序关系)</h2><ul><li><p>R是P上的<strong>严格偏序关系</strong>,当且仅当R是<strong>反自反的</strong>和<strong>传递的</strong></p></li><li><p>&lt;表示严格偏序关系,&lt;$P,&lt;$&gt;为严格偏序(拟序)结构</p></li><li><p>$\lt=\leq-I_P$</p></li></ul><h2 id="遮盖"><a href="#遮盖" class="headerlink" title="遮盖"></a>遮盖</h2><p>$y遮盖x\Leftrightarrow x&lt;y\wedge \neg \exists (z\in P\wedge x&lt;z \wedge z&lt;y)$</p><h2 id="哈斯图-偏序结构图"><a href="#哈斯图-偏序结构图" class="headerlink" title="哈斯图/偏序结构图"></a>哈斯图/偏序结构图</h2><p>偏序结构通常用<strong>简化的关系图</strong>来表示</p><h2 id="偏序结构中的特殊元素"><a href="#偏序结构中的特殊元素" class="headerlink" title="偏序结构中的特殊元素"></a>偏序结构中的特殊元素</h2><script type="math/tex; mode=display">\begin{align}&\lt A,\leq\gt是偏序结构,并且B\subseteq A,则\\\\ &(1)b是B的最大元\Leftrightarrow b\in B\wedge \forall x(x\in B\rightarrow x\leq b)\\\\ &(2)b是B的最小元\Leftrightarrow b\in B\wedge \forall x(x\in B\rightarrow b\leq x)\\\\ &(3)b是B的极大元\Leftrightarrow \neg\exists x(x\in B\wedge b<x)\\\\  &(4)b是B的极小元\Leftrightarrow \neg\exists x(x\in B\wedge x<b)\\\\\end{align}</script><ul><li>B的最大元、最小元<strong>若存在,则唯一</strong></li><li>B的极大元、极小元若存在,不一定唯一</li><li>若B是<strong>有穷集</strong>,则B的极大元、极小元必存在,但B的最大元、最小元不一定存在</li></ul><h2 id="良序结构"><a href="#良序结构" class="headerlink" title="良序结构"></a>良序结构</h2><ul><li>一个偏序结构$\lt P,\leq\gt$,如果P的每一个非空子集都有一个<strong>最小元</strong>,则称$\leq$为<strong>良序关系</strong></li><li><strong>每个良序结构都是全序结构</strong></li><li><strong>但并非每个全序结构都是良序的</strong></li></ul><h2 id="良序的充要条件"><a href="#良序的充要条件" class="headerlink" title="良序的充要条件"></a>良序的充要条件</h2><h3 id="定理A"><a href="#定理A" class="headerlink" title="定理A"></a>定理A</h3><script type="math/tex; mode=display">\begin{align}&若\leq为集合P上的偏序关系,则\leq为P上良序关系,当且仅当\\\\&a.\leq 为P上的全序关系；\\\\&b.P上的每个非空子集都有极小元。\\\\\end{align}</script><h3 id="定理B"><a href="#定理B" class="headerlink" title="定理B"></a>定理B</h3><script type="math/tex; mode=display">\begin{align}&设\lt A,\leq\gt为全序结构,则\lt A,\leq\gt是良序结构的充分必要条件是:\\\\&不存在A中元素的无穷序列a_0,a_1,a_2,...,使得对每个i\in N,皆有a_{i+1}<a_i\\\\\end{align}</script><h2 id="等价关系"><a href="#等价关系" class="headerlink" title="等价关系"></a>等价关系</h2><blockquote><p>如果集合A上的关系R是自反,对称,传递的,则R在A上是<strong>等价关系</strong></p></blockquote><h3 id="等价类"><a href="#等价类" class="headerlink" title="等价类"></a>等价类</h3><blockquote><p>设R是集合A上的等价关系,对于每个x$\in$A,A中与x有关系R的元素的集合称为<strong>x关于R的等价类</strong>,简称为x的等价类,记作$[x]_R$</p></blockquote><script type="math/tex; mode=display">[x]_R=\{y|y\in A\wedge x R y\}\\\\[x]_R\subseteq A</script><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><script type="math/tex; mode=display">\begin{align}&R是非空集合A上的等价关系,则有:\\\\&(1)对于每个x\in A,x\in [x]_R,即[x]_R是A的非空子集\\\\&(2)[x]_R=[y]_R当且仅当xRy\\\\&(3)若x, y\in A且x \bar Ry,则[x]_R\cap [y]_R=\emptyset\\\\&(4)\mathop{\bigcup}\limits_{x\in A}[x]_R=A\end{align}</script><script type="math/tex; mode=display">\begin{align}&(4)证明:\forall x\in A,x\in [x]_R,则x\in\mathop{\bigcup}\limits_{x\in A}[x]_R\\\\&\forall x\in A,则[x]_R\subseteq A,所以\mathop{\bigcup}\limits_{x\in A}[x]_R\subseteq A\\\\&故\mathop{\bigcup}\limits_{x\in A}[x]_R=A\\\\\end{align}</script><h3 id="商集"><a href="#商集" class="headerlink" title="商集"></a>商集</h3><blockquote><p>R是A上的等价关系,所有等价类组成的集合称为A关于R的商集,记作A/R</p><p>例如A={1,2,3,4,5,6,7},A/R={ {1,4,7}, {2,5}, {3,6} }</p><p><img src="image-20241025082644058.png" alt="模3同余关系图"></p></blockquote><script type="math/tex; mode=display">\begin{align}&A/R=\{[x]_R|x\in A\}\end{align}</script><h2 id="划分"><a href="#划分" class="headerlink" title="划分"></a>划分</h2><script type="math/tex; mode=display">\begin{align}&设A是非空集合,\pi\subseteq \rho(A),若\pi满足以下三个条件,则称\pi为A上的一个划分:\\\\&(1)对于每个S\in \pi,S=\emptyset\\\\&(2)对于任意B,C\in \pi,若B\neq C,B\cap C=\emptyset\\\\&(3)\cup \pi =A\\\\&\pi中的元素称为划分块,\pi中划分块的个数称为秩\\\\&有穷个划分快的划分称为有穷划分,否则称为无穷划分\end{align}</script><h3 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h3><blockquote><p>非空集合A上的等价关系R,决定了A上的一个划分,即商集A/R</p></blockquote><h3 id="定理-2"><a href="#定理-2" class="headerlink" title="定理"></a>定理</h3><blockquote><p>设$\pi$是非空集合A上的一个划分,若令:</p><p>$R_\pi=\{\lt x,y\gt|存在S\in \pi使得x,y\in S\}$</p><p>则$R_\pi$必是A上的等价关系且$A/R_\pi=\pi$</p></blockquote><script type="math/tex; mode=display">\begin{align}&\pi=\{C_1,C_2,...,C_n\}\\\\&R_\pi=(C_1\times C_1)\cup (C_2\times C_2)\cup...\cup(C_n\times C_n)\\\\\end{align}</script>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有序偶和笛卡尔乘积</title>
    <link href="/2024/10/25/%E6%9C%89%E5%BA%8F%E5%81%B6%E5%92%8C%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/"/>
    <url>/2024/10/25/%E6%9C%89%E5%BA%8F%E5%81%B6%E5%92%8C%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="有序偶和笛卡尔乘积"><a href="#有序偶和笛卡尔乘积" class="headerlink" title="有序偶和笛卡尔乘积"></a>有序偶和笛卡尔乘积</h1><h2 id="有序偶"><a href="#有序偶" class="headerlink" title="有序偶"></a>有序偶</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>任给两个对象 x 和 y,将它们按规定的顺序构成的序列,称之为有序偶，记为<x,y></x,y></p><p>其中,x 称为有序偶的第一元,y 称为第二元</p></blockquote><h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><p>Kuratovski提出了一种有序偶的集合表示:$\lt a,b\gt= \{ \{a\}, \{a,b\} \}$</p><h3 id="定理"><a href="#定理" class="headerlink" title="定理"></a>定理</h3><script type="math/tex; mode=display">\begin{align}&唯一性定理:<u,v>=<x,y>\ \ iff\ \ u=x\wedge v = y\\\\&证明:\\\\(充分性)&u=x,v=y时,有\{u\}=\{x\},\{u,v\}=\{x,y\}\\\\&因此\{\{u\},\{u,v\}\}=\{\{x\},\{x,y\}\}\\\\&即<u,v>=<x,y>\\\\(必要性)&分情况讨论:\\\\&(1)设u=v\\\\&因为<u,v>=\{\{u\},\{u,v\}\}={ {u} }\\\\&<u,v>=<x,y>=\{\{x\},\{x,y\}\}\\\\&所以u=x=y\\\\&u=x,v=y\\\\&(2)设u\neq v\\\\&\because\{\{u\},\{u,v\}\}=\{\{x\},\{x,y\}\}\\\\&\therefore\{u\}=\{x\},\{u,v\}\}=\{x,y\}\\\\&\therefore u=x,v=y\\\\&\end{align}</script><h2 id="笛卡尔乘积"><a href="#笛卡尔乘积" class="headerlink" title="笛卡尔乘积"></a>笛卡尔乘积</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><script type="math/tex; mode=display">A\times B=\{<x,y>|x\in A\wedge y\in B\}</script><h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ol><li>不满足交换律</li><li>不满足结合律</li><li>当$A=\emptyset$或$B=\emptyset$时,$A\times B=\emptyset$</li><li>$\sharp(A\times B)=\sharp A\cdot\sharp B$</li></ol><h3 id="定理-1"><a href="#定理-1" class="headerlink" title="定理"></a>定理</h3><script type="math/tex; mode=display">\begin{align}&A\times B=\emptyset\ \ iff\ \ A=\emptyset或 B=\emptyset\\\\&证明:只需证明A\times B\neq \emptyset\ \ iff\ \ A\neq \emptyset 且B\neq\emptyset\\\\&\because A \neq \emptyset,B\neq \emptyset\\\\&\therefore 设x\in A,y\in B\\\\&\therefore<x,y>\in A\times B\\\\&\therefore A\times B\neq \emptyset\\\\\end{align}</script><script type="math/tex; mode=display">\begin{align}&设A,B,C,D为任意四个非空集合,则\\\\&A\times B\subseteq C\times D\ \ iff\ \ A\subseteq C且B\subseteq D\\\\&证明:(充分性)任取x\in A,由于B\neq \emptyset,可取b\in B\\\\&<x,b>\in A\times B\\\\&因A\times B\subset C\times D\\\\&<x,b>\in C\times D\\\\&则x\in C,故A\subseteq C\\\\&同理:B\subseteq D\\\\&(必要性)任取<a,b>\in A\times B\\\\&则a\in A且b\in B\\\\&由A\subseteq C,B\subseteq D\\\\&则a\in C,b\in D\\\\&<a,b>\in C\times D\\\\&A\times B\subseteq C\times D\\\\\end{align}</script><h2 id="关系"><a href="#关系" class="headerlink" title="关系"></a>关系</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><script type="math/tex; mode=display">\begin{align}&关系的定义:\\\\&R\subseteq X\times Y\\\\&<x,y>\in R\Rightarrow x\ R\ y\\\\&<x,y>\notin R\Rightarrow x\ \bar{R}\ y\end{align}</script><script type="math/tex; mode=display">\begin{align}&全域关系U_x=\{<x_i,x_j>|x_i,x_j\in X\}=X\times X\\\\&恒等关系I_x=\{<x,x>|x\in X\}\end{align}</script><script type="math/tex; mode=display">\begin{align}&定义域dom(R)=\{x\in X|\exists y\in Y:<x,y>\in R\}\\\\&值域ran(R)=\{y\in Y|\exists x\in X:<x,y>\in R\}\\\\&dom(R)\subseteq X,ran(R)\subseteq Y\\\\\end{align}</script><script type="math/tex; mode=display">\begin{align}&R的关系矩阵M_R=(r_{ij})_{m\times n}\\\\&r_{ij}=\begin{cases}0\,\,若x_i\bar{R}y_i\\\\1\,\,若x_iRy_i\end{cases}\end{align}</script><script type="math/tex; mode=display">\begin{align}&R=\{<x_1,y_1>,<x_2,y_1>,<x_2,y_2>,<x_2,y_3>\}\\\\&关系矩阵为\begin{bmatrix}1&0&0\\\\1&1&1\\\\\end{bmatrix}\end{align}</script><script type="math/tex; mode=display">\begin{align}&R自反\Leftrightarrow \forall x(x\in X\rightarrow <x,x>\in R)\\\\&在R的关系图中,每个顶点均有自环\\\\&R的关系矩阵中,主对角线元素均为1\\\\\end{align}</script><script type="math/tex; mode=display">\begin{align}&反自反\Leftrightarrow \\\\&\forall x(x\in X\rightarrow <x,x>\notin R)\\\\\end{align}</script><script type="math/tex; mode=display">\begin{align}&对称矩阵:\forall x\forall y(x\in X\wedge y\in Y\wedge <x,y>\in R\rightarrow <y,x>\in R)\\\\&在R的关系图中,任意两个不同顶点之间:或者无弧,或者有两条方向相反的弧\\\\&关系矩阵为对称矩阵\\\\\end{align}</script><script type="math/tex; mode=display">\begin{align}&R是反对称的\Leftrightarrow \forall x\forall y(x\in X\wedge y\in Y\wedge <x,y>\in R\wedge <y,x>\in R\rightarrow x=y)\\\\&\Leftrightarrow\forall x\forall y(x\in X\wedge y\in Y\wedge <x,y>\in R\rightarrow <y,x>\notin R)\\\\&在R的关系图中,任意不同顶点之间至多有一条弧\\\\&R矩阵中,若i\neq j且iRj,则j\bar{R}i\end{align}</script><script type="math/tex; mode=display">\begin{align}&R是传递的 \Leftrightarrow \forall x\forall y\forall z\\\\&(x\in X\wedge y\in X\wedge z\in X\wedge <x,y>\in R\wedge <y,z>\in R\rightarrow <x,z>\in R)\end{align}</script><script type="math/tex; mode=display">\begin{align}&A有n个元素\\\\&自反关系:2^{n^2-n}\\\\&反自反关系:2^{n^2-1}\\\\&对称关系:2^{\frac{n(n+1)}{2} }\\\\&反对称关系:2^n\times3^{\frac{n(n-1)}{2} }\end{align}</script><h2 id="习题2-1-9"><a href="#习题2-1-9" class="headerlink" title="习题2.1.9"></a>习题2.1.9</h2><h3 id="a"><a href="#a" class="headerlink" title="a)"></a>a)</h3><blockquote><p>$dom(U\mathscr A)=\cup\{domR|R\in \mathscr A\}$</p></blockquote><h3 id="b"><a href="#b" class="headerlink" title="b)"></a>b)</h3><blockquote><p>$ran(U\mathscr A)=\cup\{ranR|R\in \mathscr A\}$</p></blockquote><h2 id="三序偶的理解"><a href="#三序偶的理解" class="headerlink" title="三序偶的理解"></a>三序偶的理解</h2><script type="math/tex; mode=display">\begin{align}<a,b,c>=&<<a,b>,c>\\\\=&<\{\{a\},\{a,b\}\},c>\\\\=&\{\{\{\{a\},\{a,b\}\}\},\{\{\{a\},\{a,b\}\},c\}\} \\\\\neq& \{\{a\},\{a,b\},\{a,b,c\}\}\end{align}</script>]]></content>
    
    
    <categories>
      
      <category>离散数学</category>
      
    </categories>
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归下降</title>
    <link href="/2024/10/24/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D/"/>
    <url>/2024/10/24/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="Grammer文法"><a href="#Grammer文法" class="headerlink" title="Grammer文法"></a>Grammer文法</h2><h3 id="Lex词法"><a href="#Lex词法" class="headerlink" title="Lex词法"></a>Lex词法</h3><blockquote><p>语言中的词汇及其属性和含义的规则</p></blockquote><script type="math/tex; mode=display"><var\_name>\rightarrow <letter>|<letter><var\_name>\\<letter>\rightarrow a^`|b^`|...|z^`</script><script type="math/tex; mode=display"><>标识语法成分的边界\\\rightarrow表示左侧部分由右侧部分的具体规则组合而成\\|表示规则可以从其两侧提供的任意选项中选取\\变量名定义为:有至少一个(大于0个)小写字母组成的字符串\\</script><h3 id="Syntax-语法"><a href="#Syntax-语法" class="headerlink" title="Syntax 语法"></a>Syntax 语法</h3><blockquote><p>描述语言中句子结构和组织方式的规则</p></blockquote><h2 id="词法-amp-语法分析"><a href="#词法-amp-语法分析" class="headerlink" title="词法&amp;语法分析"></a>词法&amp;语法分析</h2><h3 id="Lexer-词法分析"><a href="#Lexer-词法分析" class="headerlink" title="Lexer 词法分析"></a>Lexer 词法分析</h3><h4 id="Token"><a href="#Token" class="headerlink" title="Token"></a>Token</h4><blockquote><p>文本的最小语法单元,试译作”语素”</p></blockquote><h3 id="Parser-语法分析"><a href="#Parser-语法分析" class="headerlink" title="Parser 语法分析"></a>Parser 语法分析</h3><script type="math/tex; mode=display">Expr<表达式>\rightarrow <项>|<项>+<表达式>\\Term<项>\rightarrow <因子>|<因子>*<项>\\Factor<因子>\rightarrow 'i'</script>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单周期CPU设计文档</title>
    <link href="/2024/10/23/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/10/23/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="CPU-设计文档"><a href="#CPU-设计文档" class="headerlink" title="CPU 设计文档"></a>CPU 设计文档</h1><h2 id="整体架构"><a href="#整体架构" class="headerlink" title="整体架构"></a>整体架构</h2><p><img src="image-20241022231853793.png" alt="整体架构"></p><h2 id="部件"><a href="#部件" class="headerlink" title="部件"></a>部件</h2><h3 id="PC-Program-Counter"><a href="#PC-Program-Counter" class="headerlink" title="PC(Program Counter)"></a>PC(Program Counter)</h3><blockquote><p>程序计数器,用于指示指令的位置.</p><p>主体为一个寄存器,用于存储指令地址,在时钟上升沿时输出到PC`</p></blockquote><p><img src="image-20241022185634323.png" alt="PC"></p><h3 id="IM-Insturction-Memory"><a href="#IM-Insturction-Memory" class="headerlink" title="IM(Insturction Memory)"></a>IM(Insturction Memory)</h3><blockquote><p>指令存储器,存储指令内容.</p><p>主体为一个ROM,通过PC输入地址,将PC所对应的指令输出到Instr.</p></blockquote><p><img src="image-20241022190043406.png" alt="IM"></p><h3 id="DM-Data-Memory"><a href="#DM-Data-Memory" class="headerlink" title="DM(Data Memory)"></a>DM(Data Memory)</h3><blockquote><p>数据存储器,与CPU直接交换数据的内部存储器</p><p>主体为一个RAM,即可读又可写,WE为1时,将WD数据写入到A地址;WE为0时,读出WD地址对应数据到RD</p></blockquote><p><img src="image-20241022231940141.png" alt="DM"></p><h3 id="GRF-Register-File"><a href="#GRF-Register-File" class="headerlink" title="GRF(Register File)"></a>GRF(Register File)</h3><blockquote><p>CPU内部的寄存器堆</p><p>有32个32位寄存器,通过A1/A2选择寄存器读出到RD1/RD2,通过A3选择寄存器写入数据WD3</p></blockquote><p><img src="image-20241022190555004.png" alt="GRF"></p><h3 id="ALU-Arithmetic-and-Logical-Unit"><a href="#ALU-Arithmetic-and-Logical-Unit" class="headerlink" title="ALU(Arithmetic and Logical Unit)"></a>ALU(Arithmetic and Logical Unit)</h3><blockquote><p>计算单元,支持多种计算操作</p><p>由SrcA与SrcB读入两个操作数,通过ALUControl选择计算类型,输出到ALUResult</p></blockquote><p><img src="image-20241022232019925.png" alt="ALU"></p><h3 id="SPT-Splitter"><a href="#SPT-Splitter" class="headerlink" title="SPT(Splitter)"></a>SPT(Splitter)</h3><blockquote><p>分线器,分割指令的不同位</p></blockquote><p><img src="image-20241022190810134.png" alt="SPT"></p><h3 id="EXT-Extender"><a href="#EXT-Extender" class="headerlink" title="EXT(Extender)"></a>EXT(Extender)</h3><blockquote><p>扩位器,当ExtControl为0时,将输入的立即数由16位有符号扩展变为32位;当ExtControl为1时,将输入的立即数由16位零扩展变为32位</p></blockquote><p><img src="image-20241022232119130.png" alt="EXT"></p><h3 id="NXTAD-Next-Address"><a href="#NXTAD-Next-Address" class="headerlink" title="NXTAD(Next Address)"></a>NXTAD(Next Address)</h3><blockquote><p>用于计算PC输入的下一个指令地址</p></blockquote><p><img src="image-20241022232220391.png" alt="NXTAD"></p><h3 id="CU-Control-Unit"><a href="#CU-Control-Unit" class="headerlink" title="CU(Control Unit)"></a>CU(Control Unit)</h3><blockquote><p>控制单元,通过输入指令,决定输出信号</p></blockquote><p><img src="image-20241022232239176.png" alt="CU"></p><h2 id="ALU信号表"><a href="#ALU信号表" class="headerlink" title="ALU信号表"></a>ALU信号表</h2><div class="table-container"><table><thead><tr><th>ALUControl信号</th><th>操作</th></tr></thead><tbody><tr><td>000</td><td>与</td></tr><tr><td>001</td><td>或</td></tr><tr><td>010</td><td>加</td></tr><tr><td>011</td><td>覆盖高位</td></tr><tr><td>110</td><td>减</td></tr><tr><td>111</td><td>移位</td></tr></tbody></table></div><h2 id="CU信号表"><a href="#CU信号表" class="headerlink" title="CU信号表"></a>CU信号表</h2><div class="table-container"><table><thead><tr><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th>ExtControl</th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td>0</td></tr><tr><td>ori</td><td>1</td><td>0</td><td>001</td><td>X</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>lui</td><td>1</td><td>0</td><td>011(高位覆盖)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr><td>nop</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr></tbody></table></div><h2 id="测试方案"><a href="#测试方案" class="headerlink" title="测试方案"></a>测试方案</h2><h3 id="撰写MIPS测试文件"><a href="#撰写MIPS测试文件" class="headerlink" title="撰写MIPS测试文件"></a>撰写MIPS测试文件</h3><blockquote><p>使用<code>ori,nop,add,sub,lw,sw,</code>撰写一个测试用MIPS文件.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $0, $0, 10<br>ori $1, $0, 11<br>ori $2, $0, 22<br>ori $3, $0, 40<br>ori $4, $0, 2000<br>ori $5, $4, 12<br><br>nop<br>nop<br>nop<br><br>add $6, $5, $4<br>add $7, $6, $2<br>add $8, $7, $1<br>add $9, $8, $0<br>add $10, $0, $3<br><br>sw $0, 0($10)<br>sw $1, 4($10)<br>sw $2, 8($10)<br><br>nop<br>nop<br>nop<br><br><br>lw $11, 0($10)<br>lw $12, 0($10)<br>lw $13, 0($10)<br><br>sub $14, $10, $0<br>sub $15, $14, $1<br>sub $16, $15, $2<br><br>lui $17, 0xffff<br>lui $18, 0x4fff<br>lui $19, 0x1<br>lui $20, 0x223<br><br>ori $21, $21, 1<br>ori $22, $22, 1<br>loop:<br>sub $22, $22, $4<br>beq $21, $22, loop<br></code></pre></td></tr></table></figure><h3 id="使用MARS获得机器码"><a href="#使用MARS获得机器码" class="headerlink" title="使用MARS获得机器码"></a>使用MARS获得机器码</h3><blockquote><p>将MIPS代码输入MARS中,将文件机器码以十六进制格式导出,并在文件开头添加<code>v2.0 raw</code>.</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3400000</span>a<br><span class="hljs-number">3401000</span>b<br><span class="hljs-number">34020016</span><br><span class="hljs-number">34030028</span><br><span class="hljs-number">340407d0</span><br><span class="hljs-number">3485000</span>c<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00a43020</span><br><span class="hljs-number">00c23820</span><br><span class="hljs-number">00e14020</span><br><span class="hljs-number">01004820</span><br><span class="hljs-number">00035020</span><br>ad400000<br>ad410004<br>ad420008<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">8d4b0000</span><br><span class="hljs-number">8d4c0000</span><br><span class="hljs-number">8d4d0000</span><br><span class="hljs-number">01407022</span><br><span class="hljs-number">01c17822</span><br><span class="hljs-number">01e28022</span><br><span class="hljs-number">3</span>c11ffff<br><span class="hljs-number">3</span>c124fff<br><span class="hljs-number">3c130001</span><br><span class="hljs-number">3c140223</span><br><span class="hljs-number">36b50001</span><br><span class="hljs-number">36d60001</span><br><span class="hljs-number">02c4b022</span><br><span class="hljs-number">12</span>b6fffe<br>v2.<span class="hljs-number">0</span> raw<br><span class="hljs-number">3400000</span>a<br><span class="hljs-number">3401000</span>b<br><span class="hljs-number">34020016</span><br><span class="hljs-number">34030028</span><br><span class="hljs-number">3</span>c01ffff<br><span class="hljs-number">3421</span>ffff<br><span class="hljs-number">00012025</span><br><span class="hljs-number">3485000</span>c<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00a43020</span><br><span class="hljs-number">00c23820</span><br><span class="hljs-number">00e14020</span><br><span class="hljs-number">01004820</span><br><span class="hljs-number">00035020</span><br>ad400000<br>ad410004<br>ad420008<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">8d4b0000</span><br><span class="hljs-number">8d4c0000</span><br><span class="hljs-number">8d4d0000</span><br><span class="hljs-number">01407022</span><br><span class="hljs-number">01c17822</span><br><span class="hljs-number">01e28022</span><br><span class="hljs-number">3</span>c11ffff<br><span class="hljs-number">3</span>c124fff<br><span class="hljs-number">3c130001</span><br><span class="hljs-number">3c140223</span><br><span class="hljs-number">36b50001</span><br><span class="hljs-number">36d60001</span><br><span class="hljs-number">02c4b022</span><br><span class="hljs-number">12</span>b6fffe<br></code></pre></td></tr></table></figure><h3 id="比对MARS与Logisim模拟CPU的寄存器"><a href="#比对MARS与Logisim模拟CPU的寄存器" class="headerlink" title="比对MARS与Logisim模拟CPU的寄存器"></a>比对MARS与Logisim模拟CPU的寄存器</h3><blockquote><p>经过测试,两者结果相符</p></blockquote><p><img src="image-20241023000916439.png" alt="image-20241023000916439"></p><p><img src="image-20241023000930000.png" alt="image-20241023000930000"></p><h3 id="比对DM"><a href="#比对DM" class="headerlink" title="比对DM"></a>比对DM</h3><p>Logisim中DM导出结果:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v2</span>.<span class="hljs-number">0</span> raw<br><span class="hljs-attribute">11</span>*<span class="hljs-number">0</span> b <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>Mars中的结果为:</p><p><img src="image-20241023000652564.png" alt="image-20241023000652564"></p><h3 id="Python自动化测试"><a href="#Python自动化测试" class="headerlink" title="Python自动化测试"></a>Python自动化测试</h3><h4 id="Mars-Memory文件导出方式"><a href="#Mars-Memory文件导出方式" class="headerlink" title="Mars Memory文件导出方式"></a>Mars Memory文件导出方式</h4><blockquote><p>通过<code>File-Dump Memory to File</code>,Memory Segment选择<code>.data</code>,Dump Format选择<code>Hexadecimal Text</code></p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">0000000</span>b<br><span class="hljs-number">00000016</span><br><span class="hljs-number">00000000</span><br>...<br><span class="hljs-number">00000000</span><br></code></pre></td></tr></table></figure><h4 id="Logisim-Memory文件导出方式"><a href="#Logisim-Memory文件导出方式" class="headerlink" title="Logisim Memory文件导出方式"></a>Logisim Memory文件导出方式</h4><blockquote><p>右键RAM,选择<code>save image</code></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v2</span>.<span class="hljs-number">0</span> raw<br><span class="hljs-attribute">11</span>*<span class="hljs-number">0</span> b <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="Python测试文件"><a href="#Python测试文件" class="headerlink" title="Python测试文件"></a>Python测试文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">mips_path = <span class="hljs-string">&quot;mips.txt&quot;</span><br>logisim_path = <span class="hljs-string">&quot;logisim.txt&quot;</span><br><br>mips_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mips.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>logisim_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;logisim.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><br>mips_mem = []<br>lines = mips_file.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    line = line.removesuffix(<span class="hljs-string">&quot;\n&quot;</span>)<br>    mips_mem.append(<span class="hljs-built_in">int</span>(line, <span class="hljs-number">16</span>))<br><br>logisim_mem = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(mips_mem)<br>lines2 = logisim_file.readlines()<br>line = lines2[<span class="hljs-number">1</span>]<br>line = line.removesuffix(<span class="hljs-string">&quot;\n&quot;</span>)<br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> line.split(<span class="hljs-string">&quot; &quot;</span>):<br>    <span class="hljs-built_in">print</span>(s)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># cnt为10进制,value为16进制</span><br>        cnt, value = s.split(<span class="hljs-string">&quot;*&quot;</span>)<br>        cnt = <span class="hljs-built_in">int</span>(cnt)<br>        value = <span class="hljs-built_in">int</span>(value, <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cnt):<br>            logisim_mem[index] = value<br>            index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        value = <span class="hljs-built_in">int</span>(s, <span class="hljs-number">16</span>)<br>        logisim_mem[index] = value<br>        index += <span class="hljs-number">1</span><br><br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(logisim_mem, mips_mem):<br>    <span class="hljs-keyword">if</span> x != y:<br>        flag = <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(logisim_mem)<br><span class="hljs-built_in">print</span>(mips_mem)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Two documents is the same!!!&quot;</span> <span class="hljs-keyword">if</span> flag == <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Two documents is different!!!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="思考题"><a href="#思考题" class="headerlink" title="思考题"></a>思考题</h2><ol><li><p>上面我们介绍了通过 FSM 理解单周期 CPU 的基本方法。请大家指出单周期 CPU 所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能。</p><blockquote><p><code>IM,GRF,DM</code>发挥状态存储功能,<code>PC</code>发挥状态,<code>EXT,NXTAD,ALU,CU</code>发挥状态转移功能</p></blockquote></li><li><p>现在我们的模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用 Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出。</p><blockquote><p>合理,<code>IM</code>作为指令存储器,只需要在运行前导入指令集,在运行中不会修改,应当使用 <code>ROM</code>;</p><p><code>DM</code>是数据存储器,在涉及<code>lw,sw</code>的指令中会发生读取和写入操作,应当使用 <code>RAM</code>;</p><p><code>GRF</code>作为<code>CPU</code>内部存储,每次只会存储一个数,并且需要实现读取和写入,应当用<code>Register</code>.</p><p>改进方式:<code>IM</code>,<code>DM</code>加入片选逻辑</p></blockquote></li><li><p>在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路。</p><blockquote><p><code>NXTAD</code>(Next Address Module),用于计算下一个指令的地址.</p><p><code>NXTAD</code>需要处理两种情况:一种是正常的通过地址+4获得新地址;另一种是在<code>beq</code>指令中跳转到特定地址.</p><p>我们使用<code>Branch</code>,<code>Zero</code>作为控制信号:输入指令为<code>beq</code>时,<code>Branch</code>置1,若指令中的两个寄存器值相等,则<code>Zero</code>置1.当<code>Branch</code>与<code>Zero</code>均为1时,<code>NXTAD</code>模块处理后一种情况,否则为前一种.</p></blockquote></li><li><p>事实上，实现 <code>nop</code> 空指令，我们并不需要将它加入控制信号真值表，为什么？</p><blockquote><p><code>nop</code>不改变任何寄存器或者<code>Data Memory</code>的值,不会产生任何影响,我们无需写入或读取数据</p></blockquote></li><li><p>阅读 Pre 的 <a href="http://cscore.buaa.edu.cn/tutorial/mips/mips-6/mips6-1/">“MIPS 指令集及汇编语言”</a> 一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。</p><blockquote><p>对<code>ori,lui,add</code>涉及的情况较为充分,但缺乏对<code>sub</code>的测试,<code>lw,sw</code>缺乏立即数为负数的情况,未考虑用<code>beq</code>实现循环的情况</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>manimce</title>
    <link href="/2024/10/22/manimce/"/>
    <url>/2024/10/22/manimce/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate manimce<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">manim basic.py <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Video Action Recognition</title>
    <link href="/2024/10/21/video-Action-Recognition/"/>
    <url>/2024/10/21/video-Action-Recognition/</url>
    
    <content type="html"><![CDATA[<h1 id="Video-Action-Recognition"><a href="#Video-Action-Recognition" class="headerlink" title="Video Action Recognition"></a>Video Action Recognition</h1><ul><li><h2 id="LSTM"><a href="#LSTM" class="headerlink" title="LSTM"></a>LSTM</h2></li><li><h2 id="3D-ConvNets"><a href="#3D-ConvNets" class="headerlink" title="3D ConvNets"></a>3D ConvNets</h2></li></ul><p><img src="image-20241022001842588.png" alt="image-20241022001842588"></p><ul><li><p>large parameters</p></li><li><p>extract feature</p></li></ul><ul><li><h2 id="Two-Stream-Network"><a href="#Two-Stream-Network" class="headerlink" title="Two-Stream Network"></a>Two-Stream Network</h2></li><li><h2 id="3D-Fused-Two-Stream"><a href="#3D-Fused-Two-Stream" class="headerlink" title="3D-Fused Two-Stream"></a>3D-Fused Two-Stream</h2></li><li><h2 id="Inflated-3D-I3D"><a href="#Inflated-3D-I3D" class="headerlink" title="Inflated 3D(I3D)"></a>Inflated 3D(I3D)</h2><ul><li>infate to 3D from 2D</li><li>use parameters in 2D models</li><li>bootstrapping</li></ul></li><li><h2 id="Temporal-Segment-Networks"><a href="#Temporal-Segment-Networks" class="headerlink" title="Temporal Segment Networks"></a>Temporal Segment Networks</h2><ul><li>segmental consensus</li><li>late fusion</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two-Stream Inflated 3D ConvNets</title>
    <link href="/2024/10/20/Two-Stream-Inflated-3D-ConvNets/"/>
    <url>/2024/10/20/Two-Stream-Inflated-3D-ConvNets/</url>
    
    <content type="html"><![CDATA[<h1 id="Two-Stream-Inflated-3D-ConvNets"><a href="#Two-Stream-Inflated-3D-ConvNets" class="headerlink" title="Two-Stream Inflated 3D ConvNets"></a>Two-Stream Inflated 3D ConvNets</h1><blockquote><p>视频分类方向</p><p>采用先进的二维图像识别架构,拓展过滤器和池化内核到3维</p><p>基于双流神经网络:局部运动效果较好 </p><p>论文发表时基于Inception,后改为基于ResNet</p></blockquote><h2 id="Related-Work"><a href="#Related-Work" class="headerlink" title="Related Work"></a>Related Work</h2><blockquote><p>视频领域对于使用2D还是3D暂无定论,一种基本方法是2D网络配上LSTM,LSTM作为时空建模;或者配备光流;或者直接建立3D网络</p></blockquote><h3 id="ConvNet-LSTM"><a href="#ConvNet-LSTM" class="headerlink" title="ConvNet+LSTM"></a>ConvNet+LSTM</h3><p><img src="image-20241021165310989.png" alt="image-20241021165310989"></p><ul><li>从每一帧中独立提取特征,在整个视频中整合预测</li><li>ConvNet忽略时间结构,因此加入LSTM</li></ul><h3 id="3D-ConvNets"><a href="#3D-ConvNets" class="headerlink" title="3D ConvNets"></a>3D ConvNets</h3><ul><li>直接创建时空数据的分层展示</li><li>因为多了一层内核的维度,其参数比2D卷积网络更为复杂,难以训练</li></ul><h3 id="Two-Stream-Network-双流神经网络"><a href="#Two-Stream-Network-双流神经网络" class="headerlink" title="Two-Stream Network 双流神经网络"></a>Two-Stream Network 双流神经网络</h3><p><img src="image-20241021164927825.png" alt="two-stream"></p><blockquote><p>由两个2D神经网络构成:</p><p>空间流:学习场景信息</p><p>时间流:分析光流图像,学习时间信息</p><p>最后加权平均</p></blockquote><h3 id="3D-Fused-Two-Stream"><a href="#3D-Fused-Two-Stream" class="headerlink" title="3D-Fused Two-Stream"></a>3D-Fused Two-Stream</h3><p><img src="image-20241021165442590.png" alt="image-20241021165442590"></p><blockquote><p>提前融合(fuse),用一个3D卷积神经网络输出结果</p></blockquote><h2 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h2><h3 id="inflate"><a href="#inflate" class="headerlink" title="inflate"></a>inflate</h3><blockquote><p>将2D的Kernel,pooling layer直接转换为3D</p></blockquote><h3 id="bootstrapping"><a href="#bootstrapping" class="headerlink" title="bootstrapping"></a>bootstrapping</h3><blockquote><p>将图像复制N次形成一个无聊视频,将3D模型在ImageNet上预训练,以满足无聊视频的不动点.</p><p>途径:将图片的参数复制N次(N是时间维度),再除以N实现缩放</p><p>确保卷积filter对图像和视频输入的处理一致</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSSPT</title>
    <link href="/2024/10/20/LSSPT/"/>
    <url>/2024/10/20/LSSPT/</url>
    
    <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><h2 id="conventional-deep-learning-based-methods"><a href="#conventional-deep-learning-based-methods" class="headerlink" title="conventional deep learning-based methods"></a>conventional deep learning-based methods</h2><ul><li>LSTM, GCN</li><li>explore group activity representations under supervised or weakly supervised modes</li><li>require manually annotated personal action, labels(数据标记?)</li></ul><h2 id="background"><a href="#background" class="headerlink" title="background"></a>background</h2><ul><li>NLP:unsupervised</li><li>SSL developes</li><li>SSRL, the temporal evolution (时间演变) not yet been explicitly exploited</li><li>predictive coding scheme (预测编码方案)</li></ul><h2 id="group-activities"><a href="#group-activities" class="headerlink" title="group activities"></a>group activities</h2><ul><li>more complex state dynamics</li><li>lead to failure of SSRL using RNN(复杂序列<strong>关系</strong>建模困难)</li><li>LSTM相关模型缺乏注意力机制(attention to the history sequence dependencies)</li><li>Transformer networks in NLP restricted to normal data</li><li>人类在长周期group activity中重复某种运动</li><li><strong>exploiting multiple ranges of historical information</strong></li></ul><h2 id="LSSPT"><a href="#LSSPT" class="headerlink" title="LSSPT"></a>LSSPT</h2><h3 id="encoder-decoder-framework"><a href="#encoder-decoder-framework" class="headerlink" title="encoder-decoder framework"></a>encoder-decoder framework</h3><ul><li>encoder: summarize group state</li><li>decoder: anticipate the state in the future</li><li>based on relation graph and casual Transformer</li></ul><h3 id="sparse-graph-Transformer"><a href="#sparse-graph-Transformer" class="headerlink" title="sparse graph Transformer"></a>sparse graph Transformer</h3><ul><li>spatial state context in short time</li></ul><h3 id="casual-temporal-Transformer-CTT"><a href="#casual-temporal-Transformer-CTT" class="headerlink" title="casual temporal Transformer(CTT)"></a>casual temporal Transformer(CTT)</h3><ul><li>long range temporal dynamics</li></ul><h1 id="Approach"><a href="#Approach" class="headerlink" title="Approach"></a>Approach</h1><h2 id="predictive-coding"><a href="#predictive-coding" class="headerlink" title="predictive coding"></a>predictive coding</h2><ul><li>时空编码函数</li><li>预测函数</li><li>优化函数</li></ul><h2 id="Architecture"><a href="#Architecture" class="headerlink" title="Architecture"></a>Architecture</h2><ul><li>特征提取<ul><li>I3D预训练模型提取人物特征</li></ul></li><li>长短状态编码</li><li>长短状态解码</li><li>推理训练<ul><li>重构损失reconstructed loss</li><li>对比损失contrasitive loss </li><li>对抗损失adversarial loss</li></ul></li></ul><h2 id="Long-Short-State-Encoder"><a href="#Long-Short-State-Encoder" class="headerlink" title="Long-Short State Encoder"></a>Long-Short State Encoder</h2><h3 id="sparse-graph-transformer"><a href="#sparse-graph-transformer" class="headerlink" title="sparse graph transformer"></a>sparse graph transformer</h3><h4 id="building"><a href="#building" class="headerlink" title="building"></a>building</h4><p>$\{p{}^t_i\}{}^N_{i=1}$,$p_i\in \mathit R^d$表示第i个人的特征</p><p>$稀疏矩阵G^t=\{V^t,E^t\}$,$V_t=\{p{}^t_i\}{}^N_{i=1}$表示节点,$E_t=\{(i,j)|p_i,p_j 在n时刻连结\}$</p><p>$节点的邻居Nei(i,t)=\{p^t_j\}{}^M_{i=1},其中p^t_j满足(i,j)\in E^t$</p><h4 id="update"><a href="#update" class="headerlink" title="update"></a>update</h4><p>通过邻居节点传递的key,自身节点的equry更新节点信息,由原先的$h_i$变为$\hat{h_i}$</p><p>$<br>\hat{h_i}=softmax(\frac{[q_i^Tk_j]_ {j=1:N} }{ \sqrt{d_k} })[v_i]^N_{i=1}\\<br>q_i表示query\\<br>k_j表示key\\<br>v_i表示value\\<br>$</p><h4 id="group-state-modeling"><a href="#group-state-modeling" class="headerlink" title="group state modeling"></a>group state modeling</h4><p>$<br>小组状态g_t=P_{max}(Norm(f_o(\hat{p_i}),…,f_o(\hat{p_N}))) \\<br>P_{max}池化层 \\<br>Norm层标准化 \\<br>f_o全连接层 \\<br>$</p><h4 id="casual-temporal-transformer"><a href="#casual-temporal-transformer" class="headerlink" title="casual temporal transformer"></a>casual temporal transformer</h4><ul><li>masked Transformer<ul><li>为绝对帧添加时间位置编码</li><li>多层CTT层传递,masked multihead attention, LayerNorm(层归一化),MLP(what???)</li><li>mask保证模型只注意部分特定输入(类似于LLM中后文不会影响前文语素的注意力分配机制)</li></ul></li></ul><h2 id="Long-Short-State-Decoder"><a href="#Long-Short-State-Decoder" class="headerlink" title="Long-Short State Decoder"></a>Long-Short State Decoder</h2><ul><li>state attention modules: 建立长短期之间的依赖</li><li>state update modules: 输出长短期信息</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java HashMap</title>
    <link href="/2024/10/12/Java-HashMap/"/>
    <url>/2024/10/12/Java-HashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h1><h2 id="作用"><a href="#作用" class="headerlink" title="作用"></a>作用</h2><blockquote><p>字典</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">HashMap&lt;Integer, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="添加键值对"><a href="#添加键值对" class="headerlink" title="添加键值对"></a>添加键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.put(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>hm.putIfAbsent(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//仅在hm原本不包含2对应的键值对时执行添加2-3键值对的操作</span><br><br><span class="hljs-comment">// 添加所有键值对</span><br>HashMap&lt;Integer, Integer&gt; hm2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hm2.putAll(hm);<br></code></pre></td></tr></table></figure><h3 id="删除键值对"><a href="#删除键值对" class="headerlink" title="删除键值对"></a>删除键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.remove(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="访问键值对"><a href="#访问键值对" class="headerlink" title="访问键值对"></a>访问键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(hm.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 打印2对应的元素</span><br></code></pre></td></tr></table></figure><h3 id="迭代"><a href="#迭代" class="headerlink" title="迭代"></a>迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对键集合遍历for循环</span><br><span class="hljs-keyword">for</span> (Integer i : hm.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(i));<br>&#125;<br><br><span class="hljs-comment">// iterator</span><br>Iterator&lt;Integer&gt; it = hm.keySet().iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + key + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(key));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="merge"><a href="#merge" class="headerlink" title="merge"></a>merge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.merge(key, value, remappingFunction)<br></code></pre></td></tr></table></figure><blockquote><p>如果 key 对应的 value 不存在，则返回该 value 值，如果存在，则返回通过 remappingFunction 重新计算后的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm2.merge(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,(k,v)-&gt;v+<span class="hljs-number">1</span>); <span class="hljs-comment">// 若keySet中不包含1,则插入1-1键值对,若有则对v加一</span><br></code></pre></td></tr></table></figure><h3 id="compute"><a href="#compute" class="headerlink" title="compute"></a>compute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.compute(K key, BiFunction remappingFunction);<br></code></pre></td></tr></table></figure><blockquote><p>对<code>hashMap</code>中的指定<code>key</code>的值进行重新计算</p><p>若<code>key</code>对应的<code>value</code>不存在,则返回<code>null</code>,若存在则返回通过<code>remappingFunction</code>重新计算后的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newPrice</span> <span class="hljs-operator">=</span> prices.compute(<span class="hljs-string">&quot;Shoes&quot;</span>, (key, value) -&gt; value - value * <span class="hljs-number">10</span>/<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-PriorityQueue</title>
    <link href="/2024/10/12/PriorityQueue/"/>
    <url>/2024/10/12/PriorityQueue/</url>
    
    <content type="html"><![CDATA[<h1 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h1><h2 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h2><blockquote><p>大顶堆、小顶堆</p></blockquote><h2 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h2><h3 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(); <span class="hljs-comment">// 小根堆(顶端元素为最小)</span><br><br>PriorityQueue&lt;Integer&gt; numbers1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;b-a); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 指定数量</span><br>PriorityQueue&lt;Integer&gt; numbers2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">10</span>); <span class="hljs-comment">// 指定容量可以避免执行扩容操作,加快速度</span><br><br><span class="hljs-comment">// 使用Comparator</span><br>PriorityQueue&lt;Integer&gt; numbers3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(<span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2-o1; <span class="hljs-comment">// &gt;=0即表示不用交换</span><br>            &#125;<br>        &#125;); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 通过Collection作为参数创建</span><br>ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>));<br>PriorityQueue&lt;Integer&gt; numbers4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(arr);<br></code></pre></td></tr></table></figure><h3 id="入队"><a href="#入队" class="headerlink" title="入队"></a>入队</h3><blockquote><p><code>add()</code>,<code>offer()</code>两者均为入队方法，仅在处理队列已满的情况时有所不同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br><br>numbers.add(<span class="hljs-number">4</span>); <span class="hljs-comment">// 队列已满时引发异常</span><br>numbers.add(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [3, 4]</span><br><br>numbers.offer(<span class="hljs-number">1</span>); <span class="hljs-comment">// 队列已满时返回false</span><br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [1, 4, 3]</span><br></code></pre></td></tr></table></figure><h3 id="出队"><a href="#出队" class="headerlink" title="出队"></a>出队</h3><blockquote><p><code>remove()</code>,<code>poll()</code>在处理队列为空时不一样：<code>remove()</code>抛出异常，<code>poll()</code>返回<code>null</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">numbers.remove();<br><br>numbers.poll(); <span class="hljs-comment">// 推荐这种方法</span><br></code></pre></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><blockquote><p><code>peek()</code>:队列为空时返回<code>null</code></p><p><code>element()</code>:队列为空时抛出异常</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">numbers.peek()<span class="hljs-comment">;</span><br><br>numbers.element()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="清空"><a href="#清空" class="headerlink" title="清空"></a>清空</h3><p><code>clear()</code></p><h3 id="判空"><a href="#判空" class="headerlink" title="判空"></a>判空</h3><p><code>isEmpty()</code></p><p>访问元素个数</p><p><code>size()</code></p><h2 id="自动扩容机制"><a href="#自动扩容机制" class="headerlink" title="自动扩容机制"></a>自动扩容机制</h2><blockquote><p>源码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity of the array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> queue.length;<br>    <span class="hljs-comment">// Double size if small; else grow by 50%</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> ArraysSupport.newLength(oldCapacity,<br>            minCapacity - oldCapacity, <span class="hljs-comment">/* minimum growth */</span><br>            oldCapacity &lt; <span class="hljs-number">64</span> ? oldCapacity + <span class="hljs-number">2</span> : oldCapacity &gt;&gt; <span class="hljs-number">1</span><br>                                       <span class="hljs-comment">/* preferred growth */</span>);<br>    queue = Arrays.copyOf(queue, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>旧容量在64以下增加2,否则乘以2</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P1总结</title>
    <link href="/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="往年題"><a href="#往年題" class="headerlink" title="往年題"></a>往年題</h1><h2 id="允许括号的表达式状态机"><a href="#允许括号的表达式状态机" class="headerlink" title="允许括号的表达式状态机"></a>允许括号的表达式状态机</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=145&amp;PieId=1202">P1_L7_允许括号的表达式状态机 - 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> string2(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> clr,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out<br>    );<br>    <span class="hljs-keyword">parameter</span> START = <span class="hljs-number">3&#x27;B000</span>,<br>              DIGIT = <span class="hljs-number">3&#x27;B001</span>,<br>              CAL = <span class="hljs-number">3&#x27;B010</span>,<br>              LEFT_BRACKET = <span class="hljs-number">3&#x27;B011</span>,<br>              LEFT_DIGIT = <span class="hljs-number">3&#x27;B100</span>,<br>              LEFT_CAL = <span class="hljs-number">3&#x27;B101</span>,<br>              ILLEGAL = <span class="hljs-number">3&#x27;B110</span>;<br>    <span class="hljs-keyword">parameter</span> zero = <span class="hljs-number">48</span>,<br>              nine = <span class="hljs-number">57</span>,<br>              left = <span class="hljs-number">40</span>,<br>              right = <span class="hljs-number">41</span>,<br>              mult_ = <span class="hljs-number">42</span>,<br>              plus_ = <span class="hljs-number">43</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> num;<br>    <span class="hljs-keyword">reg</span> mark;<br>    <span class="hljs-keyword">reg</span> left_bracket;<br>    <span class="hljs-keyword">reg</span> right_bracket;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> clr) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (clr)<span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        num = (in &gt;= zero &amp;&amp; in &lt;= nine) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        mark = (in == mult_ || in == plus_) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        left_bracket = (in == left) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        right_bracket = (in == right) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">case</span> (state)<br>            START:<span class="hljs-keyword">begin</span><br>              state = num ? DIGIT:<br>                      left_bracket ? LEFT_BRACKET:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? CAL: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            CAL:<span class="hljs-keyword">begin</span><br>              state = left_bracket ? LEFT_BRACKET : <br>                      num ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            LEFT_BRACKET:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? LEFT_CAL :<br>                      right_bracket ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_CAL:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT : ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            ILLEGAL:<span class="hljs-keyword">begin</span><br>              state = ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> out = (state == DIGIT) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="投票表決器"><a href="#投票表決器" class="headerlink" title="投票表決器"></a>投票表決器</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=424&amp;PieId=1202">P1_L1_vote_plus - 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> VoterPlus(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] np,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] vip,<br>    <span class="hljs-keyword">input</span> vvip,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] result<br>    );<br><br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] last_np;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] last_vip;<br>    <span class="hljs-keyword">reg</span> last_vvip;<br>    <span class="hljs-keyword">integer</span> temp;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> reset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>        last_np = <span class="hljs-number">32&#x27;b0</span>;<br>        last_vip = <span class="hljs-number">8&#x27;b0</span>;<br>        last_vvip = <span class="hljs-number">1&#x27;b0</span>;<br>        result = <span class="hljs-number">8&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span>:c<br>          temp = temp + ((last_np[i] ^ np[i]) &amp; np[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + temp;<br><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>:cycle<br>          temp = temp + ((last_vip[i] ^ vip[i]) &amp; vip[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + <span class="hljs-number">4</span> * temp;<br><br>        result = result + <span class="hljs-number">16</span> * ((last_vvip ^ vvip) &amp; vvip);<br>        last_np = last_np | np;<br>        last_vip = last_vip | vip;<br>        last_vvip = last_vvip | vvip;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="上机"><a href="#上机" class="headerlink" title="上机"></a>上机</h1><h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><blockquote><p>三道题,前一道是考察for循环的基本语法,后两道考察状态机</p></blockquote><ul><li>题目1:输入两个32位数,将其中一个数的二进制位逆序排列,比较两个数同一二进制位上出现不同位的次数</li><li>题目2:判断一串由0,1组成的字符串是否符合如下要求:<ul><li>将相邻的相同数字合成一组,相邻组的长度奇偶性一定不同</li></ul></li><li>题目3:输入格式为<code>&#123;xxxx:xxxx,xxxx:xxxx,&#125;</code>的字符串,记录当前的键值对数目和自上次复位以来的单个集合中最大键值对数目</li></ul><h2 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h2><h3 id="1"><a href="#1" class="headerlink" title="1"></a>1</h3><blockquote><p>使用组合逻辑,在always @(*)块中写一个for循环</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(*)<span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        cnt = (a[i] ^ b[i] == <span class="hljs-number">1</span>) ? cnt + <span class="hljs-number">1</span> : cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="2"><a href="#2" class="headerlink" title="2"></a>2</h3><blockquote><p>设置状态:</p><p>xx_xx中,下划符前的表示上一个集合的奇偶性(或者NULL表示暂无上一个集合,下划符后的表示当前集合的集合的奇偶性</p><p>状态转换图如下:</p></blockquote><p><img src="935df7948fedda6ff43aeb9df3a7759.jpg" alt="状态转换图" style="zoom: 25%;"></p><h3 id="3"><a href="#3" class="headerlink" title="3"></a>3</h3><blockquote><p>考场没有写出来,错在了对于异常输入的处理办法.该题已经指明了<code>&#123;xxxx:xxx,xxxx:xxxx&#125;</code>的结构是固定的,测试数据不会出现<code>&#123;</code>,<code>&#125;</code>,<code>:</code>,<code>,</code>这四个字符的丢失,所以当存在键值对不满足条件后,应当等待下一个<code>,</code>的输入</p><p>例如在<code>&#123;a:,b:12,&#125;</code>中,<code>a:</code>明显不是一个符合要求的键值对(缺乏<code>value</code>),但这时我们必须保证后面的键值对能计入,需要等待<code>,</code>输入后进入新一轮输入键值对中.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P2总结</title>
    <link href="/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MIPS的考察方式为将C语言代码翻译成MIPS汇编语言,其中对for循环的翻译、递归函数的转换最为重要</p></blockquote><h1 id="往年题"><a href="#往年题" class="headerlink" title="往年题"></a>往年题</h1><h2 id="删数问题"><a href="#删数问题" class="headerlink" title="删数问题"></a>删数问题</h2><blockquote><p>键盘输入一个高精度的正整数 <code>n</code>（不超过 250 位），去掉其中任意 <code>k</code>个数字后剩下的数字按原左右次序将组成一个新的非负整数。编程对给定的 <code>n</code> 和 <code>k</code>，寻找一种方案使得剩下的数字组成的新数最小。</p></blockquote><h3 id="题目来源"><a href="#题目来源" class="headerlink" title="题目来源"></a>题目来源</h3><p><a href="https://www.luogu.com.cn/problem/P1106">P1106 删数问题 - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><blockquote><p>已知我们要删掉m个数,我们要使得新数字最小,一定会选择前m+1位数中最小的那位作为最高位,设该位为k,则k之前的位均可以删去,保留第i位,对于第i+1位到末尾的数据,我们将m修改为m-(i-1)(因为此时数字已经删去i-1位),采取同样的上述操作,直到m=0.</p></blockquote><h3 id="C-代码"><a href="#C-代码" class="headerlink" title="C++代码"></a>C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,a[<span class="hljs-number">257</span>],rest,t=<span class="hljs-number">1</span>,minp,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br>string num;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;num&gt;&gt;k;<br>    n=num.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)a[i]=num[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    rest=n-k;<br>    <span class="hljs-keyword">while</span>(cnt&lt;rest)&#123;<br>        minp=t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;=k+t;++i)<span class="hljs-keyword">if</span>(a[minp]&gt;a[i])minp=i;<br>        <span class="hljs-keyword">if</span>(a[minp])flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(flag)cout&lt;&lt;a[minp];<br>        k-=minp-t;<br>        t=minp<span class="hljs-number">+1</span>;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Java代码"><a href="#Java代码" class="headerlink" title="Java代码"></a>Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1106</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> n.length();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            a[i] = n.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rest</span> <span class="hljs-operator">=</span> len - k;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> minp;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (cnt &lt; rest) &#123;<br>            minp = t;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> t; i &lt;= k + t; i++) &#123;<br>                minp = a[minp] &gt; a[i] ? i : minp;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[minp] &gt; <span class="hljs-number">0</span>) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(a[minp]);<br>            &#125;<br>            k -= minp - t;<br>            t = minp + <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            System.out.print(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="MIPS答案"><a href="#MIPS答案" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 600<br><br>.macro push(%i)<br>subi $sp, $sp, 4<br>sw %i, 0($sp)<br>.end_macro<br><br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%i)<br>li $v0, 5<br>syscall<br>move %i, $v0<br>.end_macro<br><br>.macro printInt(%i)<br>li $v0, 1<br>move $a0, %i<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 11<br>move $a0, %c<br>syscall<br>.end_macro<br><br>.macro inputStr(%str)<br>li $v0, 12<br>la $a0, %str<br>li $a1, 150<br>syscall<br>.end_macro<br><br># 使用$t7($t7=i) for (int i = t; i &lt;= k + t; i++)<br>.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bgt $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#使用$t7(记录字符串个数),$t6(记录字符当前对应位置)<br>.macro input_char_begin(%startLabel, %endLabel)<br>li $t7, -1<br>li $t6, -4<br>%startLabel:<br>beq $v0, 10, %endLabel<br>.end_macro<br><br>.macro input_char_end(%startLabel, %endLabel, %str, %len)<br>addi $t7, $t7, 1<br>addi $t6, $t6, 4<br>sw $v0, %str($t6)<br>j %startLabel<br>%endLabel:<br>move %len, $t7<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %cnt, %rest)<br>%startLabel:<br>bge %cnt, %rest, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_data(%arr, %i, %data)<br>push($t4)<br>li $t5, 4<br>mult $t5, %i<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t4)<br>.end_macro<br><br>.text<br># 读入字符串a<br>input_char_begin(start1,end1)<br>li $v0, 12 # 读入一个字符到$v0<br>syscall<br>input_char_end(start1,end1,a,$s0)<br>#a记录字符串位置,$s0记录字符串长度(len)<br><br># 读入k<br>inputInt($t0) #$t0=k,要删去的字符个数<br>#48-57<br>#rest = $s1<br>sub $s1, $s0, $t0 # rest = len - k<br>#cnt = $t1 = 0<br>li $t1, 0<br># minp = $t2 = 0<br>li $t2, 0<br># t = $t3 = 0<br>li $t3, 0<br>#flag = $t4 = 0 (false)<br>li $t4, 0<br><br>while_begin(start2,end2,$t1,$s1)<br>move $t2, $t3 # minp = t<br>for_begin(start3, end3,$t3,$t0)<br># minp = a[minp] &gt; a[i] ? i : minp;<br>push($s4)<br>push($s5)<br>load_data(a,$t2,$s4) # $s4 = a[minp]<br>load_data(a,$t7,$s5) # $s5 = a[i], <br>bgt $s4, $s5, update<br>j skip<br>update:<br>move $t2, $t7 # minp = i<br>skip:<br>pop($s5)<br>pop($s4)<br>for_end(start3,end3)<br><br>#printInt($t2)<br>load_data(a, $t2, $t5) # $t5 = a[minp]<br>#printInt($t5)<br>bgt $t5, $0, flag_true<br>j skip2<br>flag_true:<br>li $t4, 1 # flag = true;<br>skip2:<br><br>beq $t4, $0, skip3  # if (flag) print(a[minp])<br>load_data(a, $t2, $t5)# $t5 = a[minp]<br>printChar($t5)<br>skip3:<br><br>sub $t0, $t0, $t2 # k = k - minp<br>add $t0, $t0, $t3 # k = k + t<br>addi $t3, $t2, 1 # t = minp + 1<br>addi $t1, $t1, 1 # cnt++<br>while_end(start2,end2)<br><br>beq $t4, 1, skip4<br>li $s2, 0<br>printInt($s2)<br>skip4:<br><br><br></code></pre></td></tr></table></figure><h2 id="加法拆分"><a href="#加法拆分" class="headerlink" title="加法拆分"></a>加法拆分</h2><blockquote><p>给一个数n,<strong>按照字典序</strong>输出它可能的加法拆分</p></blockquote><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><blockquote><p>采用dfs</p></blockquote><h3 id="C代码"><a href="#C代码" class="headerlink" title="C代码"></a>C代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">5000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[cnt - <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> last)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span>)<br>    &#123;<br>        printArr(arr, cnt);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = last; k &lt;= left; k++)<br>    &#123;<br>        arr[cnt] = k;<br>        dfs(arr, cnt + <span class="hljs-number">1</span>, left - k, k);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    dfs(arr, <span class="hljs-number">0</span>, n, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-1"><a href="#MIPS答案-1" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 用于存放待打印数字的数组<br>enter: .word &#x27;\n&#x27;<br>plus: .word  &#x27;+&#x27;<br>test: .word &#x27;t&#x27;<br><br>#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br><br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>#读入整数<br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>#打印整数<br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br># 打印字符<br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#结束程序<br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>#for循环<br>.macro for_begin(%startLabel, %endLabel, %start, %end)<br>move $t7, %start<br>%startLabel:<br>bgt $t7, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 将数据存在arr的指定位置<br>.macro store_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>sw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br># arr的指定位置读取数据<br>.macro load_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br>#打印指定长度的数组<br>.macro printArr(%arr, %cnt)<br>li $t4, 0<br>print_loop:<br>bge $t4, %cnt, print_end<br><br>load_data(%arr, $t6, $t4)<br>printInt($t6)<br>addi $t4, $t4, 1<br>bge $t4, %cnt, print_end<br>printChar(plus)<br>print_skip:<br>j print_loop<br>print_end:<br>printChar(enter)<br>.end_macro<br><br># 数据指代<br>.eqv n $s0<br>.eqv cnt $a1<br>.eqv left $a2<br>.eqv last $a3<br><br>.text<br>inputInt(n)<br>li cnt, 0<br>move left, n<br>li last, 1<br>jal dfs<br>done<br><br>dfs:<br>push($ra)<br>beq left, $0, dfs_return<br>for_begin(dfs_start,dfs_end,last,left)<br># $t7 = k<br>store_data(arr, $t7, cnt)<br>push(cnt)<br>push(left)<br>push(last)<br>push($t7)<br>addi cnt, cnt, 1<br>sub left, left, $t7<br>move last, $t7<br>jal dfs<br>pop($t7)<br>pop(last)<br>pop(left)<br>pop(cnt)<br>for_end(dfs_start, dfs_end)<br>j dfs_done<br><br>dfs_return:<br>printArr(arr, cnt)<br><br>dfs_done:<br>pop($ra)<br>jr $ra<br><br><br></code></pre></td></tr></table></figure><h3 id="易错点"><a href="#易错点" class="headerlink" title="易错点"></a>易错点</h3><ul><li><code>$a0</code>作为<code>Syscall</code>打印时需要的参数,要避免用户自定义函数中的参数含有<code>$a0</code>,产生不必要的冲突.或者修改<code>print</code>函数,采用入栈+退栈的方式(该方法更安全):</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro printInt(%int)<br>push($a0)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>pop($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>字符应当被指定为<code>word</code>在<code>MIP32</code>中占<code>4</code>字节,即<code>32</code>位,打印字符方式为:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>plus: .word &#x27;+&#x27;<br>.text<br>li $v0, 4<br>la $a0, plus<br>syscall<br></code></pre></td></tr></table></figure><h2 id="双关键词排序"><a href="#双关键词排序" class="headerlink" title="双关键词排序"></a>双关键词排序</h2><h3 id="冒泡排序基础"><a href="#冒泡排序基础" class="headerlink" title="冒泡排序基础"></a>冒泡排序基础</h3><blockquote><p>为了降低翻译难度,我在这里删去了用来决定提前推出排序的标记<code>flag</code>,同时一定程度上增加了算法的时间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, k, temp;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[k] &gt; A[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                temp = A[k];<br>                A[k] = A[k + <span class="hljs-number">1</span>];<br>                A[k + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>翻译成MIPS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>arr: .space 400<br>space: .word &#x27; &#x27;<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(arr, i)<br>for_end(start0, end0, i)<br><br>#bubble sort<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(arr, k, A_k)<br>addi k_1, k, 1<br>load_data(arr, k_1, A_k_1)<br>bgt A_k, A_k_1, swp<br>j skip<br>swp:<br>swap(arr,k,k_1)<br>skip:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#打印数组<br>for_begin(start3, end3, i, $0, n)<br>print_arr_element(arr, i)<br>printChar(space)<br>for_end(start3, end3, i)<br></code></pre></td></tr></table></figure><h3 id="稍作修改的答案"><a href="#稍作修改的答案" class="headerlink" title="稍作修改的答案"></a>稍作修改的答案</h3><blockquote><p>本题使用具有稳定性的冒泡排序,先对<code>B</code>数组从小到大进行排序,再对<code>A</code>数组进行相同操作,但在交换数组元素时对另一个数组也要进行相同位置的交换操作.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> *q)</span><br>&#123;<br>    <span class="hljs-type">int</span> temp = *p;<br>    *p = *q;<br>    *q = temp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> i, k;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[k] &gt; b[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[k] &gt; a[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a[i], b[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>翻译成MIPS汇编语言,关键在<code>swap</code>和双层<code>for</code>循环上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>A: .space 400<br>B: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入A,B数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(A, i)<br>input_arr_element(B, i)<br>for_end(start0, end0, i)<br><br>#先对B数组进行冒泡排序(从小到大)<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(B, k, A_k)<br>addi k_1, k, 1<br>load_data(B, k_1, A_k_1)<br>bgt A_k, A_k_1, swp1<br>j skip1<br>swp1:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip1:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#再对A数组进行冒泡排序(从小到大)<br>for_begin_decrease(start3,end3,i,n,$0)<br>for_begin(start4,end4,k,$0,i)<br>load_data(A, k, A_k)<br>addi k_1, k, 1<br>load_data(A, k_1, A_k_1)<br>bgt A_k, A_k_1, swp2<br>j skip2<br>swp2:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip2:<br>for_end(start4,end4,k)<br>for_end_decrease(start3,end3,i)<br><br>#打印数组<br>for_begin(start5, end5, i, $0, n)<br>print_arr_element(A, i)<br>printChar(space)<br>print_arr_element(B,i)<br>printChar(enter)<br>for_end(start5, end5, i)<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,宏可以大幅降低拓展代码的难度</p></blockquote><h2 id="字符统计"><a href="#字符统计" class="headerlink" title="字符统计"></a>字符统计</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=35&amp;PieId=1202">P2_L1_calculate - 系统能力课程实验平台 (buaa.edu.cn)</a></p><blockquote><p>使用MIPS汇编语言写一个具有字符统计功能的汇编程序(不考虑延迟槽)</p></blockquote><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><blockquote><p>本题要实现一个计数器,这在C语言中通常使用字典实现,而要在MIPS汇编语言直接构建这样一个部件难度较大,我们可以开两个数组<code>arr</code>与<code>order</code>,<code>arr</code>记录字符对应的出现次数,<code>order</code>记录各个字符的依次出现顺序</p></blockquote><h3 id="MIPS答案-2"><a href="#MIPS答案-2" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 26 * 4<br>order: .space 200<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br><br># 别名<br>.eqv n, $s0 # 输入字符总数<br>.eqv ct $s1 # 用于记录输入的字符种类<br>.eqv i, $t0 # 用于for循环<br>.eqv k, $t1 # 用于for循环<br>.eqv t, $t3 # 用于for循环<br>.eqv flag, $s2 # 标志<br><br>.macro for_begin(%startLabel, %endLabel, %i,%start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#将数字转化为对应字符(0-&#x27;a&#x27;)<br>.macro printCharFromInt(%int)<br>addi $a0, %int, 97<br>li $v0, 11<br>syscall<br>.end_macro<br><br>.macro store_data(%arr,%index,%value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro put(%arr, %order, %k)<br>subi %k, %k, 97 <br>put_order(%order, %k)<br><br>load_data(%arr, %k, $t7)<br>addi $t7, $t7, 1<br>store_data(%arr, %k, $t7)<br>.end_macro<br><br>.macro put_order(%order, %k)<br>li flag, 1 # 标记当前字符是否未出现<br>for_begin(start10, end10, t, $0, ct)<br>load_data(order, t, $t7)<br>beq $t7, %k, yes # 找到了<br>j put_order_end<br>yes:<br>li flag, 0 # 将标记置为0<br>put_order_end:<br>for_end(start10, end10, t)<br>beq flag, $0, skip<br>store_data(order, ct, %k) # 将新的字符种类添加到order中<br>addi ct, ct, 1<br>skip:<br>.end_macro<br><br>.macro print_arr_element(%arr, %order, %k)<br>load_data(%order, %k, $t5) # %k是[0,ct)之间的一个整数, $t5记录第%k个出现的字符种类(&#x27;a&#x27;-97到&#x27;b&#x27;-97,即[0,26))<br>load_data(%arr, $t5, $t4) # $t4寄存对应字符的出现次数<br>beq $t4, $0, skip # 该语句无用,但为了代码拓展性和稳定性可以保留<br>printCharFromInt($t5) # 0对应&#x27;a&#x27;,25对应&#x27;z&#x27;<br>printChar(space)<br>printInt($t4)<br>printChar(enter)<br>skip:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br># 初始化<br>li ct, 0<br><br># 输入n<br>inputInt(n)<br><br># 输入n个字符<br>for_begin(start1,end1,i,$0,n)<br>inputChar(k)<br>put(arr, order, k)<br>for_end(start1,end1,i)<br><br># 打印<br>for_begin(start2,end2,k,$0,ct)<br>print_arr_element(arr, order, k)<br>for_end(start2,end2,k)<br><br># 终止程序<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-1"><a href="#易错点-1" class="headerlink" title="易错点"></a>易错点</h3><ul><li>MIPS评测机似乎不会有换行符的输入,虽然无法在本地实现对换行符的处理,却可以通过评测机.但倘若增加了一个用于除去换行符影响的<code>ignoreInt()</code>方法,反而会出现RE错误.</li><li>在这里要实现读入单个字符,根据手册可以搓出这个宏:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>但如何避免换行符的影响?我们可以用读入字符串的方法(此时程序会读入一行字符,包括换行符),在将字符串的第0位字符提取出来.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 8<br>li $a1, 10<br>syscall<br>lw %c, 0($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><h2 id="矩阵转置相加"><a href="#矩阵转置相加" class="headerlink" title="矩阵转置相加"></a>矩阵转置相加</h2><blockquote><p>使用MIPS汇编语言编写一个具有矩阵<strong>转置相加</strong>功能的汇编程序(不考虑延迟槽).</p></blockquote><h3 id="C语言代码"><a href="#C语言代码" class="headerlink" title="C语言代码"></a>C语言代码</h3><blockquote><p>开两个二维数组a,b,各元素依次相加,通过调换for循环顺序实现对转置矩阵的打印.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            a[i][k] = a[i][k] + b[i][k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The result is:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a[i][k]);<br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k != m - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-3"><a href="#MIPS答案-3" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br>sentence: .asciiz &quot;The result is:\n&quot;<br>A: .space 256 # 8 * 8 * 4<br>B: .space 256 # 8 * 8 * 4<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv temp1, $t3<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.text<br># 读入n, m<br>inputInt(n)<br>inputInt(m)<br><br># 读入矩阵A<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1, i)<br><br># 读入矩阵B<br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, m)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br># 矩阵A,B相加,结果存储到A中<br>for_begin(start5, end5, i, $0, n)<br>for_begin(start6, end6, k, $0, m)<br>load_arr(A, i, k, temp)<br>load_arr(B, i, k, temp1)<br>add temp, temp, temp1<br>store_arr(A, i, k, temp)<br>for_end(start6, end6, k)<br>for_end(start5, end5, i)<br><br>printStr(sentence)<br><br># 打印A的转置数组<br>for_begin(start7, end7, k, $0, m)<br>for_begin(start8, end8, i, $0, n)<br>load_arr(A, i, k, temp)<br>printInt(temp)<br>addi i, i, 1<br>beq i, n, skip<br>printStr(space)<br>skip:<br>subi i, i, 1<br>for_end(start8, end8, i)<br>addi k, k, 1<br>beq k, m, skip2<br>printStr(enter)<br>skip2:<br>subi k, k, 1<br>for_end(start7, end7, k)<br><br># 终止程序<br>done<br></code></pre></td></tr></table></figure><h3 id="易错点-2"><a href="#易错点-2" class="headerlink" title="易错点"></a>易错点</h3><ul><li><p>要注意到矩阵每一行的最后不能出现空格,最后一行的末尾不能有换行符.我们可以先对for循环中的参数(<code>i</code>或<code>k</code>)进行加一操作,判断其是否与<code>n</code>或<code>m</code>相等.</p></li><li><p>多层循环使用宏会更加方便.对于不同的for循环,一定要将开始和结束的标志符设置为不同的(不要复制粘贴后忘了修改就行)</p></li></ul><h2 id="倒序全排列"><a href="#倒序全排列" class="headerlink" title="倒序全排列"></a>倒序全排列</h2><blockquote><p>使用MIPS实现全排列生成算法</p><p>输入一个小于等于7的正整数,求出n的全排列,并按照字典序倒序输出</p></blockquote><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p><img src="image-20241008194552753.png" alt="正序全排列C语言代码"></p><blockquote><p>这里题目给出了正序全排列的C语言代码,不难发现:只要将<code>FullArray(int index)</code>中出现的第二个正序for循环改为倒序即可.即:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (symbol[i] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// body</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-4"><a href="#MIPS答案-4" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>symbol: .space 28<br>array: .space 28<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br><br>.eqv n, $s0<br>.eqv index, $a1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv flag, $t2<br>.eqv one, $t3 # 用于存储立即数1<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro print_arr_element(%arr, %i)<br>sll $t9, %i, 2<br>lw $a0, %arr($t9)<br>li $v0, 1<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 递减for循环<br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.text<br>inputInt(n)<br>li one, 1<br>li index, 0<br>jal FullArray<br>done<br><br>FullArray:<br>push($ra)<br>bge index, n, return<br>for_begin_decrease(start2, end2, i, n, $0)<br>load_data(symbol, i, flag)<br>beq flag, $0, yes<br>j no<br>yes:<br>addi i, i, 1<br>store_data(array, index, i)<br>subi i, i, 1<br>store_data(symbol, i, one)<br>addi index, index, 1<br>push(i)<br>jal FullArray<br>pop(i)<br>subi index, index, 1<br>store_data(symbol, i, $0)<br>no:<br><br>for_end_decrease(start2, end2, i)<br><br>j full_array_end<br><br>return:<br>for_begin(start1, end1, k, $0, n)<br>print_arr_element(array, k)<br>printStr(space)<br>for_end(start1, end1, k)<br>printStr(enter)<br>full_array_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h2 id="阶乘连加"><a href="#阶乘连加" class="headerlink" title="阶乘连加"></a>阶乘连加</h2><p><img src="image-20241008201630823.png" alt="1202-329"></p><h3 id="MIPS答案-5"><a href="#MIPS答案-5" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><blockquote><p>实现思路很简单,不需要写一个C语言程序了,但要注意细节问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv index, $a1<br>.eqv ans, $s1<br>.eqv new, $s2<br>.eqv i, $t0<br>.eqv k, $t1<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputUnsignedInt(%u)<br>li $v0, 36<br>move $a0, %u<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>ble %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br><br>for_begin_decrease(start, end, i, n, $0)<br>li new, 1<br>for_begin_decrease(start2, end2, k, i, $0)<br>mult new, k<br>mflo new<br>for_end_decrease(start2, end2, k)<br>addu ans, ans, new<br>for_end_decrease(start, end, i)<br><br>inputUnsignedInt(ans)<br><br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-3"><a href="#易错点-3" class="headerlink" title="易错点"></a>易错点</h3><ul><li>该程序设计无符号数,<code>add</code>要替换为<code>addu</code></li></ul><h2 id="单步汉诺塔"><a href="#单步汉诺塔" class="headerlink" title="单步汉诺塔"></a>单步汉诺塔</h2><blockquote><ul><li>输入格式：<ul><li>输入包含1行，只包含1个1位整数，即0-9中的某一个整数，记其为n</li><li>汉诺塔三根柱子的编号从左到右依次为’A’,’B’,’C’,初始的时候所有盘子都在‘A’上，编号从上（小）到下（大）分别为0~n</li><li>移动这些盘子到’C‘，要求移动时只能将某个柱子上最上面的盘子移动到相邻的柱子，并且任何情况下大盘子不能在小盘子上面，即A上的盘子不能直接移动到C上</li></ul></li><li>输出格式：请参照下文的C语言样例，要求实现同粒度的输出（即能通过逐行<code>strcmp</code>的检测）</li><li>数据范围：<ul><li>0&lt;n&lt;10</li></ul></li></ul><p>C语言样例已给出:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move disk %d from %c to %c\n&quot;</span>, id, from, to);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> via, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-keyword">if</span> (base == <span class="hljs-number">0</span>) &#123;<br>      move(base, from, via);<br>      move(base, via, to);<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>  move(base, from, via);<br>  hanoi(base - <span class="hljs-number">1</span>, to, via, from);<br>  move(base, via, to);<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  hanoi(n, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-6"><a href="#MIPS答案-6" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;move disk A from A to A\n&quot;<br><br>.eqv shift, $t3<br>.eqv shift1, 10<br>.eqv shift2, 7<br>.eqv shift3, 5<br>.eqv n, $s0<br>.eqv base, $a1<br>.eqv from, $a2<br>.eqv via, $a3<br>.eqv to, $t4<br>.eqv A, 65<br>#.eqv B, 66<br>.eqv C, 67<br>.eqv zero, 48<br><br># move()函数,使用$t7<br>.macro move_(%id, %from, %to)<br>la $t7, sentence<br>addi $t7, $t7, shift1<br>sb %id, 0($t7)<br>addi $t7, $t7, shift2<br>sb %from, 0($t7)<br>addi $t7, $t7, shift3<br>sb %to, 0($t7)<br>printStr(sentence)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro swap(%x, %y)<br>push(%x)<br>push(%y)<br>pop(%x)<br>pop(%y)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>move base, n<br>addi base, base, zero<br>li from, 65<br>li via, 66<br>li to, 67<br>jal hanoi<br><br>done<br><br>hanoi:<br>push($ra)<br>beq base, zero, return<br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, from, via)<br><br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>swap(from, to)<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, via, to)<br><br>subi base, base, 1<br>jal hanoi<br><br>j hanoi_end<br>return:<br>move_(base, from, via)<br>move_(base, via, to)<br>hanoi_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h3 id="难点-修改字符串"><a href="#难点-修改字符串" class="headerlink" title="难点(修改字符串)"></a>难点(修改字符串)</h3><ul><li>对于字符串的修改,可以采用以下模板:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, modify_str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;hello, world!\n&quot;<br><br>.eqv c, $t0 # 待加入的字符<br>.eqv shift, $t1 # 偏移量<br><br># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, %str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.text<br>li shift, 3<br>li c, 70 # &#x27;F&#x27;对应ASCII码为70<br>modify_str(sentence, shift, c)<br>printStr(sentence)<br><br># output:<br># helFo, world!<br></code></pre></td></tr></table></figure><h2 id="二分查找的实现与应用"><a href="#二分查找的实现与应用" class="headerlink" title="二分查找的实现与应用"></a>二分查找的实现与应用</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=415&amp;PieId=1202">P2_L1_bsearch - 系统能力课程实验平台 (buaa.edu.cn)</a></p><h3 id="C语言代码-1"><a href="#C语言代码-1" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> <span class="hljs-comment">//自定义函数binary_search()</span><br>&#123;<br>    <span class="hljs-type">int</span> low,high,mid,count=<span class="hljs-number">0</span>,count1=<span class="hljs-number">0</span>;<br>    low=<span class="hljs-number">0</span>;<br>    high=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)    <span class="hljs-comment">//査找范围不为0时执行循环体语句</span><br>    &#123;<br>        count++;    <span class="hljs-comment">//count记录査找次数</span><br>        mid=(low+high)/<span class="hljs-number">2</span>;    <span class="hljs-comment">//求中间位置</span><br>        <span class="hljs-keyword">if</span>(key&lt;a[mid])    <span class="hljs-comment">//key小于中间值时</span><br>            high=mid<span class="hljs-number">-1</span>;    <span class="hljs-comment">//确定左子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;a[mid])    <span class="hljs-comment">//key 大于中间值时</span><br>            low=mid+<span class="hljs-number">1</span>;    <span class="hljs-comment">//确定右子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key==a[mid])    <span class="hljs-comment">//当key等于中间值时，证明查找成功</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            count1++;    <span class="hljs-comment">//count1记录查找成功次数</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(count1==<span class="hljs-number">0</span>)    <span class="hljs-comment">//判断是否查找失敗</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;key);<br>        binary_search(key, arr, m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-7"><a href="#MIPS答案-7" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 4000<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv low, $t0<br>.eqv high, $t1<br>.eqv mid, $t2<br>.eqv count, $t3<br>.eqv count1, $t4<br>.eqv temp, $t5<br>.eqv i, $t6<br>.eqv k, $t7<br>.eqv key, $t8<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %low, %high)<br>%startLabel:<br>bgt %low, %high, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro binary_search(%key, %a, %n)<br>li count, 0<br>li count1, 0<br>li low, 0<br>subi high, %n, 1<br>while_begin(start1, end1, low, high)<br>addi count, count, 1<br>add mid, low, high<br>srl mid, mid, 1 # mid = (low + high) / 2;<br>load_data(%a, mid, temp)<br>blt key, temp, less<br>beq key, temp, same<br>bgt key, temp, greater<br><br>less:<br>subi high, mid, 1<br>j judge_end<br>same:<br>printImmediate(1)<br>printChar(enter)<br>addi count1, count, 1<br>j break_mark<br>greater:<br>addi low, mid, 1<br>judge_end:<br>while_end(start1,end1)<br>break_mark:<br>beq count1, 0, fail<br>j skip0<br>fail:<br>printImmediate(0)<br>printChar(enter)<br>skip0:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(m)<br>for_begin(start2, end2, i, $0, m)<br>inputInt(temp)<br>store_data(arr,i,temp)<br>for_end(start2, end2, i)<br><br>inputInt(n)<br>for_begin(start3,end3,k,$0,n)<br>inputInt(key)<br>binary_search(key, arr, m)<br>for_end(start3,end3,k)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="水仙花数的判断"><a href="#水仙花数的判断" class="headerlink" title="水仙花数的判断"></a>水仙花数的判断</h2><h3 id="C语言代码-2"><a href="#C语言代码-2" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">narcissus</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> a0;<br>    <span class="hljs-type">int</span> a1;<br>    <span class="hljs-type">int</span> a2;<br>    a0 = x % <span class="hljs-number">10</span>;<br>    a1 = (x % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>;<br>    a2 = x / <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span> (square(a0) + square(a1) + square(a2) == x) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (narcissus(i)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-8"><a href="#MIPS答案-8" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv ten, $s2<br>.eqv hundred, $s3<br><br>.eqv a0, $t0<br>.eqv a1, $t1<br>.eqv a2, $t2<br>.eqv i, $t3<br>.eqv sum, $t4<br>.eqv temp, $t5<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro square_add_to(%x, %sum)<br>mult %x, %x<br>mflo temp<br>mult %x, temp<br>mflo temp<br>add sum, sum, temp<br>.end_macro<br><br>.macro narcissus(%x)<br>li sum, 0<br>div %x, ten<br>mfhi a0<br>square_add_to(a0, sum)<br>div %x, hundred<br>mfhi a1<br>div a1, a1, 10<br>square_add_to(a1, sum)<br>div a2, %x, 100<br>square_add_to(a2, sum)<br><br>beq sum, %x, yes<br>j no<br>yes:<br>printInt(%x)<br>printChar(enter)<br>no:<br>.end_macro<br><br>.text<br>li ten, 10<br>li hundred, 100<br><br>inputInt(m)<br>inputInt(n)<br>for_begin(start0,end0,i,m,n)<br>narcissus(i)<br>for_end(start0,end0,i)<br></code></pre></td></tr></table></figure><h3 id="除法操作"><a href="#除法操作" class="headerlink" title="除法操作"></a>除法操作</h3><blockquote><p>实现除法有以下操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 1<br>div $t0, $t1<br>mflo $t2 # $t0 % $t1 的结果存储在低位中<br>mfhi $t3 # $t0 // $t1的结果存储在高位中<br><br># 2<br>div $t2, $t0, $t1 # $t2 = $t0 // $t1 (整数除法)<br><br># 3<br>div $t0, $t1, 100 # $t0 = $t1 // 100 (除以16-bit立即数)<br><br># 4<br>div $t0, $t1, 100000 # $t0 = $t1 // 100000(除以32-bit立即数)<br><br># 5<br>srl $t0, 2 # $t0值向右移两位,即除以4<br></code></pre></td></tr></table></figure><h2 id="约瑟夫环问题"><a href="#约瑟夫环问题" class="headerlink" title="约瑟夫环问题"></a>约瑟夫环问题</h2><h3 id="C语言代码-3"><a href="#C语言代码-3" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (flag == n) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>) &#123;<br>            i = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (count == m) &#123;<br>                a[i] = <span class="hljs-number">1</span>;<br>                flag++;<br>                i++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                count = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count++;<br>                i++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (i == n) &#123;<br>            i = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-9"><a href="#MIPS答案-9" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv one, $s2<br><br>.eqv i, $t0<br>.eqv count, $t1<br>.eqv flag, $t2<br>.eqv temp, $t3<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>inputInt(m)<br><br>li i, 0<br>li count, 1<br>li flag, 1<br>li one, 1<br>while:<br>beq flag, n, break_<br>load_data(a, i, temp)<br>beq temp, $0, else<br>add_:<br>addi i, i, 1<br>j while_end<br>else:<br>beq count, m, yes<br>no:<br>addi count, count, 1<br>addi i, i, 1<br>j while_end<br>yes:<br>store_data(a,i,one)<br>addi flag, flag, 1<br>addi i, i, 1<br>printInt(i)<br>printChar(enter)<br>li count, 1<br>while_end:<br>beq i, n, mod<br>j skip<br>mod:<br>li i, 0<br>skip:<br>j while<br><br>break_:<br><br>for_begin(start0, end0, i, $0, n)<br>load_data(a, i, temp)<br>beq temp, $0, find<br>j skip2<br>find:<br>addi i, i, 1<br>printInt(i)<br>j break2<br>skip2:<br>for_end(start0, end0, i)<br><br>break2:<br>done<br><br></code></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><h2 id="回文串判断"><a href="#回文串判断" class="headerlink" title="回文串判断"></a>回文串判断</h2><blockquote><p>其实用了足够多的封装之后,对于一些简单的MIPS题目已经不用特意写一遍C语言了</p></blockquote><h3 id="MIPS答案-10"><a href="#MIPS答案-10" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 80<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv flag, $s2<br>.eqv i, $t0<br>.eqv temp, $t1<br>.eqv temp1, $t2<br>.eqv temp2, $t3<br>.macro load_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, arr($t9)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>inputChar(temp)<br>store_data(arr, i, temp)<br>for_end(start1, end1, i)<br><br>srl m, n, 1<br>li flag, 1<br>for_begin(start2, end2, i, $0, m)<br>load_data(arr, i, temp1)<br>sub temp, n, i<br>subi temp, temp, 1<br>load_data(arr, temp, temp2)<br>beq temp1, temp2, skip<br>li flag, 0<br>skip:<br>for_end(start2, end2, i)<br><br>beq flag, 1, yes<br>no:<br>printImmediate(0)<br>j flag_end<br>yes:<br>printImmediate(1)<br>flag_end:<br>done<br><br></code></pre></td></tr></table></figure><h2 id="全排列生成"><a href="#全排列生成" class="headerlink" title="全排列生成"></a>全排列生成</h2><blockquote><p>参考往年题中的<strong>倒序全排列</strong></p></blockquote><h2 id="矩阵相乘"><a href="#矩阵相乘" class="headerlink" title="矩阵相乘"></a>矩阵相乘</h2><h3 id="MIPS答案-11"><a href="#MIPS答案-11" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 256 # 8 * 8 * 4<br>B:.space 256<br>C:.space 256<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv f, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, n)<br>inputInt(temp)<br>store_arr(A,i,k,temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1,i)<br><br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, n)<br>inputInt(temp)<br>store_arr(B,i,k,temp)<br>for_end(start4, end4, k)<br>for_end(start3,end3,i)<br><br>for_begin(start5,end5,i,$0,n)<br>for_begin(start6, end6, k, $0, n)<br>li temp, 0<br>for_begin(start7, end7, f, $0, n)<br>load_arr(A,i,f,temp1)<br>load_arr(B,f,k,temp2)<br>mult temp1, temp2<br>mflo temp0<br>add temp, temp, temp0<br>for_end(start7, end7, f)<br>store_arr(C,i,k,temp)<br>for_end(start6, end6, k)<br>for_end(start5,end5,i)<br><br>for_begin(start8, end8, i, $0, n)<br>for_begin(start9, end9, k, $0, n)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space)<br>for_end(start9, end9, k)<br>printStr(enter)<br>for_end(start8, end8, i)<br><br>done<br></code></pre></td></tr></table></figure><h2 id="01迷宫-哈密顿回路"><a href="#01迷宫-哈密顿回路" class="headerlink" title="01迷宫(哈密顿回路)"></a>01迷宫(哈密顿回路)</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><blockquote><p>采用<code>DFS</code>(深度优先算法),从起点出发,向四个方向前进,并以没有到达过(<code>vis[i][j]==0</code>)以及不存在障碍(<code>puzzle[i][j]==1</code>)作为可以前进的判断依据,到达终点时将ans加一操作.</p></blockquote><h3 id="C语言代码-4"><a href="#C语言代码-4" class="headerlink" title="C语言代码"></a>C语言代码</h3><blockquote><p>C语言中不建议使用<code>goto</code>语句,但这里为了翻译方便采用了该语句</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> start_x;<br><span class="hljs-type">int</span> start_y;<br><span class="hljs-type">int</span> end_x;<br><span class="hljs-type">int</span> end_y;<br><span class="hljs-type">int</span> puzzle[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> curr_x, <span class="hljs-type">int</span> curr_y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (curr_x == end_x &amp;&amp; curr_y == end_y)&#123;<br>        ans += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">//up </span><br>    <span class="hljs-keyword">if</span> (curr_x == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x<span class="hljs-number">-1</span>,curr_y);<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk1:<br><br>    <span class="hljs-comment">//right</span><br>    <span class="hljs-keyword">if</span> (curr_y == m<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y+<span class="hljs-number">1</span>);<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    brk2:<br><br>    <span class="hljs-comment">// down</span><br>    <span class="hljs-keyword">if</span> (curr_x == n<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x+<span class="hljs-number">1</span>,curr_y);<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk3:<br><br>    <span class="hljs-comment">//left</span><br>    <span class="hljs-keyword">if</span> (curr_y == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y<span class="hljs-number">-1</span>);<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br><br>    brk4:<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; m; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;puzzle[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_y);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_y);<br><br>    start_x -= <span class="hljs-number">1</span>;<br>    start_y -= <span class="hljs-number">1</span>;<br>    end_y -= <span class="hljs-number">1</span>;<br>    end_x -= <span class="hljs-number">1</span>;<br>    vis[start_x][start_y] = <span class="hljs-number">1</span>;<br>    solve(start_x,start_y);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-12"><a href="#MIPS答案-12" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>puzzle:.space 256 # 8 * 8 * 4<br>vis:.space 256<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv start_x, $s2<br>.eqv start_y, $s3<br>.eqv end_x, $s4<br>.eqv end_y, $s5<br>.eqv ans, $s6<br>.eqv one, $s7<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv curr_x, $t3<br>.eqv curr_y, $t4<br>.eqv temp1, $t5<br><br>.text<br>li one, 1<br><br>inputInt(n)<br>inputInt(m)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(puzzle, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>inputInt(start_x)<br>inputInt(start_y)<br>inputInt(end_x)<br>inputInt(end_y)<br><br>subi start_x, start_x, 1<br>subi start_y, start_y, 1<br>subi end_x, end_x, 1<br>subi end_y, end_y, 1<br>move curr_x, start_x<br>move curr_y, start_y<br>store_arr(vis, curr_x, curr_y, one)<br>jal solve<br><br><br>printInt(ans)<br><br>done<br><br>solve:<br>push($ra)<br>bne curr_x, end_x, skip<br>bne curr_y, end_y, skip<br>addi ans, ans, 1<br>pop($ra)<br>jr $ra<br>skip:<br>beqz curr_x, brk1<br>subi temp1, curr_x, 1<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk1<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk1<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk1:<br>addi temp1, curr_y, 1<br>beq temp1, m, brk2<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk2<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk2<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk2:<br>addi temp1, curr_x, 1<br>beq temp1, n, brk3<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk3<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk3<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk3:<br>beqz curr_y, brk4<br>subi temp1, curr_y, 1<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk4<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk4<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk4:<br><br>pop($ra)<br>jr $ra<br></code></pre></td></tr></table></figure><h3 id="易错点-4"><a href="#易错点-4" class="headerlink" title="易错点"></a>易错点</h3><ul><li>当调用递归函数时,若函数中可能出现多次递归,我们必须将:<ul><li>作为函数参数的寄存器入栈再调用递归函数,退出递归后再退栈,保持函数参数不变(<code>$a1,$a2,...</code>)</li><li>用来记录状态的数组在调用递归函数前的修改,应当在退出递归后修改回原值,比如本题中的<code>vis</code></li><li>若递归出现在<code>for</code>循环,<code>while</code>循环中,必须将作为循环参数的<code>i,k</code>等入栈保存,其他递归函数中会修改的寄存器同理(<code>$t0,$t1,...</code>)</li></ul></li></ul><h2 id="矩阵卷积"><a href="#矩阵卷积" class="headerlink" title="矩阵卷积"></a>矩阵卷积</h2><h3 id="C语言代码-5"><a href="#C语言代码-5" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> A[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> B[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> C[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> temp;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> ii;<br><span class="hljs-type">int</span> kk;<br><span class="hljs-type">void</span> <span class="hljs-title function_">evolv</span><span class="hljs-params">(<span class="hljs-type">int</span> A[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> B[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> C[][<span class="hljs-number">100</span>], </span><br><span class="hljs-params">        <span class="hljs-type">int</span> m1, <span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> m2, <span class="hljs-type">int</span> n2)</span> &#123;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1 - m2 + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1 - n2 + <span class="hljs-number">1</span>; k++) &#123;<br>            temp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; m2; ii++) &#123;<br>                <span class="hljs-keyword">for</span> (kk = <span class="hljs-number">0</span>; kk &lt; n2; kk++) &#123;<br>                    <span class="hljs-comment">// printf(&quot;%d %d \n&quot;, ii + i, kk + k);</span><br>                    temp = temp + A[ii+i][kk+k] * B[ii][kk];<br>                &#125;<br>            &#125;<br>            C[i][k] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m1, n1, m2, n2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m2);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][k]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m2; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n2; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;B[i][k]);<br>        &#125;<br>    &#125;<br><br>    evolv(A,B,C,m1,n1,m2,n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1-m2+<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1-n2+<span class="hljs-number">1</span>; k++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, C[i][k]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-13"><a href="#MIPS答案-13" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 2000 # 10 * 10 * 4 = 400<br>B:.space 2000<br>C:.space 2000<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n1, $s0<br>.eqv m1, $s1<br>.eqv m2, $s2<br>.eqv n2, $s3<br><br>.eqv m1_m2_1, $s4<br>.eqv n1_n2_1, $s5<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp3, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.eqv ii, $t7<br>.eqv kk, $t8<br><br>.text<br>inputInt(m1)#行数<br>inputInt(n1)#列数<br>inputInt(m2)<br>inputInt(n2)<br><br># 读取待卷积矩阵<br>for_begin(start1, end1, i, $0, m1)<br>for_begin(start2, end2, k, $0, n1)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>#读取卷积核<br>for_begin(start3, end3, i, $0, m2)<br>for_begin(start4, end4, k, $0, n2)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br>#m1-m2+1<br>sub m1_m2_1, m1, m2<br>addi m1_m2_1, m1_m2_1, 1<br><br>sub n1_n2_1, n1, n2<br>addi n1_n2_1, n1_n2_1, 1<br><br>#卷积<br>for_begin(start5, end5, i, $0, m1_m2_1)<br>for_begin(start6, end6, k, $0, n1_n2_1)<br> li temp, 0<br> for_begin(start7, end7, ii, $0, m2)<br> for_begin(start8, end8, kk, $0, n2)<br> add temp3, ii, i<br> add temp0, kk, k<br> load_arr(A, temp3, temp0, temp1)<br> load_arr(B, ii, kk, temp2)<br> mult temp1, temp2<br> mflo temp0<br> add temp, temp, temp0<br> for_end(start8, end8, kk)<br> for_end(start7, end7, ii)<br> store_arr(C, i, k, temp)<br>for_end(start6,end6,k)<br>for_end(start5, end5, i)<br><br>#打印卷积结果<br>for_begin(start9, end9, i, $0, m1_m2_1)<br>for_begin(start10, end10, k, $0, n1_n2_1)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space) <br>for_end(start10, end10, k)<br>printStr(enter)<br>for_end(start9,end9, i)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="高精度阶乘的计算"><a href="#高精度阶乘的计算" class="headerlink" title="高精度阶乘的计算"></a>高精度阶乘的计算</h2><h3 id="C语言代码-6"><a href="#C语言代码-6" class="headerlink" title="C语言代码"></a>C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 10000</span><br><span class="hljs-type">int</span> f[MAX];<br><span class="hljs-type">void</span> <span class="hljs-title function_">Arr_reset</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=m;i&lt;=n;i++)<br>    &#123;<br>        a[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    Arr_reset(f,<span class="hljs-number">0</span>,(<span class="hljs-keyword">sizeof</span>(f)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)));<span class="hljs-comment">//对数组进行初始化</span><br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> jj= <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-comment">//乘以 i4</span><br>        <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=jj;j++)<span class="hljs-comment">//最不易理解的</span><br>        &#123;<br>            <span class="hljs-type">int</span> s=f[j]*i+c;<br>            f[j]=s%<span class="hljs-number">10</span>;<br>            c=s/<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span> (j == jj &amp;&amp; c != <span class="hljs-number">0</span>)&#123;<br>                jj++;<br>            &#125;<br>            <span class="hljs-comment">//算出的 s 是单位数时，会连续覆盖 f[0]</span><br>            <span class="hljs-comment">//否则一个多位数会倒过来存储，如 123，f[0]存 3，f[1]存 2，f[3]存 1</span><br>            <span class="hljs-comment">//因此上式先求余，在求模</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jj=%d\n&quot;</span>, jj);<br>    <span class="hljs-keyword">for</span>(j=MAX<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        <span class="hljs-keyword">if</span>(f[j])<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//忽略前导 0</span><br>    <span class="hljs-keyword">for</span>(i=j;i&gt;=<span class="hljs-number">0</span>;i--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="MIPS答案-14"><a href="#MIPS答案-14" class="headerlink" title="MIPS答案"></a>MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a:.space 4000<br>enter:.word &#x27;\n&#x27;<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>bgt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_begin(%startLabel, %endLabel, %i, %start, %end)<br>li %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_end(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv s, $t2<br>.eqv temp, $t3<br>.eqv c, $t4<br>.eqv jj, $t5<br>.eqv n, $s0<br>.eqv two, $s1<br>.eqv ten, $s2<br>.eqv max, $s3<br>.eqv one, $s4<br>.eqv MAX, 1000<br><br>.text<br>li one, 1<br>li two, 2<br>li ten, 10<br>li max, MAX<br>#for_c_begin(start0, end0, i, $0, MAX)<br>#store_arr(a, i, 0)<br>#for_end(start0, end0, i)<br><br>inputInt(n)<br>store_arr(a, $0, one)<br>li jj, 0<br>for_c_begin(start1, end1, i, two, n) # 2&lt;=i&lt;=n<br>li c, 0<br>for_c_begin(start2, end2, k, $0, jj)<br>load_arr(a, k, temp)<br>mult temp, i<br>mflo s<br>add s, s, c # s = a[k] * i + c<br>div s, ten<br>mfhi temp<br>mflo c # c = s / 10<br>store_arr(a, k, temp) # a[k] = s % 10<br>beqz c, skip<br>bne k, jj, skip<br>addi jj, jj, 1<br>skip: <br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>for_decrease_c_begin(start4, end4, i, jj, $0) #k&gt;=i&gt;=0<br>load_arr(a, i, temp)<br>printInt(temp)<br>for_decrease_end(start4, end4, i)<br><br>printStr(enter)<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-5"><a href="#易错点-5" class="headerlink" title="易错点"></a>易错点</h3><ul><li>超时问题,题目所给字符串为1000,为了避免每次循环都要进行1000次,我们设立一个参数<code>jj</code>,用来记录计算答案可能到达的最高位<ul><li>初始,<code>jj</code>=0</li><li>在for循环中,若循环参数<code>j</code>==<code>jj</code>,且此时向高一位传递的数不为0(<code>c!=0</code>),则对<code>jj</code>加一操作</li></ul></li><li><code>load_arr</code>与<code>store_arr</code>中不要用<code>mult</code>,这样涉及的寄存器会增多,且指令数会暴增,必须用<code>sll</code>.</li></ul><h1 id="上机"><a href="#上机" class="headerlink" title="上机"></a>上机</h1><h2 id="P2-Q1-发糖"><a href="#P2-Q1-发糖" class="headerlink" title="P2_Q1 发糖"></a>P2_Q1 发糖</h2><blockquote><p>取K个糖,分发给n个人,要求每个人得到的糖果数量相同,剩下糖果若不够给每个人发一个,则视为剩余的糖果.现要求$L\leq K\leq R$,保证n个人能得到的糖果最多,同时剩余的糖果最少.只输出剩余的糖果数量.</p></blockquote><h3 id="思路-3"><a href="#思路-3" class="headerlink" title="思路"></a>思路</h3><blockquote><p>若L和R能发给同学的数量相同,即$\lfloor \frac{L}{n}\rfloor=\lfloor \frac{R}{n}\rfloor$,则K取最小值即可,此时剩余糖果数量为$L\%n$,若若L和R能发给同学的数量不相同,则K取$\lfloor \frac{R}{n}\rfloor\times n$个,剩余糖果数量一定为0</p></blockquote><h3 id="C语言"><a href="#C语言" class="headerlink" title="C语言"></a>C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, L, R;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;L, &amp;R);<br>    <span class="hljs-keyword">if</span> (L / n == R / n) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L % n);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="P2-Q2-欧拉筛"><a href="#P2-Q2-欧拉筛" class="headerlink" title="P2_Q2 欧拉筛"></a>P2_Q2 欧拉筛</h2><blockquote><p>利用欧拉筛判断n是否为素数</p></blockquote><h2 id="P2-Q3-有向图dfs"><a href="#P2-Q3-有向图dfs" class="headerlink" title="P2_Q3  有向图dfs"></a>P2_Q3  有向图dfs</h2><blockquote><p>输入一个有向图,输出从一个规定起点出发能找到的死角(出度为0的点)个数,起点为死角则输出0</p></blockquote><h3 id="易错点-6"><a href="#易错点-6" class="headerlink" title="易错点"></a>易错点</h3><blockquote><p>这道题只是一个翻译题,考察对递归函数的使用,但上级时出现了一些细节上的错误:</p><ul><li>寄存器重复赋别名,导致了多个变量共用一个寄存器,运行结果中出现了超时的问题,很遗憾没能早点发现for循环的参数和别的变量弄混了.</li><li>宏中的变量没有用%作为前缀,导致了本该是<code>%arr</code>的地方出现了<code>arr</code>,调用宏时指向了错误数组地址</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>MIPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="用途"><a href="#用途" class="headerlink" title="用途"></a>用途</h1><blockquote><p>管理元素所属集合的数据结构,实现为一个森林,其中每棵树表示一个集合,树中的节点对应集合中的元素.其支持两种操作:</p><ul><li>合并:合并两个元素所属集合</li><li>查询:查询某个元素所属集合</li></ul></blockquote><h2 id="模板"><a href="#模板" class="headerlink" title="模板"></a>模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] pre;<br><span class="hljs-comment">// 上级数组初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        pre[i] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 寻找上级,并将上一级修改为最高的一级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findPre</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pre[key] == key) &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre[key] = findPre(pre[key]);<br>&#125;<br><br><span class="hljs-comment">// 联合两个节点,使其拥有共同的上级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unite</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rootx</span> <span class="hljs-operator">=</span> findPre(x);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rooty</span> <span class="hljs-operator">=</span> findPre(y);<br>    <span class="hljs-keyword">if</span> (rootx != rooty) &#123;<br>        pre[rootx] = rooty;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog调试系统任务和编译预处理语句</title>
    <link href="/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="monitor"><a href="#monitor" class="headerlink" title="$monitor"></a>$monitor</h2><p>监视被测试模块的所有感兴趣的信号.</p><h2 id="monitor-p1-p2-…pn"><a href="#monitor-p1-p2-…pn" class="headerlink" title="$monitor(p1,p2,…pn)"></a>$monitor(p1,p2,…pn)</h2><p>按照格式字符串打印信号</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$monitor</span>(<span class="hljs-built_in">$time</span>, ,<span class="hljs-string">&quot;rxd=%b txd=%b&quot;</span>,rxd,txd);<br></code></pre></td></tr></table></figure><h2 id="monitor-on-monitor-off"><a href="#monitor-on-monitor-off" class="headerlink" title="$monitor on/ monitor off"></a>$monitor on/ monitor off</h2><p>启动/关闭监控任务</p><h2 id="time"><a href="#time" class="headerlink" title="$time"></a>$time</h2><p>返回一个64位的整数来表示当前的仿真时刻值(总是输出整数)</p><h2 id="realtime"><a href="#realtime" class="headerlink" title="$realtime"></a>$realtime</h2><p>和$time作用相似,返回的是实型数</p><h2 id="finish"><a href="#finish" class="headerlink" title="$finish"></a>$finish</h2><p>退出仿真器,返回主操作系统</p><h2 id="stop"><a href="#stop" class="headerlink" title="$stop"></a>$stop</h2><p>将EDA工具置为暂停模式</p><h2 id="readmemb"><a href="#readmemb" class="headerlink" title="$readmemb"></a>$readmemb</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br></code></pre></td></tr></table></figure><p>读取数据文件,其中<code>readmemb</code>读取的数字必须是二进制,<code>readmemh</code>读取的数字必须是十六进制.</p><h2 id="random"><a href="#random" class="headerlink" title="$random"></a>$random</h2><p>产生随机数</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">23</span>:<span class="hljs-number">0</span>] <span class="hljs-keyword">rand</span><br><span class="hljs-keyword">rand</span> = <span class="hljs-built_in">$random</span> % <span class="hljs-number">60</span>;<br><span class="hljs-comment">// 产生一个[-59,59]内的随机数</span><br></code></pre></td></tr></table></figure><h1 id="编译预处理"><a href="#编译预处理" class="headerlink" title="编译预处理"></a>编译预处理</h1><h2 id="define"><a href="#define" class="headerlink" title="`define"></a>`define</h2><p>用一个指定的标识符(即名字)来代表一个字符串</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">define</span> 标识符(宏名) 字符串(宏内容)</span><br></code></pre></td></tr></table></figure><p>例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test;<br>    <span class="hljs-keyword">reg</span> a,b,c,d,e,out;<br><span class="hljs-meta">`<span class="hljs-keyword">define</span> expression a + b + c + d</span><br>    <span class="hljs-keyword">assign</span> out = `expression + e;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="timescale"><a href="#timescale" class="headerlink" title="`timescale"></a>`timescale</h2><p>说明在该命令后的模块的事件单位和时间精度</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> &lt;时间单位&gt;/&lt;时间精度&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣双周赛140</title>
    <link href="/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/"/>
    <url>/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/</url>
    
    <content type="html"><![CDATA[<h1 id="T1-替换为数位和以后的最小元素"><a href="#T1-替换为数位和以后的最小元素" class="headerlink" title="T1:替换为数位和以后的最小元素"></a>T1:<a href="https://leetcode.cn/problems/minimum-element-after-replacement-with-digit-sum/">替换为数位和以后的最小元素</a></h1><blockquote><p>给你一个整数数组 <code>nums</code> 。</p><p>请你将 <code>nums</code> 中每一个元素都替换为它的各个数位之 <strong>和</strong> 。</p><p>请你返回替换所有元素以后 <code>nums</code> 中的 <strong>最小</strong> 元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = inf<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> nums:<br>            tmp = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> x:<br>                tmp += x % <span class="hljs-number">10</span><br>                x= x//<span class="hljs-number">10</span><br>            ans = <span class="hljs-built_in">min</span>(ans, tmp)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>                tmp += x % <span class="hljs-number">10</span>;<br>                x /= <span class="hljs-number">10</span>;<br>            &#125;<br>            ans = Integer.min(ans, tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="T2-高度互不相同的最大塔高和"><a href="#T2-高度互不相同的最大塔高和" class="headerlink" title="T2:高度互不相同的最大塔高和"></a>T2:<a href="https://leetcode.cn/problems/maximize-the-total-height-of-unique-towers/">高度互不相同的最大塔高和</a></h1><blockquote><p>给你一个数组 <code>maximumHeight</code> ，其中 <code>maximumHeight[i]</code> 表示第 <code>i</code> 座塔可以达到的 <strong>最大</strong> 高度。</p><p>你的任务是给每一座塔分别设置一个高度，使得：</p><ol><li>第 <code>i</code> 座塔的高度是一个正整数，且不超过 <code>maximumHeight[i]</code> 。</li><li>所有塔的高度互不相同。</li></ol><p>请你返回设置完所有塔的高度后，可以达到的 <strong>最大</strong> 总高度。如果没有合法的设置，返回 <code>-1</code> 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumTotalSum</span>(<span class="hljs-params">self, maximumHeight: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        maximumHeight.sort(reverse = <span class="hljs-literal">True</span>)<br>        cnt = Counter(maximumHeight)<br>        ans = <span class="hljs-number">0</span><br>        curr = inf<br>        <span class="hljs-keyword">for</span> x, ct <span class="hljs-keyword">in</span> cnt.items():<br>            <span class="hljs-keyword">if</span> curr == inf:<br>                curr = x-ct<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                    ans += x-i<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> curr &lt;= x:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += curr - i <br>                    curr = curr-ct<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += x - i <br>                    curr = x-ct<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">maximumTotalSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] maximumHeight)</span> &#123;<br>        Arrays.sort(maximumHeight);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> maximumHeight.length;<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            b[i] = maximumHeight[n-i-<span class="hljs-number">1</span>];<br>        &#125;<br>        maximumHeight = b;<br>        LinkedHashMap&lt;Integer,Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : maximumHeight) &#123;<br>            <span class="hljs-keyword">if</span> (cnt.containsKey(x)) &#123;<br>                cnt.put(x,cnt.get(x)+<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt.put(x,<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : cnt.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (x &lt; curr) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += x-k;<br>                &#125;<br>                curr = x - cnt.get(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += curr-k;<br>                &#125;<br>                curr = curr - cnt.get(x);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curr &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注:这里一定要用LinkedHashMap,以此保证哈希表的关键字集是有序的(根据插入顺序)</p></blockquote><h2 id="灵茶山艾府解法"><a href="#灵茶山艾府解法" class="headerlink" title="灵茶山艾府解法"></a>灵茶山艾府解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximunTotalSum</span>(<span class="hljs-params">self, h:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>)-&gt;<span class="hljs-built_in">int</span>:<br>        h.sort(reverse=<span class="hljs-literal">True</span>)<br>        n = <span class="hljs-built_in">len</span>(h)<br>        ans = h[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            h[i] = <span class="hljs-built_in">min</span>(h[i-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>, h[i])<br>            ans += h[i]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h1 id="T3-字典序最小的合法序列"><a href="#T3-字典序最小的合法序列" class="headerlink" title="T3:字典序最小的合法序列"></a>T3:<a href="https://leetcode.cn/problems/find-the-lexicographically-smallest-valid-sequence/">字典序最小的合法序列</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] validSequence(String s, String T) &#123;<br>        <span class="hljs-type">char</span>[] s = S.toCharArray();<br>        <span class="hljs-type">char</span>[] t = T.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length;<br>        <br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        suf[n] = m;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] == t[j]) &#123;<br>                j--;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">changed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] == t[j] || !changed &amp;&amp; suf[i+<span class="hljs-number">1</span>] &lt;= j+<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] != t[j]) &#123;<br>                    changed = <span class="hljs-literal">true</span>;<br>                &#125;<br>                ans[j++] = i;<br>                <span class="hljs-keyword">if</span> (j == m) &#123;<br>                    <span class="hljs-keyword">return</span> ans;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充-最少得分子序列"><a href="#补充-最少得分子序列" class="headerlink" title="补充:最少得分子序列"></a>补充:<a href="https://leetcode.cn/problems/subsequence-with-the-minimum-score/">最少得分子序列</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minimumScore</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        Arrays.fill(suf, m);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == t.charAt(j)) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> suf[<span class="hljs-number">0</span>];<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == t.charAt(j)) &#123;<br>                j++;<br>                ans = Integer.min(ans, suf[i+<span class="hljs-number">1</span>] - j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="T4-第一个几乎相等子字符串的下标"><a href="#T4-第一个几乎相等子字符串的下标" class="headerlink" title="T4: 第一个几乎相等子字符串的下标"></a>T4:<a href="https://leetcode.cn/problems/find-the-occurrence-of-first-almost-equal-substring/"> 第一个几乎相等子字符串的下标</a></h1><blockquote><p>利用Z算法，分别求出pattern与s的公共最长前缀数组和公共最长后缀数组，索引从小到大遍历，返回对应前缀+后缀$\geq$len(pattern)-1(即几乎相等)的下标.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_z</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        z = [<span class="hljs-number">0</span>] * n<br>        box_l = box_r = <span class="hljs-number">0</span>  <span class="hljs-comment"># z-box 左右边界</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> i &lt;= box_r:<br>                z[i] = <span class="hljs-built_in">min</span>(z[i - box_l], box_r - i + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 改成手动 if 可以加快速度</span><br>            <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>                box_l, box_r = i, i + z[i]<br>                z[i] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> z<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minStartingIndex</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, pattern: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        pre_z = <span class="hljs-variable language_">self</span>.calc_z(pattern + s)<br>        suf_z = <span class="hljs-variable language_">self</span>.calc_z(pattern[::-<span class="hljs-number">1</span>] + s[::-<span class="hljs-number">1</span>])<br>        suf_z.reverse()  <span class="hljs-comment"># 也可以不反转，下面写 suf_z[-i]</span><br>        m = <span class="hljs-built_in">len</span>(pattern)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, <span class="hljs-built_in">len</span>(s) + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> pre_z[i] + suf_z[i - <span class="hljs-number">1</span>] &gt;= m - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> i - m<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>               <br></code></pre></td></tr></table></figure><h2 id="扩展-Z算法-Z-Algorithm-扩展KMP"><a href="#扩展-Z算法-Z-Algorithm-扩展KMP" class="headerlink" title="扩展:Z算法(Z Algorithm,扩展KMP)"></a>扩展:Z算法(Z Algorithm,扩展KMP)</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><blockquote><p>对于一个长度为<code>n</code>的字符串s,定义函数<code>z[i]</code>表示<code>s</code>和s[i,n-1]的最长公共前缀(<code>LCP</code>)的长度,则z称为s的Z函数,热别地,<code>z[0]=0</code></p></blockquote><h3 id="朴素算法"><a href="#朴素算法" class="headerlink" title="朴素算法"></a>朴素算法</h3><blockquote><p>时间复杂度:$O(n^2)$</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">z_function_trivial</span>(<span class="hljs-params">s</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    z = [<span class="hljs-number">0</span>] * n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>            z[i] += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><h3 id="线性算法"><a href="#线性算法" class="headerlink" title="线性算法"></a>线性算法</h3><h4 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h4><blockquote><p>我们从1到n-1顺次计算z[i],在计算z[i]的过程中,我们会利用已经计算好的z[0],…z[i-1].</p><p><code>[i,i+z[i]-1]</code>称为i的匹配段(<code>Z-box</code>)</p><p>算法过程中我们维护右端点最靠右的匹配段,记作[l,r],s[l,r]是s的前缀,在计算z[i]时保证l$\leq$i,初始时l=r=0</p><p>在计算z[i]的过程中:</p><ul><li>如果$i\leq r$,则s[i,r]=s[i-l,r-l](字符串相同),因此$z[i]\geq min(z[i-l],r-i+1)$<ul><li>若$z[i-l]&lt;r-i+1$,则z[i]=z[i-l]</li><li>否则$z[i-l]\geq r-i+1$,这时z[i]=r-i+1,然后暴力枚举下一个字符扩展z[i]直到不能扩展为止</li></ul></li><li>如果$i\geq r$,那么我们直接按照朴素算法,从s[i]开始比较,暴力求出z[i]</li><li>在求出z[i]后,如果i+z[i]-1&gt;r,更新[l,r],即令l=i,r=i+z[i]-1</li></ul></blockquote><h4 id="动画"><a href="#动画" class="headerlink" title="动画"></a>动画</h4><p><img src="image-20240929164214557.png" alt="Z算法动画"></p><h4 id="时间复杂度"><a href="#时间复杂度" class="headerlink" title="时间复杂度"></a>时间复杂度</h4><p>线性遍历，$O(n)$</p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线段树</title>
    <link href="/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><h2 id="建立"><a href="#建立" class="headerlink" title="建立"></a>建立</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] d;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t)&#123;<br>        d[p] = a[s];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    m = s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    build(s,m,p*<span class="hljs-number">2</span>);<br>    build(m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[(p*<span class="hljs-number">2</span>) + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t. <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; r &gt;= t)&#123;<br>        <span class="hljs-keyword">return</span> d[p];<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>), sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改-增加-带懒惰标记"><a href="#修改-增加-带懒惰标记" class="headerlink" title="修改(增加)(带懒惰标记)"></a>修改(增加)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] b;<br><span class="hljs-comment">// 数组b存储懒惰标记</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-comment">// l,r为修改区间,c为修改量,[s,t]为当前节点包含的区间,p为当前节点的编号</span><br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r)&#123;<br>        d[p] += (t-s+<span class="hljs-number">1</span>)*c;<br>        b[p] += c;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p] &amp;&amp; s != t) &#123;<br>        <span class="hljs-comment">// 如果当前节点的懒惰标记非空,则更新当前节点两个字节点的值和懒惰标记值</span><br>        d[p * <span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p * <span class="hljs-number">2</span>] += b[p];<br>        b[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前节点的懒惰标记值清零</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询-带懒惰标记"><a href="#查询-带懒惰标记" class="headerlink" title="查询(带懒惰标记)"></a>查询(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p]) &#123;<br>        <span class="hljs-comment">// 这里不用判断是否是子节点,因为上面查询环节会直接返回值</span><br>        d[p*<span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] += b[p];<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l,r,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改-赋值-带懒惰标记"><a href="#修改-赋值-带懒惰标记" class="headerlink" title="修改(赋值)(带懒惰标记)"></a>修改(赋值)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) &#123;<br>        d[p] = (t-s+<span class="hljs-number">1</span>) *c, b[p] = c,v[p] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p]) &#123;<br>        d[p*<span class="hljs-number">2</span>] = b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>=<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r&gt;m)update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p])&#123;<br>        d[p * <span class="hljs-number">2</span>] += d[p] * (s-m+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += d[p] *(t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l &lt;= m) sum = getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDLBITS-CS450</title>
    <link href="/2024/09/25/HDLBITS-CS450/"/>
    <url>/2024/09/25/HDLBITS-CS450/</url>
    
    <content type="html"><![CDATA[<h1 id="timer"><a href="#timer" class="headerlink" title="timer"></a>timer</h1><p><img src="image-20240925222315525.png" alt="timer"></p><blockquote><p>模拟一个计时器,当Load为1时,载入data,指定其为倒计时的时间;当load为0时,时间减一.当倒计时结束时将tc输出为高电平</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br><span class="hljs-keyword">input</span> clk, <br><span class="hljs-keyword">input</span> load, <br><span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data, <br><span class="hljs-keyword">output</span> tc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] ct;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<span class="hljs-keyword">begin</span><br>            ct &lt;= data;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (ct == <span class="hljs-number">0</span>)<span class="hljs-keyword">begin</span><br>                ct &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                ct &lt;= ct - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> tc = (ct ==<span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="counter-2bc"><a href="#counter-2bc" class="headerlink" title="counter 2bc"></a>counter 2bc</h1><p><img src="image-20240926161655168.png" alt="counter 2bc"></p><blockquote><p>模拟一个二位计数器,当<code>train_valid</code>为高电平时,计数器根据<code>train_taken</code>改变状态,如果高电平则加一,反之减一.当计数器减少到0时,将不会再减少,而是保持原状;增加到3时,将不会再增加,而是保持原状.<code>areset</code>为异步复位,将计数器复位到<code>2&#39;b01</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            state &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                    state &lt;= state &lt; <span class="hljs-number">3</span> ? state + <span class="hljs-number">1</span> : <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    state &lt;= state &gt; <span class="hljs-number">0</span> ? state-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                state &lt;= state;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="history-shift"><a href="#history-shift" class="headerlink" title="history shift"></a>history shift</h1><p><img src="image-20240926162359702.png" alt="history shift1"></p><p><img src="image-20240926162425714.png" alt="history shift2"></p><blockquote><p>32位历史移位寄存器,并搭配回滚功能.</p><p>当<code>predict_valid</code>为高电平时,表示当前正处于预测状态,寄存器从LSB一侧移入一位预测的结果(<code>predict_taken</code>)</p><p>当<code>mispredicted</code>为高电平时,意味着预测发生错误,此时寄存器必须回滚到发生错误之前的状态(这里原文说的是”冲刷流水线”),并丢弃那些错误发生之后的状态(younger)</p><p>当<code>predict_valid</code>,<code>mispredicted</code>同时发生,后者优先级更高</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span> predict_valid,<br>    <span class="hljs-keyword">input</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] train_history<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history = <span class="hljs-number">32&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                predict_history &lt;= predict_history;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="gshare"><a href="#gshare" class="headerlink" title="gshare"></a>gshare</h1><p><img src="屏幕截图_26-9-2024_162629_hdlbits.01xz.net.jpeg" alt="gshare"></p><blockquote><p>根据题意,我们要增加128个2位PHT(pattern history table,模式匹配表),PHT根据7位<code>train_history</code>与7位<code>train_pc</code>异或结果进行寻址</p><p>电路分为两大部分:预测+训练.两者分别参考<em>history shift</em>与<em>counter 2bc</em></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span>  predict_valid,<br>    <span class="hljs-keyword">input</span>  [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_pc,<br>    <span class="hljs-keyword">output</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_history,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_pc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] PHT[<span class="hljs-number">127</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)<span class="hljs-keyword">begin</span><br>              PHT[i] &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid &amp;&amp; train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid) <span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>], predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b11</span> ? <br>                <span class="hljs-number">2&#x27;b11</span> : PHT[train_history ^ train_pc] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b0</span> ? <br>                <span class="hljs-number">2&#x27;b0</span> : PHT[train_history ^ train_pc] - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>                    <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> predict_taken = PHT[predict_history ^ predict_pc][<span class="hljs-number">1</span>];<br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 深克隆与浅克隆</title>
    <link href="/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    <url>/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/</url>
    
    <content type="html"><![CDATA[<h1 id="Java-深克隆与浅克隆"><a href="#Java-深克隆与浅克隆" class="headerlink" title="Java 深克隆与浅克隆"></a>Java 深克隆与浅克隆</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><h3 id="浅克隆"><a href="#浅克隆" class="headerlink" title="浅克隆"></a>浅克隆</h3><blockquote><p>在克隆对象时,只复制对象本身及其内部引用的基本数据类型字段的值,而不复制引用类型字段所指向的对象.这意味着克隆后的对象和原始对象会共享一部分引用对象</p></blockquote><p>下面是一份Java代码样例.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>        <span class="hljs-keyword">return</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>,<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> +  adv2.getName());<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*output:</span><br><span class="hljs-comment">10 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><blockquote><p>可以看到,代码对Adventurer类进行了<code>clone()</code>方法的重载,但并没有对其引用类<code>Weapon</code>类进行克隆.这样的克隆方法只复制了<code>Adventurer</code>类所持有的<code>name</code>,而没有复制<code>Weapon</code>.</p></blockquote><h3 id="深克隆"><a href="#深克隆" class="headerlink" title="深克隆"></a>深克隆</h3><blockquote><p>我们对重载<code>clone()</code>方法做修改,使其可以复制引用类Weapon类    </p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我们调用<code>Weapon</code>的创建方法,使其复制了一个新的Weapon并将其作为复制对象的引用类.代码重新运行的结果如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8</span> <span class="hljs-number">10</span><br>xiaohong xiaoming<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,对adv2(第二个<code>Adventurer</code>类)的<code>Weapon</code>进行修改,并不会改变<code>adv1</code>的Weapon的<code>atk</code>值,说明两个<code>Adventurer</code>类所引用的<code>Weapon</code>类已不是同一个.</p></blockquote><h2 id="深克隆方法"><a href="#深克隆方法" class="headerlink" title="深克隆方法"></a>深克隆方法</h2><p>在 Java 中，常见的实现深克隆的方式有：</p><ol><li>通过继承 <code>Cloneable</code> 接口，重写 <code>clone()</code> 方法实现深克隆；</li><li>通过序列化与反序列化的方式实现深克隆；</li><li>第三方工具类实现深克隆，克隆对象需继承 <code>Serializable</code> 接口。</li></ol><h3 id="Override-clone"><a href="#Override-clone" class="headerlink" title="Override clone()"></a>Override clone()</h3><blockquote><p>前文已经介绍这种方法.</p><p>在<code>Object</code>类中的<code>clone()</code>方法的声明中包含了<code>throws CloneNotSupportedException</code>，因此如果你的类实现了<code>Cloneable</code>接口并重写了<code>clone()</code>方法，而在该方法中调用了<code>super.clone()</code>，那么你的方法也需要声明会抛出<code>CloneNotSupportedException</code>异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<span class="hljs-comment">// 复制本类</span><br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<span class="hljs-comment">// 复制引用类</span><br>    <span class="hljs-keyword">return</span> copy;<span class="hljs-comment">//返回复制对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="Serialize-and-Deserialize"><a href="#Serialize-and-Deserialize" class="headerlink" title="Serialize and Deserialize"></a>Serialize and Deserialize</h3><blockquote><p>要实现序列化,我们首先改变<code>Adventurer</code>类与<code>Weapon</code>类的接口,将其修改为<code>Serializable</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br></code></pre></td></tr></table></figure><blockquote><p>通过新建<code>DeepCopyCloneUtil</code>类搭建<code>deepClone(T object)</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在<code>main()</code>中运行以下语句:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>    adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>    adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>    System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>    System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>得到结果为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">liming wangming<br><span class="hljs-number">23</span> <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><h3 id="Third-Party-Tools"><a href="#Third-Party-Tools" class="headerlink" title="Third-Party Tools"></a>Third-Party Tools</h3><blockquote><p>打开IDEA,文件-&gt;项目结构-&gt;库,点击”+”,选择”来自Maven”,输入com.google.code.gson进行搜索,下载对应安装包,对应导入语句为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br></code></pre></td></tr></table></figure><blockquote><p>我们利用Gson这个第三方库实现深克隆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br></code></pre></td></tr></table></figure><blockquote><p>运行结果:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Bob Alice<br><span class="hljs-number">19</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="附-整体代码"><a href="#附-整体代码" class="headerlink" title="附:整体代码"></a>附:整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>        copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>        <span class="hljs-keyword">return</span> copy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> + adv2.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>            adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>            adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>            System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>            System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>        adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>        adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>        System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>        System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">8 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">liming wangming</span><br><span class="hljs-comment">23 999</span><br><span class="hljs-comment">Bob Alice</span><br><span class="hljs-comment">19 100</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P0总结</title>
    <link href="/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="P0Q4-Logisim中的FSM"><a href="#P0Q4-Logisim中的FSM" class="headerlink" title="P0Q4:Logisim中的FSM"></a>P0Q4:Logisim中的FSM</h2><blockquote><p>通过搭建Mealy状态机来实现正则表达式的检测</p><p>首先要分清Mealy状态机和Moore状态机在Logisim电路搭建中的区别</p></blockquote><h3 id="Mealy状态机与Moore状态机"><a href="#Mealy状态机与Moore状态机" class="headerlink" title="Mealy状态机与Moore状态机"></a>Mealy状态机与Moore状态机</h3><h4 id="Mealy状态机"><a href="#Mealy状态机" class="headerlink" title="Mealy状态机"></a>Mealy状态机</h4><p><img src="image-20240924155626167.png" alt="Mealy状态机基本框架(同步复位)"></p><blockquote><p>Mealy状态机的输出由当前状态和输入两者共同决定</p></blockquote><h4 id="Moore状态机"><a href="#Moore状态机" class="headerlink" title="Moore状态机"></a>Moore状态机</h4><p><img src="image-20240924160204641.png" alt="Moore状态机框架(异步复位)"></p><blockquote><p>Moore状态机的输出由当前状态决定</p></blockquote><h3 id="解题步骤"><a href="#解题步骤" class="headerlink" title="解题步骤"></a>解题步骤</h3><p>对于本题Mealy状态机,我们分以下四步完成搭建.</p><ol><li>确定状态编码,画出状态转移</li><li>搭建Mealy状态机框架,确定复位方式</li><li>实现状态转移的Logisim电路</li><li>实现输出逻辑的Logisim电路</li></ol><h4 id="确定状态编码-画出状态转移"><a href="#确定状态编码-画出状态转移" class="headerlink" title="确定状态编码,画出状态转移"></a>确定状态编码,画出状态转移</h4><div class="table-container"><table><thead><tr><th>编码</th><th>状态</th></tr></thead><tbody><tr><td>S0</td><td>IDLE(空闲,当reset置1时回到此状态)</td></tr><tr><td>S1</td><td>“b”</td></tr><tr><td>S2</td><td>“bb”</td></tr><tr><td>S3</td><td>“ba”,”bc”,”bba”或”bbc”</td></tr><tr><td>S4</td><td>满足正则表达式的状态</td></tr></tbody></table></div><p><img src="55c3cda2c7b623233f71ab3df85d9dc.jpg" alt="状态转移图"></p><h4 id="搭建Mealy状态机框架-确定复位方式"><a href="#搭建Mealy状态机框架-确定复位方式" class="headerlink" title="搭建Mealy状态机框架,确定复位方式"></a>搭建Mealy状态机框架,确定复位方式</h4><p><img src="image-20240924162641868.png" alt="Mealy状态机+同步复位"></p><h4 id="实现状态转移的Logisim电路"><a href="#实现状态转移的Logisim电路" class="headerlink" title="实现状态转移的Logisim电路"></a>实现状态转移的Logisim电路</h4><h5 id="确定In与state"><a href="#确定In与state" class="headerlink" title="确定In与state"></a>确定In与state</h5><blockquote><p>通过comparator联通对应的tunnel</p></blockquote><p><img src="image-20240924163022813.png" alt="确定输入In"></p><p><img src="image-20240924163130250.png" alt="确定上一个状态state"></p><h5 id="根据状态转移图搭建变换关系电路"><a href="#根据状态转移图搭建变换关系电路" class="headerlink" title="根据状态转移图搭建变换关系电路"></a>根据状态转移图搭建变换关系电路</h5><blockquote><p>通过与非门与multiplexer,实现变换关系.这里我们以s1为例说明,若s1与b均为1,则nxt置2,反之置为0.</p></blockquote><p><img src="image-20240924163249957.png" alt="S1状态可能出现的下一个状态"></p><h5 id="输出下一个状态"><a href="#输出下一个状态" class="headerlink" title="输出下一个状态"></a>输出下一个状态</h5><blockquote><p>利用或门性质,对于这13个输入,只有其中一个是有效的,其余皆为0(我在这里还加入了一个实际上无效果的$s4\rightarrow s0$,便于检查)</p></blockquote><p><img src="image-20240924163603386.png" alt="输出下一个状态"></p><h4 id="实现输出逻辑的Logisim电路"><a href="#实现输出逻辑的Logisim电路" class="headerlink" title="实现输出逻辑的Logisim电路"></a>实现输出逻辑的Logisim电路</h4><blockquote><p>考虑输入和当前状态两者,只有它们所决定的下一个状态为s4时,output才为1,否则为0</p></blockquote><p><img src="image-20240924163830605.png" alt="输出逻辑"></p><h3 id="思考"><a href="#思考" class="headerlink" title="思考"></a>思考</h3><h4 id="1"><a href="#1" class="headerlink" title="1"></a>1</h4><p>状态存储器的复位方式包括<strong>异步复位</strong>和<strong>同步复位</strong>，二者的定义分别是什么？两种复位方式在 Verilog 中可以通过什么语句句式实现？在 Logisim 中又可以通过什么样的电路框架实现？</p><blockquote><p>同步复位:当时钟信号的上升沿到来时,若复位信号有效,对系统进行复位.</p><p>异步复位:当复位信号有效时,立即对系统进行复位.这一过程与时钟信号无关.</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 同步复位</span><br><span class="hljs-keyword">module</span> synchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 异步复位</span><br><span class="hljs-keyword">module</span> asynchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><blockquote><p>在Logisim中,寄存器的clear端口可以很方便地实现异步复位,而同步复位需要在信号输入D端口前加上一个multplexer,由areset决定信号不变还是置0,待下一次时钟信号上升沿输入寄存器</p></blockquote><p><img src="image-20240924165125605.png" alt="异步复位"></p><p><img src="image-20240924165228120.png" alt="同步复位"></p><h4 id="2"><a href="#2" class="headerlink" title="2"></a>2</h4><p>在 Verilog 中我们可以通过<code>initial</code>块对状态存储器的初值进行定义，在 Logisim 中我们可以通过哪些电路框架实现赋初值的功能？</p><blockquote><p>要实现对于是否处于初始状态的判断,我们需要用到Counter和plexer,基本逻辑框架如下</p></blockquote><p><img src="image-20240924170237417.png" alt="使用Counter实现初始赋值"></p><blockquote><p>基于此,我们可以实现一个带有初始赋值功能的寄存器</p></blockquote><p><img src="image-20240924170627688.png" alt="带有初始赋值功能的寄存器"></p><h2 id="P0Q1-CRC-校验码计算电路的设计与测试"><a href="#P0Q1-CRC-校验码计算电路的设计与测试" class="headerlink" title="P0Q1:CRC 校验码计算电路的设计与测试"></a>P0Q1:CRC 校验码计算电路的设计与测试</h2><h4 id="设计模二除法器"><a href="#设计模二除法器" class="headerlink" title="设计模二除法器"></a>设计模二除法器</h4><p><img src="image-20240924172513329.png" alt="模二除法器端口"></p><blockquote><p>注:本题不需要用到D端口</p></blockquote><p><img src="image-20240924172631774.png" alt="模二除法器"></p><h4 id="使用四位模二除法器搭建-8-位-CRC-校验码计算电路"><a href="#使用四位模二除法器搭建-8-位-CRC-校验码计算电路" class="headerlink" title="使用四位模二除法器搭建 8 位 CRC 校验码计算电路"></a>使用四位模二除法器搭建 8 位 CRC 校验码计算电路</h4><p><img src="image-20240924172846401.png" alt="CRC校验码计算电路"></p><h2 id="P0Q2-实现GRF"><a href="#P0Q2-实现GRF" class="headerlink" title="P0Q2:实现GRF"></a>P0Q2:实现GRF</h2><h3 id="端口"><a href="#端口" class="headerlink" title="端口"></a>端口</h3><p><img src="image-20240924194642759.png" alt="端口"></p><p><img src="image-20240924194631439.png" alt="功能"></p><p><img src="image-20240924185937157.png" alt="端口电路">    </p><h3 id="主要部件"><a href="#主要部件" class="headerlink" title="主要部件"></a>主要部件</h3><p><img src="image-20240924185908829.png" alt="32个32位寄存器"></p><p><img src="image-20240924185924211.png" alt="选择器组件"></p><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><h4 id="三态"><a href="#三态" class="headerlink" title="三态"></a>三态</h4><blockquote><p>在选择器组件中,我们必须将DMX(demultiplexer)中的three-state设置为yes</p><p>启用three-state后,会控制demultiplexer的输入输出端口进入高阻态</p></blockquote><p><img src="image-20240924193047096.png" alt="示例电路"></p><blockquote><p>先设定DMX的three-state为no,WE为1,IN为1,SEL为0,在时钟信号上升沿:</p></blockquote><p><img src="image-20240924193237747.png" alt="OUT1为高电平"></p><blockquote><p>可以看到寄存器1存储值为1,OUT1为高电平</p><p>接着再令SEL为1,在下一个时钟上升沿:</p></blockquote><p><img src="image-20240924193352492.png" alt="OUT1恢复为低电平,OUT2变为高电平"></p><blockquote><p>可以看到OUT1恢复为低电平,OUT2变为高电平,这其实并不符合我们的本意.OUT1此刻应该保持为高电平,且寄存器1不应该改变值为0.</p><p>最简便的对策就是勾选three-state,这样DMX的输出端口在未被SEL信号选中的时候会输出高阻值(X),避免对连接的寄存器和输出端口产生影响.</p></blockquote><p>P0附加题:ftoi</p><p><img src="image-20240925081703388.png" alt="主电路"></p><p><img src="image-20240925081714186.png" alt="normalize"></p><p><img src="image-20240925081724381.png" alt="补码器"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次上机</title>
    <link href="/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/"/>
    <url>/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="1"><a href="#1" class="headerlink" title="1"></a>1</h2><blockquote><p>搭建一个能处理三个输入指令的电路</p></blockquote><div class="table-container"><table><thead><tr><th>00</th><th>输出0</th></tr></thead><tbody><tr><td>01</td><td>输出上一次输出+1($a_n=a_{n-1}+1$)</td></tr><tr><td>10</td><td>输出之前输出之和($a_n=\mathop\Sigma\limits^{n-1}_{i=0}a_i$)</td></tr></tbody></table></div><p><img src="image-20240923220646182.png" alt="image-20240923220646182"></p><p><img src="image-20240923220711838.png" alt="image-20240923220711838"></p><h2 id="2"><a href="#2" class="headerlink" title="2"></a>2</h2><blockquote><p>向量相乘</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out<br>    );<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] t;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(vector_a <span class="hljs-keyword">or</span> vector_b)<span class="hljs-keyword">begin</span><br>      t = <span class="hljs-number">5&#x27;b0</span>;<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>        t = t + (vector_a[i] * vector_b[i]);<br>      <span class="hljs-keyword">end</span><br>      out = t;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct_tb();<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b;<br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>      a=<span class="hljs-number">32&#x27;b0</span>;<br>      b=<span class="hljs-number">32&#x27;b0</span>;<br>      #<span class="hljs-number">100</span><br>      a=<span class="hljs-number">32&#x27;d10</span>;<br>      b=<span class="hljs-number">32&#x27;d10</span>;<br>    <span class="hljs-keyword">end</span><br>    dotProduct uvv(<span class="hljs-variable">.vector_a</span>(a), <span class="hljs-variable">.vector_b</span>(b), <span class="hljs-variable">.out</span>(out));<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="3"><a href="#3" class="headerlink" title="3"></a>3</h2><blockquote><p>MIPS求数组中最长连续递增子数组</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C语言示例代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>, curr;<br>    <span class="hljs-keyword">while</span> (n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;curr);<br>        <span class="hljs-keyword">if</span> (curr &gt; last)&#123;<br>            len += <span class="hljs-number">1</span>;<br>            max = len &gt; max ? len : max;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            len = <span class="hljs-number">1</span>;<br>        &#125;<br>        last = curr;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, max);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv max, $s1<br>.eqv len, $s2<br>.eqv curr, $s3<br>.eqv last, $s4<br><br>.macro printInt(%int)<br>move $a0, %int<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro forLoop(%ct,%n,%startLabel,%endLabel)<br>%startLabel:<br>beq %ct, %n, %endLabel<br>.end_macro<br><br>.macro forEnd(%ct,%startLabel,%endLabel)<br>addi %ct, %ct, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>li last, -1<br>li $t0, 0<br>inputInt(n)<br>forLoop($t0,n,start,end)<br>inputInt(curr)<br>ble curr, last, less<br>add len, len, 1<br>bge max, len, skip<br>move max, len<br>skip:<br>j tail<br>less:<br>li len, 1<br>tail:<br>move last, curr<br>forEnd($t0,start,end)<br><br>printInt(max)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS</title>
    <link href="/2024/09/23/MIPS/"/>
    <url>/2024/09/23/MIPS/</url>
    
    <content type="html"><![CDATA[<h2 id="数据声明"><a href="#数据声明" class="headerlink" title="数据声明"></a>数据声明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>pi:.double 3.145926<br>str:.asciiz &quot;hello, world\n&quot;<br>i:.word 3 <br>array1:.byte &#x27;a&#x27;,&#x27;b&#x27;#声明一个存储2个字符的数组<br>array2:.space 40#声明一个存放40字节的空间<br></code></pre></td></tr></table></figure><h2 id="基本运算"><a href="#基本运算" class="headerlink" title="基本运算"></a>基本运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub$t2,$t3,$t4#  $t2 = $t3 - $t4<br>addi$t2,$t3, 5#  $t2 = $t3 + 5;   &quot;add immediate&quot; (no sub immediate)<br>addu$t1,$t6,$t7#  $t1 = $t6 + $t7;   add as unsigned integers<br>subu$t1,$t6,$t7#  $t1 = $t6 + $t7;   subtract as unsigned integers<br><br>mult$t3,$t4#  multiply 32-bit quantities in $t3 and $t4, and store 64-bit<br>#  result in special registers Lo and Hi:  (Hi,Lo) = $t3 * $t4<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 运算结果存储在hi,lo（hi高位数据， lo地位数据）<br>div$t5,$t6#  Lo = $t5 / $t6   (integer quotient)<br>#  Hi = $t5 mod $t6   (remainder)<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 商数存放在 lo, 余数存放在 hi<br>mfhi$t0#  move quantity in special register Hi to $t0:   $t0 = Hi<br># 不能直接获取 hi 或 lo中的值， 需要mfhi, mflo指令传值给寄存器<br>mflo$t1#  move quantity in special register Lo to $t1:   $t1 = Lo<br>#  used to get at result of product or quotient<br><br>move$t2,$t3#  $t2 = $t3<br></code></pre></td></tr></table></figure><h2 id="Syscall"><a href="#Syscall" class="headerlink" title="Syscall"></a>Syscall</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>myFloat:.float 123.456<br>pi:.double 3.1415926<br>zeroDouble:.double 0<br>enter:.asciiz &quot;\n&quot;<br>i:.word 3<br>.macro ent<br>li $v0, 4<br>la $a0, enter<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro <br><br>.macro writeInt(%k)<br>move $a0, %k<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.text<br>#print integer<br>li $v0, 1<br>li $a0, 12<br>syscall<br><br>ent<br>#print float<br>li $v0, 2<br>ldc1 $f12, myFloat<br>syscall<br><br>ent<br>#print double<br>li $v0,3<br>ldc1 $f2, pi<br>ldc1 $f0, zeroDouble<br>add.d $f12, $f2, $f0<br>syscall<br><br>ent<br>#use macro as a write function<br>li $t0, 4<br>writeInt($t0)<br><br>ent<br>#read and then print integer<br>li $v0, 5<br>syscall<br>add $a0, $0, $v0<br>li $v0, 1<br>syscall<br><br>ent<br>#read string<br>li $v0, 8<br>li $a1, 100<br>syscall<br>li $v0, 4<br>syscall<br></code></pre></td></tr></table></figure><h2 id="macro"><a href="#macro" class="headerlink" title="macro"></a>macro</h2><blockquote><p>宏</p></blockquote><h3 id="堆栈"><a href="#堆栈" class="headerlink" title="堆栈"></a>堆栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环-从0到n"><a href="#for循环-从0到n" class="headerlink" title="for循环(从0到n)"></a>for循环(从0到n)</h3><blockquote><p>C语言:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %n)<br>li $t7, 0<br>%startLabel:<br>bge $t7, %n, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环-从low到high"><a href="#for循环-从low到high" class="headerlink" title="for循环(从low到high)"></a>for循环(从low到high)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = low; i &lt; high; i++)&#123;<br>    <span class="hljs-comment">// body, 循环high-low次</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bge $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="while循环-两数比较"><a href="#while循环-两数比较" class="headerlink" title="while循环(两数比较)"></a>while循环(两数比较)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span> (num1 &lt; num2)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro while_begin(%startLabel, %endLabel, %num1, %num2)<br>%startLabel:<br>bge %num1, %num2, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Commitizen的使用</title>
    <link href="/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Commitizen的使用"><a href="#Commitizen的使用" class="headerlink" title="Commitizen的使用"></a>Commitizen的使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g commitizen<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>用以下指令代替git commit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cz</span><br></code></pre></td></tr></table></figure><h3 id="选择提交类型"><a href="#选择提交类型" class="headerlink" title="选择提交类型"></a>选择提交类型</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">feat:</span> A <span class="hljs-built_in">new</span> feature<br><span class="hljs-symbol">fix:</span> A bug fix<br><span class="hljs-symbol">docs:</span> Documentation only changes<br><span class="hljs-symbol">style:</span> Changes that <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> affect the meaning <span class="hljs-keyword">of</span> the code<br><span class="hljs-symbol">refactor:</span> A code change that neither fixes a bug nor adds a feature<br><span class="hljs-symbol">perf:</span> A code change that improves performance<br><span class="hljs-keyword">Select</span> the type <span class="hljs-keyword">of</span> change that you<span class="hljs-comment">&#x27;re commiting:</span><br></code></pre></td></tr></table></figure><h3 id="提交范围"><a href="#提交范围" class="headerlink" title="提交范围"></a>提交范围</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">scope</span> of <span class="hljs-keyword">this</span> change:<br></code></pre></td></tr></table></figure><p>通过回车键跳过,通过输入|换行</p><h3 id="简短描述"><a href="#简短描述" class="headerlink" title="简短描述"></a>简短描述</h3><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><h3 id="破坏性变更"><a href="#破坏性变更" class="headerlink" title="破坏性变更"></a>破坏性变更</h3><p>破坏性变更:本次提交会影响到其它部分的功能与之前的版本不兼容</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>本次提交是否解决了某个Issue</p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git指令</title>
    <link href="/2024/09/22/Git%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/09/22/Git%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add *.c<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># -p代表显示每次提交的内容差异,-2表示仅显示最近两次的提交</span><br>git <span class="hljs-built_in">log</span> -<span class="hljs-built_in">stat</span><br><span class="hljs-comment">#统计数据</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br>git <span class="hljs-built_in">log</span> --since =2.weeks<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -amend<br><span class="hljs-comment">#撤销</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br><span class="hljs-comment">#查看远程仓库</span><br>git remote add pb https://...<br><span class="hljs-comment"># pb是简写</span><br>git fetch [remote-name]<br><br>git push origin master<br><br>git show<br><br>git remote rename pb paul<br><span class="hljs-comment"># 重命名</span><br>git remote <span class="hljs-built_in">rm</span> paul<br><span class="hljs-comment"># 删除</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag<br><span class="hljs-comment"># 列出标签</span><br>git tag v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b iss53<br><span class="hljs-comment">#创建并切换到分支</span><br>git branch -d hotfix<br><span class="hljs-comment">#删除</span><br>git branch --merged<br>git branch --no-merged<br>git merge A.txt<br><span class="hljs-comment">#合并</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br><span class="hljs-comment">#从服务器上抓取数据</span><br>git checkout --track origin/serverfix<br>git checkout -b sf origin/serverfix<br><span class="hljs-comment"># 拉取分支,sf是自定义名</span><br>git branch -vv<br><span class="hljs-comment">#查看追踪分支</span><br>git branch -u orgin.serverfix<br><span class="hljs-comment"># 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br><span class="hljs-comment"># 从服务器上抓取本地没有的数据</span><br>git pull<br><span class="hljs-comment"># 含义是git fetch + git merge</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete serverfix<br><span class="hljs-comment"># 删除远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase master<br><span class="hljs-comment"># 将当前分支变基到master分支上</span><br></code></pre></td></tr></table></figure><p><img src="image-20240919142734429.png" alt="image-20240919142734429"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature<br>git rebase master<br></code></pre></td></tr></table></figure><p><img src="image-20240919142743629.png" alt="image-20240919142743629"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> /opt/git/project.git<br>git <span class="hljs-built_in">clone</span> file:///opt/git/project.git<br>git remote add local_proj /opt/git/project.git<br><span class="hljs-comment"># 增加本地版本库到现有的Git项目</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r test.git meteor041@github.com:meteor041/test.git<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~./ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 查看密钥</span><br>ssh-keygen<br><span class="hljs-comment"># chuang&#x27;jian</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣周赛415(字典树,KMP)</title>
    <link href="/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/"/>
    <url>/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/</url>
    
    <content type="html"><![CDATA[<h1 id="力扣周赛415"><a href="#力扣周赛415" class="headerlink" title="力扣周赛415"></a>力扣周赛415</h1><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><blockquote><p>T3数据量较小,可以使用字典树进行查找,由于可以查找前缀,将用于标记字符串结尾的EndNode删去,并将查找方法的返回值改为int类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q=newNode;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trietree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String s : words)&#123;<br>            trietree.insert(s);<br>            maxLen = Math.max(maxLen, s.length());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; target.length(); i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(i + maxLen, target.length());<br>            nextRight = Math.max(nextRight, left + trietree.search(target.substring(left,right)));<br>            <span class="hljs-keyword">if</span> (currRight == i)&#123;<br>                <span class="hljs-keyword">if</span> (nextRight == currRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    currRight = nextRight;<br>                &#125;<br>                step++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> step;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附-字典树模板"><a href="#附-字典树模板" class="headerlink" title="附:字典树模板"></a>附:字典树模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">27</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&#123;<br>    EndNode()&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q = q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br>        q.children[<span class="hljs-number">26</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndNode</span>();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> q.children[<span class="hljs-number">26</span>] != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trieTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        trieTree.insert(<span class="hljs-string">&quot;abcde&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcd&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;fjklnhmasdjk&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abc&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcde&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcdef&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><blockquote><p>字符串哈希</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1_070_777_777</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">char</span>[] t = target.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> t.length;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">8e8</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt((<span class="hljs-type">int</span>) <span class="hljs-number">1e8</span>);<br>        <span class="hljs-type">int</span>[] powBase = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] preHash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        powBase[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            powBase[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)((<span class="hljs-type">long</span>) powBase[i] * BASE % MOD);<br>            preHash[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)(((<span class="hljs-type">long</span>) preHash[i] * BASE + t[i]) % MOD);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            maxLen = Math.max(maxLen, w.length());<br>        &#125;<br>        Set&lt;Integer&gt;[] sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxLen];<br>        Arrays.setAll(sets, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; w.length(); j++)&#123;<br>                h = (h * BASE + w.charAt(j)) % MOD;<br>                sets[j].add((<span class="hljs-type">int</span>) h);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> calcSz(i, preHash, powBase, sets);<br>            nextRight = Math.max(nextRight, i+sz);<br>            <span class="hljs-keyword">if</span> (i == curRight)&#123;<br>                <span class="hljs-keyword">if</span> (i == nextRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                curRight = nextRight;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calcSz</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>[] preHash, <span class="hljs-type">int</span>[] powBase, Set&lt;Integer&gt;[] sets)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(preHash.length - <span class="hljs-number">1</span> - i, sets.length) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left + <span class="hljs-number">1</span> &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">subHash</span> <span class="hljs-operator">=</span> ( ((<span class="hljs-type">long</span>) preHash[i + mid] - (<span class="hljs-type">long</span>) preHash[i] * powBase[mid]) % MOD + MOD) % MOD;<br>            <span class="hljs-keyword">if</span> (sets[mid-<span class="hljs-number">1</span>].contains((<span class="hljs-type">int</span>) subHash))&#123;<br>                left = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="AC自动机"><a href="#AC自动机" class="headerlink" title="AC自动机"></a>AC自动机</h2><h3 id="前缀函数"><a href="#前缀函数" class="headerlink" title="前缀函数"></a>前缀函数</h3><h4 id="计算方式"><a href="#计算方式" class="headerlink" title="计算方式"></a>计算方式</h4><blockquote><p>计算字符串前k位多少位前缀和与后缀和相等,如”abcabcd”:[0,0,0,1,2,3,0]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, p = j;<br>                <span class="hljs-keyword">while</span> (p &lt;= i) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[k++] != arr[p++]) &#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    ret[i] = k;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(arr)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h4><blockquote><p>对于$ret<a href="k&gt;1">k</a>$,它只可能比$ret[k-1]$多1,或者维持不变或减少,这里我们改为字符串输入,并使用subString()和equals()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s.substring(<span class="hljs-number">0</span>, j).equals(s.substring(i-j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>))) &#123;<br>                    ret[i] = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcd&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最终算法"><a href="#最终算法" class="headerlink" title="最终算法"></a>最终算法</h4><blockquote><p>考虑当$s[i+1] \neq s[ret[i]]$时如何跳转,令j为$s[i+1] \neq s[ret[i]]$时选择的第二长度</p><p>状态转移:$j^{(n)}=\pi[j^{(n-1)}-1]$</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;<br>                j = ret[j-<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            ret[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcde&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="KMP"><a href="#KMP" class="headerlink" title="KMP"></a>KMP</h3><blockquote><p>Knuth-Morris-Pratt算法</p><p>给定一个文本text和字符串pattern,找到pattern在text中的所有出现</p><p>构造一个字符串:pattern+”#”+text,调用计算前缀函数的方法,获得结果数组,对于$i&gt;pattern.length()$,若$ret[i]==pattern.length()$,则可以判断在text中的第$i-2\cdot pattern.length()$处出现pattern字符串</p><p>时间复杂度$O(n+m)$,空间复杂度$O(n+m)$(n,m分别为text,pattern的长度)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMP</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String text, String pattern)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> pattern + <span class="hljs-string">&quot;#&quot;</span> + text;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz1</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz2</span> <span class="hljs-operator">=</span> pattern.length();<br>        List&lt;Integer&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] lps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(p);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sz2 + <span class="hljs-number">1</span>; i &lt;= sz1 + sz2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (lps[i] == sz2) &#123;<br>                v.add(i-<span class="hljs-number">2</span> * sz2);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aab&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aabaabaabbcdaab&quot;</span>;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KMP</span>().search(t, p));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合逻辑电路</title>
    <link href="/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <url>/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><ul><li><p>一个PN结就是一只晶体二极管</p></li><li><p>正向导通:外加正向电压大于开启电压$V_D$,二极管导通,$U_D=V_D$</p></li><li><p>反向截止:外加反向电压或电压小于开启电压$V_D$,二极管截止,$I_D=0$</p></li><li>击穿:外加反向电压超过一个阈值$V_Z$时,二极管会被击穿,压降是$V_Z$</li></ul><p><img src="image-20240918174155826.png" alt="image-20240918174155826"></p><h2 id="晶体三极管"><a href="#晶体三极管" class="headerlink" title="晶体三极管"></a>晶体三极管</h2><p>图为NPN型</p><p><img src="image-20240918174330224.png" alt="image-20240918174330224"></p><p><img src="image-20240918174340598.png" alt="image-20240918174340598"></p><h2 id="与门"><a href="#与门" class="headerlink" title="与门"></a>与门</h2><p><img src="image-20240923172530685.png" alt="image-20240923172530685"></p><h2 id="或门"><a href="#或门" class="headerlink" title="或门"></a>或门</h2><p><img src="image-20240923172555968.png" alt="image-20240923172555968"></p><h2 id="非门"><a href="#非门" class="headerlink" title="非门"></a>非门</h2><p><img src="image-20240923172709926.png" alt="image-20240923172709926"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅲ</title>
    <link href="/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/"/>
    <url>/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅲ-addi-j"><a href="#构建单周期CPU记录Ⅲ-addi-j" class="headerlink" title="构建单周期CPU记录Ⅲ(addi, j)"></a>构建单周期CPU记录Ⅲ(addi, j)</h1><h2 id="addi"><a href="#addi" class="headerlink" title="addi"></a>addi</h2><p>对于addi,不需要新增器件,addi与add的不同,本质上是将其中一个寄存器换成了立即数.</p><p>比较两者的机器码</p><div class="table-container"><table><thead><tr><th><img src="image-20240912170401633.png" alt="add"></th></tr></thead><tbody><tr><td><img src="image-20240912170419516.png" alt="addi"></td></tr></tbody></table></div><p>可以发现:</p><ul><li>rs不变</li><li>rt的作用从原来的提供加数,变为赋值地址</li><li>rd消失,立即数代替rt成为加数</li></ul><p>因此修改如下:</p><ul><li>A1端口不变,仍然连接Instr[25:21]</li><li>SrcB不再接收Instr[20:16]的值,而是立即数</li><li>A3端口不再接收Instr[15:11]的值,而是Instr[20:16]</li></ul><p>我们对ALUSrc,RegDst两个信号作出修改</p><h2 id="j"><a href="#j" class="headerlink" title="j"></a>j</h2><p>对NXTAD(对下一个地址的计算器)做出修改,新增Jump信号</p><p><img src="image-20240912172223432.png" alt="NXTAD(新增Jump信号)"></p><h1 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h1><p><img src="image-20240912172136927.png" alt="整体"></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><div class="table-container"><table><thead><tr><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th></th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td></td></tr><tr><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table></div>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> classListOfGenerics&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T item)</span> &#123; array.add(item)&#125;;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123; <span class="hljs-keyword">return</span> array.get(index)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不能创建泛型数组,一般解决方案是在任何想要创建泛型数组的地方使用ArrayList</p></blockquote><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Banana</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jonathan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Apple</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CovariantArrays</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Fruit[] fruit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>[<span class="hljs-number">10</span>];<br>        fruit[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Banana</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实际数组类型是Apple[],只能在其中放置Apple及其子类,若放入Fruit对象,会在运行时抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// incompatible types</span><br>List&lt;Fruit&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>Apple的List与Fruit的List不同.即使Apple是Fruit的子类,两者在类型上也不等价.</p><p>使用通配符解决该问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span>&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br><span class="hljs-comment">// correct</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅱ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq"><a href="#构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq" class="headerlink" title="构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)"></a>构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)</h1><h2 id="新增信号"><a href="#新增信号" class="headerlink" title="新增信号"></a>新增信号</h2><h3 id="RegDst"><a href="#RegDst" class="headerlink" title="RegDst"></a>RegDst</h3><p>1:从指令15:11位中读取数据到A3端口</p><p>0:从指令20:16位中读取数据到A3端口</p><h3 id="ALUSrc"><a href="#ALUSrc" class="headerlink" title="ALUSrc"></a>ALUSrc</h3><ul><li>1:从EXT中读取符号扩展的立即数</li><li>0:从寄存器文件RD2端口中读取数据</li></ul><h3 id="MemtoReg"><a href="#MemtoReg" class="headerlink" title="MemtoReg"></a>MemtoReg</h3><ul><li>1:将从数据存储器中读取的数据输出到WD3</li><li>0:将从ALU中读取的数据输出到WD3</li></ul><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><div class="table-container"><table><thead><tr><th>指令</th><th>RegDst</th><th>ALUSrc</th><th>MemtoReg</th><th>ALUControl</th></tr></thead><tbody><tr><td>R指令(add, sub, and, or, slt)</td><td>1</td><td>0</td><td>0</td><td>varies</td></tr><tr><td>lw,sw</td><td>0</td><td>1</td><td>1</td><td>010(+)</td></tr><tr><td>beq</td><td>x</td><td>0</td><td>x</td><td>110(-)</td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table></div><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><div class="table-container"><table><thead><tr><th>ALUOp</th><th>含义</th><th>ALUOp</th><th>含义</th></tr></thead><tbody><tr><td>00</td><td>加法</td><td>10</td><td>依赖于func</td></tr><tr><td>01</td><td>减法</td><td>11</td><td>无定义</td></tr></tbody></table></div><div class="table-container"><table><thead><tr><th>ALUOp</th><th>Funct</th><th>ALUControl</th></tr></thead><tbody><tr><td>00</td><td>X</td><td>010(加)</td></tr><tr><td>X1</td><td>X</td><td>110(减)</td></tr><tr><td>1X</td><td>100000(add)</td><td>010(加)</td></tr><tr><td>1X</td><td>100010(sub)</td><td>110(减)</td></tr><tr><td>1X</td><td>100100(and)</td><td>000(与)</td></tr><tr><td>1X</td><td>100101(or)</td><td>001(或)</td></tr><tr><td>1X</td><td>101010(slt)</td><td>111(小于置位)</td></tr></tbody></table></div><ul><li>这里引用图表来自黑皮书,采用两级判断(先判断ALUOp,再判断ALUControl值),这里我采用另一种方法,对于非R型指令直接输出ALUControl,对R型指令两级判断.(见后图CU)</li></ul><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100000(add,5:0)</p><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100010(sub,5:0)</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100100(and,5:0)</p><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100101(or, 5:0)</p><h3 id="slt"><a href="#slt" class="headerlink" title="slt"></a>slt</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 101010(slt, 5:0)</p><h3 id="beq"><a href="#beq" class="headerlink" title="beq"></a>beq</h3><p>000100(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><h3 id="ALU-1"><a href="#ALU-1" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911230937221.png" alt="ALU"></p><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p><img src="image-20240911225650083.png" alt="CU"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911225716228.png" alt="整体"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅰ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅰ-初步-包括lw和sw"><a href="#构建单周期CPU记录Ⅰ-初步-包括lw和sw" class="headerlink" title="构建单周期CPU记录Ⅰ(初步,包括lw和sw)"></a>构建单周期CPU记录Ⅰ(初步,包括lw和sw)</h1><h2 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h2><h3 id="PC-Program-Counter-程序计数器"><a href="#PC-Program-Counter-程序计数器" class="headerlink" title="PC(Program Counter,程序计数器)"></a>PC(Program Counter,程序计数器)</h3><p><img src="image-20240911170903742.png" alt="image-20240911170903742"></p><h3 id="IM-Instuction-Memory-指令存储器"><a href="#IM-Instuction-Memory-指令存储器" class="headerlink" title="IM(Instuction Memory,指令存储器)"></a>IM(Instuction Memory,指令存储器)</h3><p><img src="image-20240911200511537.png" alt="image-20240911200511537"></p><h3 id="GRF-Register-File-寄存器文件"><a href="#GRF-Register-File-寄存器文件" class="headerlink" title="GRF(Register File,寄存器文件)"></a>GRF(Register File,寄存器文件)</h3><p><img src="image-20240911200549683.png" alt="image-20240911200549683"></p><h3 id="DM-Data-Memory-数据存储器"><a href="#DM-Data-Memory-数据存储器" class="headerlink" title="DM(Data Memory,数据存储器)"></a>DM(Data Memory,数据存储器)</h3><p><img src="image-20240911200524349.png" alt="image-20240911200524349"></p><h2 id="附加部件"><a href="#附加部件" class="headerlink" title="附加部件"></a>附加部件</h2><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911200643385.png" alt="image-20240911200643385"></p><h3 id="SPLT-splitter-分离器"><a href="#SPLT-splitter-分离器" class="headerlink" title="SPLT(splitter,分离器)"></a>SPLT(splitter,分离器)</h3><p><img src="image-20240911200703680.png" alt="image-20240911200703680"></p><h3 id="EXT-extender-扩位器"><a href="#EXT-extender-扩位器" class="headerlink" title="EXT(extender,扩位器)"></a>EXT(extender,扩位器)</h3><p><img src="image-20240911200729925.png" alt="image-20240911200729925"></p><h3 id="NXTAD-Next-Address-下一个地址的计算器"><a href="#NXTAD-Next-Address-下一个地址的计算器" class="headerlink" title="NXTAD(Next Address,下一个地址的计算器)"></a>NXTAD(Next Address,下一个地址的计算器)</h3><p><img src="image-20240911200825778.png" alt="image-20240911200825778"></p><h2 id="信号控制分析"><a href="#信号控制分析" class="headerlink" title="信号控制分析"></a>信号控制分析</h2><h3 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h3><div class="table-container"><table><thead><tr><th>指令</th><th>RegWrite</th><th>ALUControl[2:0]</th><th>MemWrite</th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>010</td><td>0</td></tr><tr><td>sw</td><td>0</td><td>010</td><td>1</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td></tr></tbody></table></div><h3 id="信号说明"><a href="#信号说明" class="headerlink" title="信号说明"></a>信号说明</h3><h4 id="RegWrite"><a href="#RegWrite" class="headerlink" title="RegWrite"></a>RegWrite</h4><ul><li><p>连接WE3端口</p></li><li><p>1:将数据写入寄存器</p></li><li>0:没有写入寄存器文件的数据</li></ul><h4 id="ALUControl"><a href="#ALUControl" class="headerlink" title="ALUControl"></a>ALUControl</h4><ul><li>010:ALU实现加法</li></ul><h4 id="MemWrite"><a href="#MemWrite" class="headerlink" title="MemWrite"></a>MemWrite</h4><ul><li>1:向存储器写入数据</li><li>0:没有向存储器写入数据</li></ul><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p>据此,我们可以搭建一个初步的信号控制</p><p>lw:100011(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p>sw:101011 (31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p><img src="image-20240911203252095.png" alt="image-20240911203252095"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911203327623.png" alt="image-20240911203327623"></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="使用Python批量构造代码"><a href="#使用Python批量构造代码" class="headerlink" title="使用Python批量构造代码"></a>使用Python批量构造代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">s =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;4\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Register\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(T_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Y, Z = <span class="hljs-number">90</span>, <span class="hljs-number">30</span><br><span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    Y += <span class="hljs-number">80</span><br>    T = Y-<span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;Y_&quot;</span>,<span class="hljs-built_in">str</span>(Y)).replace(<span class="hljs-string">&quot;T_&quot;</span>, <span class="hljs-built_in">str</span>(T)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(X)).replace(<span class="hljs-string">&quot;Z_&quot;</span>,<span class="hljs-built_in">str</span>(Z)))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;&lt;comp lib=\&quot;0\&quot; loc=\&quot;(80,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(130,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>H = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    H += <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;H_&quot;</span>,<span class="hljs-built_in">str</span>(H)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(x)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Array</title>
    <link href="/2024/09/11/Java-Array/"/>
    <url>/2024/09/11/Java-Array/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NewClass[] a;<br>NewClass[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>[<span class="hljs-number">10</span>];<br>NewClass[] c = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br>NewClass[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br></code></pre></td></tr></table></figure><h2 id="返回数组"><a href="#返回数组" class="headerlink" title="返回数组"></a>返回数组</h2><ul><li>Java可以直接返回数组</li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] b = &#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Arrays实用功能"><a href="#Arrays实用功能" class="headerlink" title="Arrays实用功能"></a>Arrays实用功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><blockquote><p>以单个元素填充数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>Arrays.fill(m1,<span class="hljs-number">1</span>);<br>System.out.println(Arrays.toString(m1));<br><span class="hljs-comment">// output: [1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.sort(s1);<br>System.out.println(Arrays.toString(s1));<br><br><span class="hljs-comment">// [2, 5, 6, 7, 7, 8, 9, 10, 34]</span><br></code></pre></td></tr></table></figure><h3 id="equals-amp-deepEquals"><a href="#equals-amp-deepEquals" class="headerlink" title="equals() &amp; deepEquals()"></a>equals() &amp; deepEquals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br>System.out.println(Arrays.equals(a1,a2));<br><span class="hljs-comment">// true</span><br><span class="hljs-type">int</span>[][] deep1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; &#125;;<br><span class="hljs-type">int</span>[][] deep2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123; &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125; &#125;;<br>System.out.println(Arrays.deepEquals(deep1, deep2));<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="copyOf-amp-copyOfRange"><a href="#copyOf-amp-copyOfRange" class="headerlink" title="copyOf() &amp; copyOfRange()"></a>copyOf() &amp; copyOfRange()</h3><blockquote><p>复制数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">4</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">3</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8,9,7]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">9</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="toString-amp-deepToString"><a href="#toString-amp-deepToString" class="headerlink" title="toString() &amp; deepToString()"></a>toString() &amp; deepToString()</h3><blockquote><p>方便打印数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[][] d1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.toString(p1));<br>System.out.println(Arrays.deepToString(d1));<br><span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">//[[1, 2], [3, 4], [5, 6]]</span><br></code></pre></td></tr></table></figure><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch()"></a>binarySearch()</h3><blockquote><p>二分法查找,类同于Python中的bisect.bisect_left()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] pos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">90</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">76</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">54</span>,<span class="hljs-number">34</span>&#125;;<br>Arrays.sort(pos);<br>System.out.println(Arrays.toString(pos));<br>System.out.println(Arrays.binarySearch(pos,<span class="hljs-number">78</span>));<br><span class="hljs-comment">// [1, 3, 4, 5, 5, 6, 7, 8, 34, 54, 67, 76, 78, 90]</span><br><span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h3 id="asList"><a href="#asList" class="headerlink" title="asList()"></a>asList()</h3><blockquote><p>常用于声明对象组成的列表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; l1 = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>System.out.println(l1);<br><span class="hljs-comment">// [1, 2, 3]</span><br>List&lt;Student&gt; l2 = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-number">21</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">19</span>));<br>System.out.println(l2);<br><span class="hljs-comment">// [xiaoming 21, xiaomei 19]</span><br></code></pre></td></tr></table></figure><h3 id="setAll"><a href="#setAll" class="headerlink" title="setAll()"></a>setAll()</h3><blockquote><p>使用提供的生成器函数设置指定数组的所有元素以计算每个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt;[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxlen];<br>Arrays.setAll(s, i -&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;());<br>s[<span class="hljs-number">0</span>].add(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2024/09/11/Java-String/"/>
    <url>/2024/09/11/Java-String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>String对象不可变</strong></p><p>(修改字符串的方法实质上是生成了一个新的String对象)</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><div class="table-container"><table><thead><tr><th>new StringBuilder(String s)</th><th>生成方法</th></tr></thead><tbody><tr><td>append()</td><td>增加字符</td></tr><tr><td>deleteCharAt(int index)</td><td>删除指定索引的字符</td></tr><tr><td>toString()</td><td>生成字符串</td></tr><tr><td>reverse()</td><td>逆转</td></tr><tr><td>replace(int start, int end, String str)</td><td>替换</td></tr><tr><td>delete(int start, int end)</td><td>删除</td></tr><tr><td>insert(int offset, String str)</td><td>插入</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        result.append(rand.nextInt(<span class="hljs-number">100</span>));<br>        result.append(<span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    result.delete(result.length()-<span class="hljs-number">2</span>, result.length());<br>    result.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无意识递归"><a href="#无意识递归" class="headerlink" title="无意识递归"></a>无意识递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfiniteRecursion</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; InfiniteRecursion address: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;InfiniteRecursion&gt; v = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;InfiniteRecursion&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InfiniteRecursion</span>());<br>        &#125;<br>        System.out.println(v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// println(v)中调用了InfiniteRecursion类的toString方法,toString方法让this发生了自动类型转换,继续实现toString方法,就这样实现了无限递归.</span><br></code></pre></td></tr></table></figure><div class="table-container"><table><thead><tr><th>方法</th><th>参数,重载版本</th><th>应用</th></tr></thead><tbody><tr><td>length()</td><td></td><td>字符个数</td></tr><tr><td>charAt()</td><td>Int索引</td><td>该缩影位置上的char</td></tr><tr><td>getChar(),getBytes()</td><td></td><td>复制</td></tr><tr><td>toCharArray()</td><td></td><td>生成char[]</td></tr><tr><td>equals(),equalsIgnoreCase()</td><td></td><td>比较字符串</td></tr><tr><td>compareTo()</td><td></td><td>按词典序比较字符串</td></tr></tbody></table></div><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> net.mindview.util.Print.print;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good,world&quot;</span>, s2=<span class="hljs-string">&quot;hello,world&quot;</span>;<br>        print(s1.regionMatches(<span class="hljs-number">5</span>,s2,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//true</span><br>        print(s1.startsWith(<span class="hljs-string">&quot;g&quot;</span>)); <span class="hljs-comment">//true</span><br>        print(s1.endsWith(<span class="hljs-string">&quot;g&quot;</span>));<span class="hljs-comment">//false</span><br>        print(s1.length());<span class="hljs-comment">//10</span><br>        print(s1.charAt(<span class="hljs-number">0</span>));<br>        print(s1.compareTo(s2));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zzz&quot;</span>, s4 = <span class="hljs-string">&quot;AAA&quot;</span>;<br>        print(s1.compareTo(s3));<br>        print(s1.compareToIgnoreCase(s4));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a>格式化说明符</h2><div class="table-container"><table><thead><tr><th style="text-align:center">类型转换字符</th><th></th><th style="text-align:center"></th><th></th></tr></thead><tbody><tr><td style="text-align:center">d</td><td>十进制</td><td style="text-align:center">e</td><td>浮点数(科学计数)</td></tr><tr><td style="text-align:center">c</td><td>Unicode字符</td><td style="text-align:center">x</td><td>十六进制</td></tr><tr><td style="text-align:center">b</td><td>Boolean</td><td style="text-align:center">h</td><td>散列码</td></tr><tr><td style="text-align:center">s</td><td>String</td><td style="text-align:center">%</td><td>%</td></tr><tr><td style="text-align:center">f</td><td>浮点数</td><td style="text-align:center"></td></tr></tbody></table></div><h2 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">-?查找带负号的数<br><span class="hljs-string">\\d</span> 表示一位数字<br><span class="hljs-string">\\\\</span> 普通反斜线<br>-?<span class="hljs-string">\\d+</span><br>(-|<span class="hljs-string">\\+)?</span> 一个-或者一个+<br><span class="hljs-string">\\W</span> 非单词字符<br><span class="hljs-string">\\w</span> 单词字符<br><span class="hljs-string">\?</span> 问号<br></code></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><div class="table-container"><table><thead><tr><th>B</th><th>指定字符</th></tr></thead><tbody><tr><td>\xhh</td><td>十六进制值为oxhh的字符</td></tr><tr><td>\uhhhh</td><td>十六进制值为oxhhhh的字符</td></tr><tr><td>\t</td><td>Tab</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\e</td><td>转义</td></tr></tbody></table></div><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><div class="table-container"><table><thead><tr><th>.</th><th>任意字符</th></tr></thead><tbody><tr><td>[abc]</td><td>a\</td><td>b\</td><td>c</td></tr><tr><td><sup><a href="#fn_abc" id="reffn_abc">abc</a></sup></td><td>否定</td></tr><tr><td>[a-zA-Z]</td><td>a-z,A-Z范围</td></tr><tr><td>[abc[hij]]</td><td>a\</td><td>b\</td><td>c\</td><td>h\</td><td>i\</td><td>j</td></tr><tr><td>[a-z&amp;&amp;[hij]]</td><td>h\</td><td>i\</td><td>j</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>词字符</td></tr><tr><td>\W</td><td>非词字符</td></tr></tbody></table></div><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><div class="table-container"><table><thead><tr><th>^</th><th>一行的起始</th></tr></thead><tbody><tr><td>$</td><td>一行的结束</td></tr><tr><td>\b</td><td>词的边界</td></tr><tr><td>\B</td><td>非词的边界</td></tr><tr><td>\G</td><td>前一个匹配的结束</td></tr></tbody></table></div><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li>贪婪型:尽可能多的匹配</li><li>勉强型:匹配最少的字数</li><li>占有型:防止回溯,java中才有</li></ul><div class="table-container"><table><thead><tr><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>符合匹配</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>一个或零个X</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>一个或多个X</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次,且不超过m次</td></tr></tbody></table></div><h3 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile()"></a>Pattern.compile()</h3><p>编译正则表达式</p><h3 id="Pattern-matcher"><a href="#Pattern-matcher" class="headerlink" title="Pattern.matcher()"></a>Pattern.matcher()</h3><p>生成Matcher对象</p><h3 id="Matcher-matches"><a href="#Matcher-matches" class="headerlink" title="Matcher.matches()"></a>Matcher.matches()</h3><p>判断整个输入字符串是否匹配正则表达式模式</p><h3 id="Matcher-find-Matcher-find-int-i"><a href="#Matcher-find-Matcher-find-int-i" class="headerlink" title="Matcher.find()/Matcher.find(int i)"></a>Matcher.find()/Matcher.find(int i)</h3><p>查找(int i可以指定起始位置)</p><h3 id="Pattern标记"><a href="#Pattern标记" class="headerlink" title="Pattern标记"></a>Pattern标记</h3><div class="table-container"><table><thead><tr><th>编译标记</th><th>效果</th></tr></thead><tbody><tr><td>Pattern.CANON_EQ</td><td>规范的等价性</td></tr><tr><td>Pattern.CASE_INSENSITIVE(?i)</td><td>大小写不敏感</td></tr><tr><td>Pattern.COMMENTS(?x)</td><td>忽略空格符,注释</td></tr><tr><td>Pattern.DOTALL(?x)</td><td>“.”匹配所有字符,包括行终结符</td></tr><tr><td>Pattern.MULTILINE(?m)</td><td>^,$匹配一行的开始和结束</td></tr><tr><td>Pattern.UNICODE_CASE(?u)</td><td>大小写不敏感按照Unicode标准</td></tr><tr><td>Pattern.UNIX_LINES(?d)</td><td>.,^,$均只识别行终结符\n</td></tr></tbody></table></div><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(SimpleRead.input);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stdin.nextLine();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stdin.nextInt();<br><span class="hljs-type">double</span> <span class="hljs-variable">favourite</span> <span class="hljs-operator">=</span> stdin.nextDouble();<br></code></pre></td></tr></table></figure><ul><li>Scanner的构造器可以接受任何类型的输入对象,包括File对象,InputStream对象,String或Readable对象.</li></ul><h3 id="useDelimiter"><a href="#useDelimiter" class="headerlink" title="useDelimiter()"></a>useDelimiter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDelimiter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-string">&quot;12, 42, 12&quot;</span>);<br>        scanner.useDelimiter(<span class="hljs-string">&quot;\\s*,\\s*&quot;</span>);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt())&#123;<br>            System.out.println(scanner.nextInt());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*out:</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">42</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/11/hello-world/"/>
    <url>/2024/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
