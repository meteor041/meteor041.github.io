<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>Commitizen的使用</title>
    <link href="/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="Commitizen的使用"><a href="#Commitizen的使用" class="headerlink" title="Commitizen的使用"></a>Commitizen的使用</h1><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g commitizen<br></code></pre></td></tr></table></figure><h2 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><h2 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h2><p>用以下指令代替git commit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cz</span><br></code></pre></td></tr></table></figure><h3 id="选择提交类型"><a href="#选择提交类型" class="headerlink" title="选择提交类型"></a>选择提交类型</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">feat:</span> A <span class="hljs-built_in">new</span> feature<br><span class="hljs-symbol">fix:</span> A bug fix<br><span class="hljs-symbol">docs:</span> Documentation only changes<br><span class="hljs-symbol">style:</span> Changes that <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> affect the meaning <span class="hljs-keyword">of</span> the code<br><span class="hljs-symbol">refactor:</span> A code change that neither fixes a bug nor adds a feature<br><span class="hljs-symbol">perf:</span> A code change that improves performance<br><span class="hljs-keyword">Select</span> the type <span class="hljs-keyword">of</span> change that you<span class="hljs-comment">&#x27;re commiting:</span><br></code></pre></td></tr></table></figure><h3 id="提交范围"><a href="#提交范围" class="headerlink" title="提交范围"></a>提交范围</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">scope</span> of <span class="hljs-keyword">this</span> change:<br></code></pre></td></tr></table></figure><p>通过回车键跳过,通过输入|换行</p><h3 id="简短描述"><a href="#简短描述" class="headerlink" title="简短描述"></a>简短描述</h3><h3 id="详细描述"><a href="#详细描述" class="headerlink" title="详细描述"></a>详细描述</h3><h3 id="破坏性变更"><a href="#破坏性变更" class="headerlink" title="破坏性变更"></a>破坏性变更</h3><p>破坏性变更:本次提交会影响到其它部分的功能与之前的版本不兼容</p><h3 id="解决问题"><a href="#解决问题" class="headerlink" title="解决问题"></a>解决问题</h3><p>本次提交是否解决了某个Issue</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Git指令</title>
    <link href="/2024/09/22/Git%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/09/22/Git%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add *.c<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># -p代表显示每次提交的内容差异,-2表示仅显示最近两次的提交</span><br>git <span class="hljs-built_in">log</span> -<span class="hljs-built_in">stat</span><br><span class="hljs-comment">#统计数据</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br>git <span class="hljs-built_in">log</span> --since =2.weeks<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -amend<br><span class="hljs-comment">#撤销</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br><span class="hljs-comment">#查看远程仓库</span><br>git remote add pb https://...<br><span class="hljs-comment"># pb是简写</span><br>git fetch [remote-name]<br><br>git push origin master<br><br>git show<br><br>git remote rename pb paul<br><span class="hljs-comment"># 重命名</span><br>git remote <span class="hljs-built_in">rm</span> paul<br><span class="hljs-comment"># 删除</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag<br><span class="hljs-comment"># 列出标签</span><br>git tag v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b iss53<br><span class="hljs-comment">#创建并切换到分支</span><br>git branch -d hotfix<br><span class="hljs-comment">#删除</span><br>git branch --merged<br>git branch --no-merged<br>git merge A.txt<br><span class="hljs-comment">#合并</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br><span class="hljs-comment">#从服务器上抓取数据</span><br>git checkout --track origin/serverfix<br>git checkout -b sf origin/serverfix<br><span class="hljs-comment"># 拉取分支,sf是自定义名</span><br>git branch -vv<br><span class="hljs-comment">#查看追踪分支</span><br>git branch -u orgin.serverfix<br><span class="hljs-comment"># 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br><span class="hljs-comment"># 从服务器上抓取本地没有的数据</span><br>git pull<br><span class="hljs-comment"># 含义是git fetch + git merge</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete serverfix<br><span class="hljs-comment"># 删除远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase master<br><span class="hljs-comment"># 将当前分支变基到master分支上</span><br></code></pre></td></tr></table></figure><p><img src="image-20240919142734429.png" alt="image-20240919142734429"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature<br>git rebase master<br></code></pre></td></tr></table></figure><p><img src="image-20240919142743629.png" alt="image-20240919142743629"></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> /opt/git/project.git<br>git <span class="hljs-built_in">clone</span> file:///opt/git/project.git<br>git remote add local_proj /opt/git/project.git<br><span class="hljs-comment"># 增加本地版本库到现有的Git项目</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r test.git meteor041@github.com:meteor041/test.git<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~./ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 查看密钥</span><br>ssh-keygen<br><span class="hljs-comment"># chuang&#x27;jian</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>力扣周赛415</title>
    <link href="/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/"/>
    <url>/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/</url>
    
    <content type="html"><![CDATA[<h1 id="力扣周赛415"><a href="#力扣周赛415" class="headerlink" title="力扣周赛415"></a>力扣周赛415</h1><h2 id="T3"><a href="#T3" class="headerlink" title="T3"></a>T3</h2><blockquote><p>T3数据量较小,可以使用字典树进行查找,由于可以查找前缀,将用于标记字符串结尾的EndNode删去,并将查找方法的返回值改为int类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q=newNode;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trietree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String s : words)&#123;<br>            trietree.insert(s);<br>            maxLen = Math.max(maxLen, s.length());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; target.length(); i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(i + maxLen, target.length());<br>            nextRight = Math.max(nextRight, left + trietree.search(target.substring(left,right)));<br>            <span class="hljs-keyword">if</span> (currRight == i)&#123;<br>                <span class="hljs-keyword">if</span> (nextRight == currRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    currRight = nextRight;<br>                &#125;<br>                step++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> step;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附-字典树模板"><a href="#附-字典树模板" class="headerlink" title="附:字典树模板"></a>附:字典树模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">27</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&#123;<br>    EndNode()&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q = q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br>        q.children[<span class="hljs-number">26</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndNode</span>();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> q.children[<span class="hljs-number">26</span>] != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trieTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        trieTree.insert(<span class="hljs-string">&quot;abcde&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcd&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;fjklnhmasdjk&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abc&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcde&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcdef&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="T4"><a href="#T4" class="headerlink" title="T4"></a>T4</h2><blockquote><p>字符串哈希</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1_070_777_777</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">char</span>[] t = target.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> t.length;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">8e8</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt((<span class="hljs-type">int</span>) <span class="hljs-number">1e8</span>);<br>        <span class="hljs-type">int</span>[] powBase = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] preHash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        powBase[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            powBase[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)((<span class="hljs-type">long</span>) powBase[i] * BASE % MOD);<br>            preHash[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)(((<span class="hljs-type">long</span>) preHash[i] * BASE + t[i]) % MOD);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            maxLen = Math.max(maxLen, w.length());<br>        &#125;<br>        Set&lt;Integer&gt;[] sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxLen];<br>        Arrays.setAll(sets, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; w.length(); j++)&#123;<br>                h = (h * BASE + w.charAt(j)) % MOD;<br>                sets[j].add((<span class="hljs-type">int</span>) h);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> calcSz(i, preHash, powBase, sets);<br>            nextRight = Math.max(nextRight, i+sz);<br>            <span class="hljs-keyword">if</span> (i == curRight)&#123;<br>                <span class="hljs-keyword">if</span> (i == nextRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                curRight = nextRight;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calcSz</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>[] preHash, <span class="hljs-type">int</span>[] powBase, Set&lt;Integer&gt;[] sets)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(preHash.length - <span class="hljs-number">1</span> - i, sets.length) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left + <span class="hljs-number">1</span> &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">subHash</span> <span class="hljs-operator">=</span> ( ((<span class="hljs-type">long</span>) preHash[i + mid] - (<span class="hljs-type">long</span>) preHash[i] * powBase[mid]) % MOD + MOD) % MOD;<br>            <span class="hljs-keyword">if</span> (sets[mid-<span class="hljs-number">1</span>].contains((<span class="hljs-type">int</span>) subHash))&#123;<br>                left = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合逻辑电路</title>
    <link href="/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <url>/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="二极管"><a href="#二极管" class="headerlink" title="二极管"></a>二极管</h2><ul><li><p>一个PN结就是一只晶体二极管</p></li><li><p>正向导通:外加正向电压大于开启电压$V_D$,二极管导通,$U_D&#x3D;V_D$</p></li><li><p>反向截止:外加反向电压或电压小于开启电压$V_D$,二极管截止,$I_D&#x3D;0$</p></li><li><p>击穿:外加反向电压超过一个阈值$V_Z$时,二极管会被击穿,压降是$V_Z$</p></li></ul><p><img src="image-20240918174155826.png" alt="image-20240918174155826"></p><h2 id="晶体三极管"><a href="#晶体三极管" class="headerlink" title="晶体三极管"></a>晶体三极管</h2><p>图为NPN型</p><p><img src="image-20240918174330224.png" alt="image-20240918174330224"></p><p><img src="image-20240918174340598.png" alt="image-20240918174340598"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅲ</title>
    <link href="/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/"/>
    <url>/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅲ-addi-j"><a href="#构建单周期CPU记录Ⅲ-addi-j" class="headerlink" title="构建单周期CPU记录Ⅲ(addi, j)"></a>构建单周期CPU记录Ⅲ(addi, j)</h1><h2 id="addi"><a href="#addi" class="headerlink" title="addi"></a>addi</h2><p>对于addi,不需要新增器件,addi与add的不同,本质上是将其中一个寄存器换成了立即数.</p><p>比较两者的机器码</p><table><thead><tr><th><img src="image-20240912170401633.png" alt="add"></th></tr></thead><tbody><tr><td><img src="image-20240912170419516.png" alt="addi"></td></tr></tbody></table><p>可以发现:</p><ul><li>rs不变</li><li>rt的作用从原来的提供加数,变为赋值地址</li><li>rd消失,立即数代替rt成为加数</li></ul><p>因此修改如下:</p><ul><li>A1端口不变,仍然连接Instr[25:21]</li><li>SrcB不再接收Instr[20:16]的值,而是立即数</li><li>A3端口不再接收Instr[15:11]的值,而是Instr[20:16]</li></ul><p>我们对ALUSrc,RegDst两个信号作出修改</p><h2 id="j"><a href="#j" class="headerlink" title="j"></a>j</h2><p>对NXTAD(对下一个地址的计算器)做出修改,新增Jump信号</p><p><img src="image-20240912172223432.png" alt="NXTAD(新增Jump信号)"></p><h1 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h1><p><img src="image-20240912172136927.png" alt="整体"></p><h1 id="附"><a href="#附" class="headerlink" title="附"></a>附</h1><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><table><thead><tr><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th></th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td></td></tr><tr><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型数组"><a href="#泛型数组" class="headerlink" title="泛型数组"></a>泛型数组</h1><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> classListOfGenerics&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T item)</span> &#123; array.add(item)&#125;;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123; <span class="hljs-keyword">return</span> array.get(index)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不能创建泛型数组,一般解决方案是在任何想要创建泛型数组的地方使用ArrayList</p></blockquote><h2 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Banana</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jonathan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Apple</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CovariantArrays</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Fruit[] fruit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>[<span class="hljs-number">10</span>];<br>        fruit[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Banana</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实际数组类型是Apple[],只能在其中放置Apple及其子类,若放入Fruit对象,会在运行时抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// incompatible types</span><br>List&lt;Fruit&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>Apple的List与Fruit的List不同.即使Apple是Fruit的子类,两者在类型上也不等价.</p></blockquote><blockquote><p>使用通配符解决该问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span>&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br><span class="hljs-comment">// correct</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅱ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq"><a href="#构建单周期CPU记录Ⅱ-add-sub-and-or-slt-beq" class="headerlink" title="构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)"></a>构建单周期CPU记录Ⅱ(add, sub, and, or, slt, beq)</h1><h2 id="新增信号"><a href="#新增信号" class="headerlink" title="新增信号"></a>新增信号</h2><h3 id="RegDst"><a href="#RegDst" class="headerlink" title="RegDst"></a>RegDst</h3><p>1:从指令15:11位中读取数据到A3端口</p><p>0:从指令20:16位中读取数据到A3端口</p><h3 id="ALUSrc"><a href="#ALUSrc" class="headerlink" title="ALUSrc"></a>ALUSrc</h3><ul><li>1:从EXT中读取符号扩展的立即数</li><li>0:从寄存器文件RD2端口中读取数据</li></ul><h3 id="MemtoReg"><a href="#MemtoReg" class="headerlink" title="MemtoReg"></a>MemtoReg</h3><ul><li>1:将从数据存储器中读取的数据输出到WD3</li><li>0:将从ALU中读取的数据输出到WD3</li></ul><h2 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h2><table><thead><tr><th>指令</th><th>RegDst</th><th>ALUSrc</th><th>MemtoReg</th><th>ALUControl</th></tr></thead><tbody><tr><td>R指令(add, sub, and, or, slt)</td><td>1</td><td>0</td><td>0</td><td>varies</td></tr><tr><td>lw,sw</td><td>0</td><td>1</td><td>1</td><td>010(+)</td></tr><tr><td>beq</td><td>x</td><td>0</td><td>x</td><td>110(-)</td></tr><tr><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><table><thead><tr><th>ALUOp</th><th>含义</th><th>ALUOp</th><th>含义</th></tr></thead><tbody><tr><td>00</td><td>加法</td><td>10</td><td>依赖于func</td></tr><tr><td>01</td><td>减法</td><td>11</td><td>无定义</td></tr></tbody></table><table><thead><tr><th>ALUOp</th><th>Funct</th><th>ALUControl</th></tr></thead><tbody><tr><td>00</td><td>X</td><td>010(加)</td></tr><tr><td>X1</td><td>X</td><td>110(减)</td></tr><tr><td>1X</td><td>100000(add)</td><td>010(加)</td></tr><tr><td>1X</td><td>100010(sub)</td><td>110(减)</td></tr><tr><td>1X</td><td>100100(and)</td><td>000(与)</td></tr><tr><td>1X</td><td>100101(or)</td><td>001(或)</td></tr><tr><td>1X</td><td>101010(slt)</td><td>111(小于置位)</td></tr></tbody></table><ul><li>这里引用图表来自黑皮书,采用两级判断(先判断ALUOp,再判断ALUControl值),这里我采用另一种方法,对于非R型指令直接输出ALUControl,对R型指令两级判断.(见后图CU)</li></ul><h3 id="add"><a href="#add" class="headerlink" title="add"></a>add</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100000(add,5:0)</p><h3 id="sub"><a href="#sub" class="headerlink" title="sub"></a>sub</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100010(sub,5:0)</p><h3 id="and"><a href="#and" class="headerlink" title="and"></a>and</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100100(and,5:0)</p><h3 id="or"><a href="#or" class="headerlink" title="or"></a>or</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 100101(or, 5:0)</p><h3 id="slt"><a href="#slt" class="headerlink" title="slt"></a>slt</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) + 101010(slt, 5:0)</p><h3 id="beq"><a href="#beq" class="headerlink" title="beq"></a>beq</h3><p>000100(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><h2 id="更新组件"><a href="#更新组件" class="headerlink" title="更新组件"></a>更新组件</h2><h3 id="ALU-1"><a href="#ALU-1" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911230937221.png" alt="ALU"></p><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p><img src="image-20240911225650083.png" alt="CU"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911225716228.png" alt="整体"></p>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅰ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期CPU记录Ⅰ-初步-包括lw和sw"><a href="#构建单周期CPU记录Ⅰ-初步-包括lw和sw" class="headerlink" title="构建单周期CPU记录Ⅰ(初步,包括lw和sw)"></a>构建单周期CPU记录Ⅰ(初步,包括lw和sw)</h1><h2 id="核心部件"><a href="#核心部件" class="headerlink" title="核心部件"></a>核心部件</h2><h3 id="PC-Program-Counter-程序计数器"><a href="#PC-Program-Counter-程序计数器" class="headerlink" title="PC(Program Counter,程序计数器)"></a>PC(Program Counter,程序计数器)</h3><p><img src="image-20240911170903742.png" alt="image-20240911170903742"></p><h3 id="IM-Instuction-Memory-指令存储器"><a href="#IM-Instuction-Memory-指令存储器" class="headerlink" title="IM(Instuction Memory,指令存储器)"></a>IM(Instuction Memory,指令存储器)</h3><p><img src="image-20240911200511537.png" alt="image-20240911200511537"></p><h3 id="GRF-Register-File-寄存器文件"><a href="#GRF-Register-File-寄存器文件" class="headerlink" title="GRF(Register File,寄存器文件)"></a>GRF(Register File,寄存器文件)</h3><p><img src="image-20240911200549683.png" alt="image-20240911200549683"></p><h3 id="DM-Data-Memory-数据存储器"><a href="#DM-Data-Memory-数据存储器" class="headerlink" title="DM(Data Memory,数据存储器)"></a>DM(Data Memory,数据存储器)</h3><p><img src="image-20240911200524349.png" alt="image-20240911200524349"></p><h2 id="附加部件"><a href="#附加部件" class="headerlink" title="附加部件"></a>附加部件</h2><h3 id="ALU"><a href="#ALU" class="headerlink" title="ALU"></a>ALU</h3><p><img src="image-20240911200643385.png" alt="image-20240911200643385"></p><h3 id="SPLT-splitter-分离器"><a href="#SPLT-splitter-分离器" class="headerlink" title="SPLT(splitter,分离器)"></a>SPLT(splitter,分离器)</h3><p><img src="image-20240911200703680.png" alt="image-20240911200703680"></p><h3 id="EXT-extender-扩位器"><a href="#EXT-extender-扩位器" class="headerlink" title="EXT(extender,扩位器)"></a>EXT(extender,扩位器)</h3><p><img src="image-20240911200729925.png" alt="image-20240911200729925"></p><h3 id="NXTAD-Next-Address-下一个地址的计算器"><a href="#NXTAD-Next-Address-下一个地址的计算器" class="headerlink" title="NXTAD(Next Address,下一个地址的计算器)"></a>NXTAD(Next Address,下一个地址的计算器)</h3><p><img src="image-20240911200825778.png" alt="image-20240911200825778"></p><h2 id="信号控制分析"><a href="#信号控制分析" class="headerlink" title="信号控制分析"></a>信号控制分析</h2><h3 id="信号表"><a href="#信号表" class="headerlink" title="信号表"></a>信号表</h3><table><thead><tr><th>指令</th><th>RegWrite</th><th>ALUControl[2:0]</th><th>MemWrite</th></tr></thead><tbody><tr><td>lw</td><td>1</td><td>010</td><td>0</td></tr><tr><td>sw</td><td>0</td><td>010</td><td>1</td></tr><tr><td></td><td></td><td></td><td></td></tr><tr><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="信号说明"><a href="#信号说明" class="headerlink" title="信号说明"></a>信号说明</h3><h4 id="RegWrite"><a href="#RegWrite" class="headerlink" title="RegWrite"></a>RegWrite</h4><ul><li><p>连接WE3端口</p></li><li><p>1:将数据写入寄存器</p></li><li><p>0:没有写入寄存器文件的数据</p></li></ul><h4 id="ALUControl"><a href="#ALUControl" class="headerlink" title="ALUControl"></a>ALUControl</h4><ul><li>010:ALU实现加法</li></ul><h4 id="MemWrite"><a href="#MemWrite" class="headerlink" title="MemWrite"></a>MemWrite</h4><ul><li>1:向存储器写入数据</li><li>0:没有向存储器写入数据</li></ul><h3 id="CU"><a href="#CU" class="headerlink" title="CU"></a>CU</h3><p>据此,我们可以搭建一个初步的信号控制</p><p>lw:100011(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p>sw:101011 (31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p><img src="image-20240911203252095.png" alt="image-20240911203252095"></p><h2 id="整体"><a href="#整体" class="headerlink" title="整体"></a>整体</h2><p><img src="image-20240911203327623.png" alt="image-20240911203327623"></p><h2 id="附"><a href="#附" class="headerlink" title="附"></a>附</h2><h3 id="使用Python批量构造代码"><a href="#使用Python批量构造代码" class="headerlink" title="使用Python批量构造代码"></a>使用Python批量构造代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">s =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;4\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Register\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(T_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Y, Z = <span class="hljs-number">90</span>, <span class="hljs-number">30</span><br><span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    Y += <span class="hljs-number">80</span><br>    T = Y-<span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;Y_&quot;</span>,<span class="hljs-built_in">str</span>(Y)).replace(<span class="hljs-string">&quot;T_&quot;</span>, <span class="hljs-built_in">str</span>(T)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(X)).replace(<span class="hljs-string">&quot;Z_&quot;</span>,<span class="hljs-built_in">str</span>(Z)))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;&lt;comp lib=\&quot;0\&quot; loc=\&quot;(80,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(130,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>H = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    H += <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;H_&quot;</span>,<span class="hljs-built_in">str</span>(H)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(x)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Array</title>
    <link href="/2024/09/11/Java-Array/"/>
    <url>/2024/09/11/Java-Array/</url>
    
    <content type="html"><![CDATA[<h1 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h1><h2 id="创建方式"><a href="#创建方式" class="headerlink" title="创建方式"></a>创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NewClass[] a;<br>NewClass[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>[<span class="hljs-number">10</span>];<br>NewClass[] c = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br>NewClass[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br></code></pre></td></tr></table></figure><h2 id="返回数组"><a href="#返回数组" class="headerlink" title="返回数组"></a>返回数组</h2><ul><li>Java可以直接返回数组</li></ul><h2 id="多维数组"><a href="#多维数组" class="headerlink" title="多维数组"></a>多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] b = &#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="Arrays实用功能"><a href="#Arrays实用功能" class="headerlink" title="Arrays实用功能"></a>Arrays实用功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></td></tr></table></figure><h3 id="fill"><a href="#fill" class="headerlink" title="fill()"></a>fill()</h3><blockquote><p>以单个元素填充数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>Arrays.fill(m1,<span class="hljs-number">1</span>);<br>System.out.println(Arrays.toString(m1));<br><span class="hljs-comment">// output: [1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><h3 id="sort"><a href="#sort" class="headerlink" title="sort()"></a>sort()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.sort(s1);<br>System.out.println(Arrays.toString(s1));<br><br><span class="hljs-comment">// [2, 5, 6, 7, 7, 8, 9, 10, 34]</span><br></code></pre></td></tr></table></figure><h3 id="equals-deepEquals"><a href="#equals-deepEquals" class="headerlink" title="equals() &amp; deepEquals()"></a>equals() &amp; deepEquals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br>System.out.println(Arrays.equals(a1,a2));<br><span class="hljs-comment">// true</span><br><span class="hljs-type">int</span>[][] deep1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] deep2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.deepEquals(deep1, deep2));<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="copyOf-copyOfRange"><a href="#copyOf-copyOfRange" class="headerlink" title="copyOf() &amp; copyOfRange()"></a>copyOf() &amp; copyOfRange()</h3><blockquote><p>复制数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">4</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">3</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8,9,7]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">9</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="toString-deepToString"><a href="#toString-deepToString" class="headerlink" title="toString() &amp; deepToString()"></a>toString() &amp; deepToString()</h3><blockquote><p>方便打印数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[][] d1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.toString(p1));<br>System.out.println(Arrays.deepToString(d1));<br><span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">//[[1, 2], [3, 4], [5, 6]]</span><br></code></pre></td></tr></table></figure><h3 id="binarySearch"><a href="#binarySearch" class="headerlink" title="binarySearch()"></a>binarySearch()</h3><blockquote><p>二分法查找,类同于Python中的bisect.bisect_left()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] pos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">90</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">76</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">54</span>,<span class="hljs-number">34</span>&#125;;<br>Arrays.sort(pos);<br>System.out.println(Arrays.toString(pos));<br>System.out.println(Arrays.binarySearch(pos,<span class="hljs-number">78</span>));<br><span class="hljs-comment">// [1, 3, 4, 5, 5, 6, 7, 8, 34, 54, 67, 76, 78, 90]</span><br><span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h3 id="asList"><a href="#asList" class="headerlink" title="asList()"></a>asList()</h3><blockquote><p>常用于声明对象组成的列表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; l1 = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>System.out.println(l1);<br><span class="hljs-comment">// [1, 2, 3]</span><br>List&lt;Student&gt; l2 = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-number">21</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">19</span>));<br>System.out.println(l2);<br><span class="hljs-comment">// [xiaoming 21, xiaomei 19]</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2024/09/11/Java-String/"/>
    <url>/2024/09/11/Java-String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h1><p><strong>String对象不可变</strong></p><p>(修改字符串的方法实质上是生成了一个新的String对象)</p><h2 id="StringBuilder"><a href="#StringBuilder" class="headerlink" title="StringBuilder"></a>StringBuilder</h2><table><thead><tr><th>new StringBuilder(String s)</th><th>生成方法</th></tr></thead><tbody><tr><td>append()</td><td>增加字符</td></tr><tr><td>deleteCharAt(int index)</td><td>删除指定索引的字符</td></tr><tr><td>toString()</td><td>生成字符串</td></tr><tr><td>reverse()</td><td>逆转</td></tr><tr><td>replace(int start, int end, String str)</td><td>替换</td></tr><tr><td>delete(int start, int end)</td><td>删除</td></tr><tr><td>insert(int offset, String str)</td><td>插入</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        result.append(rand.nextInt(<span class="hljs-number">100</span>));<br>        result.append(<span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    result.delete(result.length()-<span class="hljs-number">2</span>, result.length());<br>    result.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无意识递归"><a href="#无意识递归" class="headerlink" title="无意识递归"></a>无意识递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfiniteRecursion</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; InfiniteRecursion address: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;InfiniteRecursion&gt; v = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;InfiniteRecursion&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InfiniteRecursion</span>());<br>        &#125;<br>        System.out.println(v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// println(v)中调用了InfiniteRecursion类的toString方法,toString方法让this发生了自动类型转换,继续实现toString方法,就这样实现了无限递归.</span><br></code></pre></td></tr></table></figure><table><thead><tr><th>方法</th><th>参数,重载版本</th><th>应用</th></tr></thead><tbody><tr><td>length()</td><td></td><td>字符个数</td></tr><tr><td>charAt()</td><td>Int索引</td><td>该缩影位置上的char</td></tr><tr><td>getChar(),getBytes()</td><td></td><td>复制</td></tr><tr><td>toCharArray()</td><td></td><td>生成char[]</td></tr><tr><td>equals(),equalsIgnoreCase()</td><td></td><td>比较字符串</td></tr><tr><td>compareTo()</td><td></td><td>按词典序比较字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> net.mindview.util.Print.print;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good,world&quot;</span>, s2=<span class="hljs-string">&quot;hello,world&quot;</span>;<br>        print(s1.regionMatches(<span class="hljs-number">5</span>,s2,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//true</span><br>        print(s1.startsWith(<span class="hljs-string">&quot;g&quot;</span>)); <span class="hljs-comment">//true</span><br>        print(s1.endsWith(<span class="hljs-string">&quot;g&quot;</span>));<span class="hljs-comment">//false</span><br>        print(s1.length());<span class="hljs-comment">//10</span><br>        print(s1.charAt(<span class="hljs-number">0</span>));<br>        print(s1.compareTo(s2));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zzz&quot;</span>, s4 = <span class="hljs-string">&quot;AAA&quot;</span>;<br>        print(s1.compareTo(s3));<br>        print(s1.compareToIgnoreCase(s4));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="格式化说明符"><a href="#格式化说明符" class="headerlink" title="格式化说明符"></a>格式化说明符</h2><table><thead><tr><th align="center">类型转换字符</th><th></th><th align="center"></th><th></th></tr></thead><tbody><tr><td align="center">d</td><td>十进制</td><td align="center">e</td><td>浮点数(科学计数)</td></tr><tr><td align="center">c</td><td>Unicode字符</td><td align="center">x</td><td>十六进制</td></tr><tr><td align="center">b</td><td>Boolean</td><td align="center">h</td><td>散列码</td></tr><tr><td align="center">s</td><td>String</td><td align="center">%</td><td>%</td></tr><tr><td align="center">f</td><td>浮点数</td><td align="center"></td><td></td></tr></tbody></table><h2 id="正则表达式-Regular-Expression"><a href="#正则表达式-Regular-Expression" class="headerlink" title="正则表达式(Regular Expression)"></a>正则表达式(Regular Expression)</h2><h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">-?查找带负号的数<br><span class="hljs-string">\\d</span> 表示一位数字<br><span class="hljs-string">\\\\</span> 普通反斜线<br>-?<span class="hljs-string">\\d+</span><br>(-|<span class="hljs-string">\\+)?</span> 一个-或者一个+<br><span class="hljs-string">\\W</span> 非单词字符<br><span class="hljs-string">\\w</span> 单词字符<br><span class="hljs-string">\?</span> 问号<br></code></pre></td></tr></table></figure><h3 id="字符"><a href="#字符" class="headerlink" title="字符"></a>字符</h3><table><thead><tr><th>B</th><th>指定字符</th></tr></thead><tbody><tr><td>\xhh</td><td>十六进制值为oxhh的字符</td></tr><tr><td>\uhhhh</td><td>十六进制值为oxhhhh的字符</td></tr><tr><td>\t</td><td>Tab</td></tr><tr><td>\n</td><td>换行符</td></tr><tr><td>\r</td><td>回车</td></tr><tr><td>\f</td><td>换页</td></tr><tr><td>\e</td><td>转义</td></tr></tbody></table><h3 id="字符类"><a href="#字符类" class="headerlink" title="字符类"></a>字符类</h3><table><thead><tr><th>.</th><th>任意字符</th></tr></thead><tbody><tr><td>[abc]</td><td>a|b|c</td></tr><tr><td>[^abc]</td><td>否定</td></tr><tr><td>[a-zA-Z]</td><td>a-z,A-Z范围</td></tr><tr><td>[abc[hij]]</td><td>a|b|c|h|i|j</td></tr><tr><td>[a-z&amp;&amp;[hij]]</td><td>h|i|j</td></tr><tr><td>\s</td><td>空白符</td></tr><tr><td>\S</td><td>非空白符</td></tr><tr><td>\d</td><td>数字</td></tr><tr><td>\D</td><td>非数字</td></tr><tr><td>\w</td><td>词字符</td></tr><tr><td>\W</td><td>非词字符</td></tr></tbody></table><h3 id="边界匹配符"><a href="#边界匹配符" class="headerlink" title="边界匹配符"></a>边界匹配符</h3><table><thead><tr><th>^</th><th>一行的起始</th></tr></thead><tbody><tr><td>$</td><td>一行的结束</td></tr><tr><td>\b</td><td>词的边界</td></tr><tr><td>\B</td><td>非词的边界</td></tr><tr><td>\G</td><td>前一个匹配的结束</td></tr></tbody></table><h3 id="量词"><a href="#量词" class="headerlink" title="量词"></a>量词</h3><ul><li>贪婪型:尽可能多的匹配</li><li>勉强型:匹配最少的字数</li><li>占有型:防止回溯,java中才有</li></ul><table><thead><tr><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>符合匹配</th></tr></thead><tbody><tr><td>X?</td><td>X??</td><td>X?+</td><td>一个或零个X</td></tr><tr><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr><td>X+</td><td>X+?</td><td>X++</td><td>一个或多个X</td></tr><tr><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次,且不超过m次</td></tr></tbody></table><h3 id="Pattern-compile"><a href="#Pattern-compile" class="headerlink" title="Pattern.compile()"></a>Pattern.compile()</h3><p>编译正则表达式</p><h3 id="Pattern-matcher"><a href="#Pattern-matcher" class="headerlink" title="Pattern.matcher()"></a>Pattern.matcher()</h3><p>生成Matcher对象</p><h3 id="Matcher-matches"><a href="#Matcher-matches" class="headerlink" title="Matcher.matches()"></a>Matcher.matches()</h3><p>判断整个输入字符串是否匹配正则表达式模式</p><h3 id="Matcher-find-Matcher-find-int-i"><a href="#Matcher-find-Matcher-find-int-i" class="headerlink" title="Matcher.find()&#x2F;Matcher.find(int i)"></a>Matcher.find()&#x2F;Matcher.find(int i)</h3><p>查找(int i可以指定起始位置)</p><h3 id="Pattern标记"><a href="#Pattern标记" class="headerlink" title="Pattern标记"></a>Pattern标记</h3><table><thead><tr><th>编译标记</th><th>效果</th></tr></thead><tbody><tr><td>Pattern.CANON_EQ</td><td>规范的等价性</td></tr><tr><td>Pattern.CASE_INSENSITIVE(?i)</td><td>大小写不敏感</td></tr><tr><td>Pattern.COMMENTS(?x)</td><td>忽略空格符,注释</td></tr><tr><td>Pattern.DOTALL(?x)</td><td>“.”匹配所有字符,包括行终结符</td></tr><tr><td>Pattern.MULTILINE(?m)</td><td>^,$匹配一行的开始和结束</td></tr><tr><td>Pattern.UNICODE_CASE(?u)</td><td>大小写不敏感按照Unicode标准</td></tr><tr><td>Pattern.UNIX_LINES(?d)</td><td>.,^,$均只识别行终结符\n</td></tr></tbody></table><h2 id="Scanner"><a href="#Scanner" class="headerlink" title="Scanner"></a>Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(SimpleRead.input);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stdin.nextLine();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stdin.nextInt();<br><span class="hljs-type">double</span> <span class="hljs-variable">favourite</span> <span class="hljs-operator">=</span> stdin.nextDouble();<br></code></pre></td></tr></table></figure><ul><li>Scanner的构造器可以接受任何类型的输入对象,包括File对象,InputStream对象,String或Readable对象.</li></ul><h3 id="useDelimiter"><a href="#useDelimiter" class="headerlink" title="useDelimiter()"></a>useDelimiter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDelimiter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-string">&quot;12, 42, 12&quot;</span>);<br>        scanner.useDelimiter(<span class="hljs-string">&quot;\\s*,\\s*&quot;</span>);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt())&#123;<br>            System.out.println(scanner.nextInt());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*out:</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">42</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/11/hello-world/"/>
    <url>/2024/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
