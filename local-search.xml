<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>P6-CPU设计文档</title>
    <link href="/2024/11/13/P6-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/11/13/P6-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="p6-cpu设计文档">P6-CPU设计文档</h1><h2 id="流水线架构">流水线架构</h2><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> mips.v<br><span class="hljs-bullet">-</span> IF.v #取指阶段<br><span class="hljs-bullet">-</span> pc.v<br><span class="hljs-bullet">-</span> im.v<br><span class="hljs-bullet">-</span> IF<span class="hljs-emphasis">_ID.v #IF与ID之间的寄存器</span><br><span class="hljs-emphasis">- ID.v #译码阶段</span><br><span class="hljs-emphasis">- ctrl.v #采用分布式译码</span><br><span class="hljs-emphasis">- grf.v # 寄存器堆</span><br><span class="hljs-emphasis">- ext.v # 立即数扩展</span><br><span class="hljs-emphasis">- cmp.v # 比较2个数</span><br><span class="hljs-emphasis">- npc.v # 为B类/J计算下条地址</span><br><span class="hljs-emphasis">- ID_</span>EX.v #ID与EX之间的寄存器<br><span class="hljs-bullet">-</span> EX.v  #执行阶段<br><span class="hljs-bullet">-</span> ctrl.v #采用分布式译码<br><span class="hljs-bullet">-</span> alu.v<br><span class="hljs-bullet">-</span> EX<span class="hljs-emphasis">_MEM.v #EX与MEM之间的寄存器</span><br><span class="hljs-emphasis">- MEM.v #存储阶段</span><br><span class="hljs-emphasis">- ctrl.v #采用分布式译码</span><br><span class="hljs-emphasis">- dm.v</span><br><span class="hljs-emphasis">- MEM_</span>WB.v #MEM与WB之间的寄存器<br><span class="hljs-bullet">-</span> HAZARD<span class="hljs-emphasis">_CTRL.v #冒险控制模块</span><br><span class="hljs-emphasis"></span><br></code></pre></td></tr></table></figure><h3 id="if">IF</h3><h4 id="顶层">顶层</h4><blockquote><p>Instruction Fetch阶段,从指令寄存器中读取指令</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr class="odd"><td>enablePC</td><td>in</td><td></td><td>使能信号</td></tr><tr class="even"><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr class="odd"><td>IF_PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr></tbody></table><h4 id="pc部件">PC部件</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td>重置信号</td></tr><tr class="odd"><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr class="even"><td>NPC</td><td>in</td><td>[31:0]</td><td>PC地址输入</td></tr><tr class="odd"><td>PC</td><td>out</td><td>[31:0]</td><td>输出PC地址</td></tr></tbody></table><h3 id="if_id">IF_ID</h3><blockquote><p>在时钟上升沿将IF_PC,IF_instr的值传递给ID_PC,ID_instr</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>enable</td><td>in</td><td></td><td></td></tr><tr class="even"><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF传入PC地址</td></tr><tr class="odd"><td>IF_instr</td><td>in</td><td>[31:0]</td><td>IF传入指令</td></tr><tr class="even"><td>ID_PC</td><td>out</td><td>[31:0]</td><td>ID接收PC地址</td></tr><tr class="odd"><td>ID_instr</td><td>out</td><td>[31:0]</td><td>IF接收指令</td></tr></tbody></table><h3 id="id">ID</h3><blockquote><p>Instruction Decode阶段</p></blockquote><h4 id="顶层-1">顶层</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF区的PC,用于正常的地址+4操作</td></tr><tr class="even"><td>ID_PC</td><td>in</td><td>[31:0]</td><td>ID区的PC</td></tr><tr class="odd"><td>ID_instr</td><td>in</td><td>[31:0]</td><td>ID区的指令</td></tr><tr class="even"><td>ID_RD1_forward</td><td>in</td><td>[31:0]</td><td>转发的Data1</td></tr><tr class="odd"><td>ID_RD2_forward</td><td>in</td><td>[31:0]</td><td>转发的Data2</td></tr><tr class="even"><td>WB_WD</td><td>in</td><td>[31:0]</td><td>写入数据,来自于WB阶段</td></tr><tr class="odd"><td>WB_A3</td><td>in</td><td>[31:0]</td><td>写入寄存器地址,来自于WB阶段</td></tr><tr class="even"><td>WB_PC</td><td>in</td><td>[31:0]</td><td>写入数据对应PC地址,传递给<span class="math inline">\(display语句,作为显示,来自于WB阶段 || ID_RD1         | out     | [31:0] |ID输出rs寄存器读出值                                        || ID_RD2         | out     | [31:0] |ID输出rt寄存器读出值                                        || ID_IMM32       | out     | [31:0] |ID输出经过位扩展的立即数                                    || ID_A3          | out     | [4:0]  |ID阶段的A3,向后传递用                                       || ID_WD          | out     | [31:0] |ID阶段的写入数据,向后传递                                   || NPC            | out     | [31:0] |ID阶段(内部NPC模块)计算的下一个地址                         || ID_A1_USE      | out     | [1:0]  |ID阶段rs寄存器的\)</span>T_{USE}$</td></tr><tr class="odd"><td>ID_A2_USE</td><td>out</td><td>[1:0]</td><td>ID阶段rt寄存器的<span class="math inline">\(T_{USE}\)</span></td></tr><tr class="even"><td>ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr></tbody></table><h4 id="ext部件">EXT部件</h4><blockquote><p>立即数扩展</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>imm16</td><td>in</td><td>[15:0]</td><td>输入的16位立即数</td></tr><tr class="even"><td>ExtControl</td><td>in</td><td></td><td>决定零扩展还是符号扩展</td></tr><tr class="odd"><td>imm32</td><td>out</td><td>[31:0]</td><td>输出的为扩展后的32位立即数</td></tr></tbody></table><h4 id="cmp部件">CMP部件</h4><blockquote><p>判断两个输入(从寄存器取出来的两个值)是否相等,输出zero,用于处理beq信号通路</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>A</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data1(RD1_forward)</td></tr><tr class="even"><td>B</td><td>in</td><td>[31:0]</td><td>输入数据,接收的是转发的Data2(RD2_forward)</td></tr><tr class="odd"><td>CMPControl</td><td>in</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr class="even"><td>zero</td><td>out</td><td></td><td>若相等则输出1,否则输出0</td></tr></tbody></table><h4 id="cmpcontrol信号表">CMPControl信号表</h4><table><thead><tr class="header"><th>指令</th><th>CMPControl</th></tr></thead><tbody><tr class="odd"><td>beq</td><td>4'b0000</td></tr><tr class="even"><td>bgez</td><td>4'b0001</td></tr><tr class="odd"><td>bgtz</td><td>4'b0010</td></tr><tr class="even"><td>blez</td><td>4'b0011</td></tr><tr class="odd"><td>bltz</td><td>4'b0100</td></tr><tr class="even"><td>bne</td><td>4'b0101</td></tr></tbody></table><h4 id="npc部件">NPC部件</h4><blockquote><p>计算下一个PC地址</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>IF_PC</td><td>in</td><td>[31:0]</td><td>IF输出的PC</td></tr><tr class="even"><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>ID_imm26</td><td>in</td><td>[25:0]</td><td></td></tr><tr class="even"><td>Jr_Reg_Data</td><td>in</td><td>[31:0]</td><td>Jr指定的寄存器的值</td></tr><tr class="odd"><td>Branch</td><td>in</td><td></td><td>Branch信号(beq激活)</td></tr><tr class="even"><td>Jal</td><td>in</td><td></td><td>Jal信号(jal激活)</td></tr><tr class="odd"><td>Jr</td><td>in</td><td></td><td>Jr信号(jr激活)</td></tr><tr class="even"><td>NPC</td><td>out</td><td>[31:0]</td><td>下一个PC地址</td></tr></tbody></table><h4 id="control部件共用">Control部件(共用)</h4><blockquote><p>控制信号生成部件,这里我们采用的是分布式译码,这里展示的共用Control部件在ID阶段被使用的端口</p></blockquote><table><thead><tr class="header"><th style="text-align: left;">端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td style="text-align: left;">instr</td><td>in</td><td>[31:0]</td><td>输入的指令</td></tr><tr class="even"><td style="text-align: left;">zero</td><td>in</td><td></td><td>ID_RD1_forward与ID_RD2_forward是否相等</td></tr><tr class="odd"><td style="text-align: left;">Branch</td><td>out</td><td></td><td>Branch信号(beq激活)</td></tr><tr class="even"><td style="text-align: left;">Jal</td><td>out</td><td></td><td>Jal信号(jal激活)</td></tr><tr class="odd"><td style="text-align: left;">Jr</td><td>out</td><td></td><td>Jr信号(jr激活)</td></tr><tr class="even"><td style="text-align: left;">ExtControl</td><td>out</td><td></td><td>控制ext部件的信号</td></tr><tr class="odd"><td style="text-align: left;">Sel_ID_WD</td><td>out</td><td></td><td>与jal相关,若执行jal指令则为1,该信号为1时将WriteData(写入寄存器)指定为ID_PC+8</td></tr><tr class="even"><td style="text-align: left;">ID_A3</td><td>out</td><td>[4:0]</td><td>解码阶段输出的写入寄存器地址</td></tr><tr class="odd"><td style="text-align: left;">ID_A1_USE</td><td>out</td><td>[1:0]</td><td>rs的<span class="math inline">\(T_{USE}\)</span></td></tr><tr class="even"><td style="text-align: left;">ID_A2_USE</td><td>out</td><td>[1:0]</td><td>rt的<span class="math inline">\(T_{USE}\)</span></td></tr><tr class="odd"><td style="text-align: left;">CMPControl</td><td>out</td><td>[3:0]</td><td>CMP部件控制信号(选择比较方式)</td></tr><tr class="even"><td style="text-align: left;">ID_MD</td><td>out</td><td></td><td>ID区当前是否在处理乘除相关指令</td></tr></tbody></table><h4 id="id控制信号表">ID控制信号表</h4><table><thead><tr class="header"><th>指令/信号</th><th>ExtControl</th><th>Sel_ID_WD</th><th>ID_A3</th><th>Branch</th><th>Jal</th><th>Jr</th></tr></thead><tbody><tr class="odd"><td>ori</td><td>1(立即数零扩展)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="even"><td>add</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="odd"><td>sub</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="even"><td>lw</td><td>0(立即数符号扩展)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="odd"><td>sw</td><td>0(立即数符号扩展)</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="even"><td>beq</td><td>0(立即数符号扩展)</td><td>0</td><td>$0</td><td>1 if zero == 1 else 0</td><td></td><td></td></tr><tr class="odd"><td>lui</td><td>0(立即数符号扩展)(其实随意)</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="even"><td>jal</td><td>\</td><td>1(选择PC+8)</td><td>$31</td><td></td><td>1</td><td></td></tr><tr class="odd"><td>jr</td><td>\</td><td>0</td><td>\</td><td></td><td></td><td>1</td></tr><tr class="even"><td>swc</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="odd"><td>bonall</td><td>0(立即数符号扩展)</td><td>1</td><td>31</td><td></td><td></td><td></td></tr><tr class="even"><td>lh</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="odd"><td>sh</td><td>0</td><td>0</td><td>\</td><td></td><td></td><td></td></tr><tr class="even"><td>lb</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="odd"><td>sb</td><td>0</td><td>0</td><td>\</td><td></td><td></td><td></td></tr><tr class="even"><td>and</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="odd"><td>or</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="even"><td>slt</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="odd"><td>sltu</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="even"><td>addi</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="odd"><td>andi</td><td>0</td><td>0</td><td>rt</td><td></td><td></td><td></td></tr><tr class="even"><td>mult</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="odd"><td>multu</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="even"><td>div</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="odd"><td>divu</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="even"><td>mflo</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="odd"><td>mfhi</td><td>\</td><td>0</td><td>rd</td><td></td><td></td><td></td></tr><tr class="even"><td>mtlo</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr><tr class="odd"><td>mthi</td><td>\</td><td>0</td><td>$0</td><td></td><td></td><td></td></tr></tbody></table><h4 id="t_use表"><span class="math inline">\(T_{USE}\)</span>表</h4><table><thead><tr class="header"><th></th><th>ID_A1_USE</th><th>ID_A2_USE</th></tr></thead><tbody><tr class="odd"><td>add</td><td>1</td><td>1</td></tr><tr class="even"><td>sub</td><td>1</td><td>1</td></tr><tr class="odd"><td>ori</td><td>1</td><td>3(z)</td></tr><tr class="even"><td>lw</td><td>1</td><td>3(z)</td></tr><tr class="odd"><td>sw</td><td>1</td><td>2</td></tr><tr class="even"><td>beq</td><td>0</td><td>0</td></tr><tr class="odd"><td>lui</td><td>3(z)</td><td>3(z)</td></tr><tr class="even"><td>jal</td><td>3(z)</td><td>3(z)</td></tr><tr class="odd"><td>jr</td><td>0</td><td>3(z)</td></tr><tr class="even"><td>swc</td><td>1</td><td>1</td></tr><tr class="odd"><td>bonall</td><td>0</td><td>0</td></tr><tr class="even"><td>lb</td><td>1</td><td>3(z)</td></tr><tr class="odd"><td>sb</td><td>1</td><td>2</td></tr><tr class="even"><td>lh</td><td>1</td><td>3(z)</td></tr><tr class="odd"><td>sh</td><td>1</td><td>2</td></tr><tr class="even"><td>and</td><td>1</td><td>1</td></tr><tr class="odd"><td>or</td><td>1</td><td>1</td></tr><tr class="even"><td>slt</td><td>1</td><td>1</td></tr><tr class="odd"><td>sltu</td><td>1</td><td>1</td></tr><tr class="even"><td>addi</td><td>1</td><td>0</td></tr><tr class="odd"><td>andi</td><td>1</td><td>0</td></tr><tr class="even"><td>mult</td><td>1</td><td>1</td></tr><tr class="odd"><td>div</td><td>1</td><td>1</td></tr><tr class="even"><td>multu</td><td>1</td><td>1</td></tr><tr class="odd"><td>divu</td><td>1</td><td>1</td></tr><tr class="even"><td>mflo</td><td>3(z)</td><td>3</td></tr><tr class="odd"><td>mfhi</td><td>3</td><td>3</td></tr><tr class="even"><td>mtlo</td><td>1</td><td>3</td></tr><tr class="odd"><td>mthi</td><td>1</td><td>3</td></tr></tbody></table><h4 id="grf部件">GRF部件</h4><blockquote><p>32个32bit寄存器组成的寄存器堆</p></blockquote><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>A1</td><td>in</td><td>[4:0]</td><td>A1读出寄存器地址</td></tr><tr class="even"><td>A2</td><td>in</td><td>[4:0]</td><td>A2读出寄存器地址</td></tr><tr class="odd"><td>A3</td><td>in</td><td>[4:0]</td><td>A3写入寄存器地址</td></tr><tr class="even"><td>WD</td><td>in</td><td>[31:0]</td><td>写入数据</td></tr><tr class="odd"><td>PC</td><td>in</td><td>[31:0]</td><td>当前PC($display用)</td></tr><tr class="even"><td>RD1</td><td>out</td><td>[31:0]</td><td>A1寄存器读出值</td></tr><tr class="odd"><td>RD2</td><td>out</td><td>[31:0]</td><td>A2寄存器读出值</td></tr></tbody></table><h3 id="id_ex">ID_EX</h3><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>enable</td><td>in</td><td></td><td>使能信号</td></tr><tr class="even"><td>flush</td><td>in</td><td></td><td>冲洗信号,和reset作用相同</td></tr><tr class="odd"><td>ID_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>ID_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>ID_RD1</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>ID_RD2</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>ID_imm32</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>ID_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr class="odd"><td>ID_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>EX_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>EX_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>EX_RD1</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>EX_RD2</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>EX_imm32</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>EX_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr class="even"><td>EX_WD</td><td>out</td><td>[31:0]</td><td></td></tr></tbody></table><h3 id="ex">EX</h3><h4 id="顶层-2">顶层</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段的指令</td></tr><tr class="even"><td>EX_imm32</td><td>in</td><td>[31:0]</td><td>32位扩展的立即数</td></tr><tr class="odd"><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX阶段接收的写入寄存器堆的数据</td></tr><tr class="even"><td>EX_RD1_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A1值</td></tr><tr class="odd"><td>EX_RD2_forward</td><td>in</td><td>[31:0]</td><td>接收hazard ctrl部件向EX阶段传递的转发数据寄存器A2值</td></tr><tr class="even"><td>EX_MEM_RES</td><td>out</td><td>[31:0]</td><td>传递ALU计算结果</td></tr><tr class="odd"><td>EX_MEM_WD</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Write Data</td></tr><tr class="even"><td>EX_MEM_RD2</td><td>out</td><td>[31:0]</td><td>传递给EX_MEM流水寄存器的Read Data2</td></tr><tr class="odd"><td>EX_NEW</td><td>out</td><td>[1:0]</td><td>EX阶段的<span class="math inline">\(T_{NEW}\)</span></td></tr></tbody></table><h4 id="mult_div部件">MULT_DIV部件</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td>时钟信号</td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td>重制信号</td></tr><tr class="odd"><td>A</td><td>in</td><td>[31:0]</td><td>计算数A</td></tr><tr class="even"><td>B</td><td>in</td><td>[31:0]</td><td>计算数B</td></tr><tr class="odd"><td>start</td><td>in</td><td></td><td>有效一个时钟周期,启动信号</td></tr><tr class="even"><td>MULT_DIV_OP</td><td>in</td><td>[2:0]</td><td>乘除模块计算方式</td></tr><tr class="odd"><td>MFHI</td><td>in</td><td></td><td>mfhi信号</td></tr><tr class="even"><td>MFLO</td><td>in</td><td></td><td>mflo信号</td></tr><tr class="odd"><td>busy</td><td>out</td><td></td><td>输出延迟信号</td></tr><tr class="even"><td>HI</td><td>out</td><td>[31:0]</td><td>$hi值</td></tr><tr class="odd"><td>LO</td><td>out</td><td>[31:0]</td><td>$lo值</td></tr></tbody></table><h4 id="乘除槽相关信号表">乘除槽相关信号表</h4><table><thead><tr class="header"><th>指令/信号</th><th>MULT_DIV_OP</th><th>MULT_DIV_START</th></tr></thead><tbody><tr class="odd"><td>mult</td><td><code>mult       | 1              | | multu     |</code>multu</td><td>1</td></tr><tr class="even"><td>div</td><td><code>div        | 1              | | divu      |</code>divu</td><td>1</td></tr></tbody></table><h4 id="alu部件">ALU部件</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>SrcA</td><td>in</td><td>[31:0]</td><td>操作数A</td></tr><tr class="even"><td>SrcB</td><td>in</td><td>[31:0]</td><td>操作数B</td></tr><tr class="odd"><td>ALUOp</td><td>in</td><td>[3:0]</td><td>计算方式</td></tr><tr class="even"><td>ALURes</td><td>out</td><td>[31:0]</td><td>ALU计算结果</td></tr></tbody></table><h4 id="control部件共用-1">Control部件(<em>共用</em>)</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>ALUOp</td><td>out</td><td>[3:0]</td><td>选择ALU操作方式</td></tr><tr class="odd"><td>ALU_A_Sel</td><td>out</td><td></td><td>选择</td></tr><tr class="even"><td>ALU_B_Sel</td><td>out</td><td></td><td>选择32位立即数或者寄存器rt的值</td></tr><tr class="odd"><td>WD_Sel</td><td>out</td><td></td><td>选择Write Data来源(1:ID阶段的PC+8,0:ALURes)</td></tr><tr class="even"><td>EX_NEW</td><td>out</td><td></td><td>当前EX阶段<span class="math inline">\(T_{USE}\)</span></td></tr><tr class="odd"><td>MULT_DIV_OP</td><td>out</td><td></td><td>乘除模块计算方式</td></tr><tr class="even"><td>MULT_DIV _START</td><td>out</td><td></td><td>乘除模块开始信号</td></tr><tr class="odd"><td>MTHI</td><td>out</td><td></td><td>mthi信号,下同理</td></tr><tr class="even"><td>MTLO</td><td>out</td><td></td><td></td></tr><tr class="odd"><td>MFHI</td><td>out</td><td></td><td></td></tr><tr class="even"><td>MFLO</td><td>out</td><td></td><td></td></tr></tbody></table><h4 id="ex控制信号表">EX控制信号表</h4><table><thead><tr class="header"><th>指令/信号</th><th>ALUOp</th><th>ALU_B_Sel</th><th>WD_Sel</th></tr></thead><tbody><tr class="odd"><td>ori</td><td><code>aluOr   | 1(选择立即数)   | 0(Write Data选择aluRes)   | | add       |</code>aluAdd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr class="even"><td>sub</td><td><code>aluSub  | 0(选择rt寄存器) | 0                         | | beq       | \        | \               | \                         | | lw        |</code>aluAdd</td><td>1(选择立即数)</td><td>0</td></tr><tr class="odd"><td>sw</td><td><code>aluAdd  | 1(选择立即数)   | 0                         | | lui       |</code>aluLui</td><td>1(选择立即数)</td><td>0</td></tr><tr class="even"><td>jal</td><td>\</td><td>\</td><td>1(Write Data选择ID传递值)</td></tr><tr class="odd"><td>jr</td><td>\</td><td>\</td><td>\</td></tr><tr class="even"><td>swc</td><td><code>aluSwc  | 0               | 0                         | | bonall    | \        | \               | 1(Write Data选择ID传递值) | | and       |</code>aluAnd</td><td>0(选择rt寄存器)</td><td>0</td></tr><tr class="odd"><td>or</td><td><code>aluOr   | 0(选择rt寄存器) | 0                         | | slt       |</code>aluSlt</td><td>0</td><td>0</td></tr><tr class="even"><td>sltu</td><td><code>aluSltu | 0               | 0                         | | addi      |</code>aluAdd</td><td>1</td><td>0</td></tr><tr class="odd"><td>andi</td><td>`aluAnd</td><td>1</td><td>0</td></tr><tr class="even"><td>mult</td><td>\</td><td>\</td><td>0</td></tr><tr class="odd"><td>mflo</td><td>\</td><td>\</td><td>\</td></tr><tr class="even"><td>mfhi</td><td>\</td><td>\</td><td>\</td></tr></tbody></table><h4 id="ext_new表">EX<span class="math inline">\(T_{NEW}\)</span>表</h4><table><thead><tr class="header"><th></th><th>EX_NEW</th></tr></thead><tbody><tr class="odd"><td>add</td><td>1</td></tr><tr class="even"><td>sub</td><td>1</td></tr><tr class="odd"><td>ori</td><td>1</td></tr><tr class="even"><td>lw</td><td>2</td></tr><tr class="odd"><td>sw</td><td>0</td></tr><tr class="even"><td>beq</td><td>0</td></tr><tr class="odd"><td>lui</td><td>1</td></tr><tr class="even"><td>jal</td><td>0</td></tr><tr class="odd"><td>jr</td><td>0</td></tr><tr class="even"><td>swc</td><td>1</td></tr><tr class="odd"><td>bonall</td><td>0</td></tr><tr class="even"><td>lb</td><td>2</td></tr><tr class="odd"><td>sb</td><td>0</td></tr><tr class="even"><td>lh</td><td>2</td></tr><tr class="odd"><td>sh</td><td>0</td></tr><tr class="even"><td>and</td><td>1</td></tr><tr class="odd"><td>or</td><td>1</td></tr><tr class="even"><td>slt</td><td>1</td></tr><tr class="odd"><td>sltu</td><td>1</td></tr><tr class="even"><td>addi</td><td>1</td></tr><tr class="odd"><td>andi</td><td>1</td></tr><tr class="even"><td>mflo</td><td>1</td></tr><tr class="odd"><td>mfhi</td><td>1</td></tr></tbody></table><h3 id="ex_mem">EX_MEM</h3><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>flush</td><td>in</td><td></td><td></td></tr><tr class="even"><td>EX_PC</td><td>in</td><td>[31:0]</td><td>EX阶段PC地址</td></tr><tr class="odd"><td>EX_instr</td><td>in</td><td>[31:0]</td><td>EX阶段指令</td></tr><tr class="even"><td>EX_A3</td><td>out</td><td>[4:0]</td><td>EX阶段传递的A3</td></tr><tr class="odd"><td>EX_WD</td><td>out</td><td>[31:0]</td><td>EX阶段Write Data</td></tr><tr class="even"><td>EX_RES</td><td>out</td><td>[31:0]</td><td>EX阶段ALURes</td></tr><tr class="odd"><td>EX_RD2</td><td>out</td><td>[31:0]</td><td>EX阶段Read Data2</td></tr><tr class="even"><td>MEM_PC</td><td>out</td><td>[31:0]</td><td>MEM阶段PC地址</td></tr><tr class="odd"><td>MEM_instr</td><td>out</td><td>[31:0]</td><td>MEM阶段指令</td></tr><tr class="even"><td>MEM_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr class="odd"><td>MEM_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>MEM_RES</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>MEM_RD2</td><td>out</td><td>[31:0]</td><td></td></tr></tbody></table><h3 id="mem">MEM</h3><h4 id="顶层-3">顶层</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>MEM_PC</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="even"><td>MEM_RES</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>MEM_RD2_forward</td><td>in</td><td>[31:0]</td><td>WB转发的Read Data2</td></tr><tr class="even"><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递的A3寄存器地址</td></tr><tr class="odd"><td>RD</td><td>in</td><td>[31:0]</td><td>从Memory中读出的数据</td></tr><tr class="even"><td>MEM_WB_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr class="odd"><td>MEM_WB_WD</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>MEM_A2_NEW</td><td>out</td><td>[1:0]</td><td>MEM<span class="math inline">\(T_{NEW}\)</span></td></tr><tr class="odd"><td>MEM_BYTE_EN</td><td>out</td><td>[3:0]</td><td>写入MEM数据的按字节使能信号</td></tr><tr class="even"><td>MEM_WRITE_DATA</td><td>out</td><td>[31:0]</td><td>写入MEM,按字节重新排序的数据</td></tr><tr class="odd"><td>MEM_DATA_ADDR</td><td>out</td><td>[31:0]</td><td>写入或读出的Memory地址</td></tr><tr class="even"><td>MEM_INST_ADDR</td><td>out</td><td>[31:0]</td><td>当load/store指令对应的PC地址</td></tr></tbody></table><h4 id="memcontrol部件共用">MEMControl部件(共用)</h4><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>instr</td><td>in</td><td></td><td></td></tr><tr class="even"><td>MEM_WE</td><td>out</td><td></td><td>选择是否写入Memory</td></tr><tr class="odd"><td>MEM_Sel</td><td>out</td><td></td><td>选择是否将Memory读出值向后传递(1:yes)</td></tr><tr class="even"><td>MEM_A2_NEW</td><td>out</td><td></td><td>MEM区<span class="math inline">\(T_{NEW}\)</span></td></tr><tr class="odd"><td>MEM_PART</td><td>out</td><td>[1:0]</td><td>选择存入/读取Word,Half或者Byte</td></tr><tr class="even"><td>MEM_EXT_Control</td><td>out</td><td>[2:0]</td><td>MEM_EXT部件控制信号</td></tr></tbody></table><h4 id="mem信号及t_new表">MEM信号及<span class="math inline">\(T_{NEW}\)</span>表</h4><table><thead><tr class="header"><th>指令/信号</th><th>MEM_WE</th><th>MEM_Sel</th><th>MEM_A2_NEW</th><th>MEM_PART</th><th>MEM_EXT_Control</th></tr></thead><tbody><tr class="odd"><td>sw</td><td>1</td><td>0</td><td>0</td><td><code>memWord                  | 3'bz            | | sh        | 1      | 0       | 0          |</code>memHalf</td><td>3'bz</td></tr><tr class="even"><td>sb</td><td>1</td><td>0</td><td>0</td><td><code>memByte                  | 3'bz            | | lw        | 0      | 1       | 1          |</code>memWord</td><td><code>nonExt        |                 | | lh        | 0      | 1       | 1          |</code>memHalf</td></tr><tr class="odd"><td>else</td><td>0</td><td>0</td><td>0</td><td>2'bz</td><td>3'bz</td></tr></tbody></table><h3 id="mem_wb">MEM_WB</h3><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td>MEM_PC</td><td>in</td><td>[31;0]</td><td></td></tr><tr class="even"><td>MEM_instr</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>MEM_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr class="even"><td>MEM_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>WB_PC</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>WB_instr</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>WB_A3</td><td>out</td><td>[4:0]</td><td></td></tr><tr class="even"><td>WB_WD</td><td>out</td><td>[31:0]</td><td></td></tr></tbody></table><h3 id="hazard_ctrl">HAZARD_CTRL</h3><table><thead><tr class="header"><th>端口</th><th>In/Out?</th><th>位宽</th><th>功能</th></tr></thead><tbody><tr class="odd"><td>clk</td><td>in</td><td></td><td></td></tr><tr class="even"><td>reset</td><td>in</td><td></td><td></td></tr><tr class="odd"><td><strong>ID阶段</strong></td><td></td><td></td><td></td></tr><tr class="even"><td>ID_A1</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A1寄存器</td></tr><tr class="odd"><td>ID_A2</td><td>in</td><td>[4:0]</td><td>ID阶段正在使用的A2寄存器</td></tr><tr class="even"><td>ID_RD1</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A1对应值</td></tr><tr class="odd"><td>ID_RD2</td><td>in</td><td>[31:0]</td><td>ID阶段寄存器堆读出的A2对应值</td></tr><tr class="even"><td>ID_A1_USE</td><td>in</td><td>[1:0]</td><td><span class="math inline">\(T_{USE}\)</span></td></tr><tr class="odd"><td>ID_A2_USE</td><td>in</td><td>[1:0]</td><td><span class="math inline">\(T_{USE}\)</span></td></tr><tr class="even"><td>ID_MD</td><td>in</td><td></td><td>ID区处理指令是否与乘除相关</td></tr><tr class="odd"><td><strong>EX阶段</strong></td><td></td><td></td><td></td></tr><tr class="even"><td>EX_A1</td><td>in</td><td>[4:0]</td><td></td></tr><tr class="odd"><td>EX_A2</td><td>in</td><td>[4:0]</td><td></td></tr><tr class="even"><td>EX_RD1</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr class="odd"><td>EX_RD2</td><td>in</td><td>[31:0]</td><td>IE阶段A2对应值,由ID区的转发值得来</td></tr><tr class="even"><td>EX_A1_USE</td><td>in</td><td>[1:0]</td><td><span class="math inline">\(T_{USE}\)</span></td></tr><tr class="odd"><td>EX_A2_USE</td><td>in</td><td>[1:0]</td><td><span class="math inline">\(T_{USE}\)</span></td></tr><tr class="even"><td>EX_A3</td><td>in</td><td>[4:0]</td><td>EX传递的A3寄存器(rd)</td></tr><tr class="odd"><td>EX_WD</td><td>in</td><td>[31:0]</td><td>EX传递的Write Data</td></tr><tr class="even"><td>MULT_DIV_BUSY</td><td>in</td><td></td><td>乘除模块忙碌信号</td></tr><tr class="odd"><td>MULT_DIV_START</td><td>in</td><td></td><td>乘除模块开始信号</td></tr><tr class="even"><td><strong>MEM阶段</strong></td><td></td><td></td><td></td></tr><tr class="odd"><td>MEM_A2</td><td>in</td><td>[4:0]</td><td>MEM正在使用的A2</td></tr><tr class="even"><td>MEM_RD2</td><td>in</td><td>[31:0]</td><td>MEM的Read Data2,由EX传递而来</td></tr><tr class="odd"><td>MEM_A2_NEW</td><td>in</td><td>[1:0]</td><td>MEM的<span class="math inline">\(T_{NEW}\)</span></td></tr><tr class="even"><td>MEM_A3</td><td>in</td><td>[4:0]</td><td>MEM传递A3</td></tr><tr class="odd"><td>MEM_WD</td><td>in</td><td>[31:0]</td><td>MEM传递的Write Data</td></tr><tr class="even"><td><strong>WB</strong></td><td></td><td></td><td></td></tr><tr class="odd"><td>WB_A3</td><td>in</td><td>[4:0]</td><td></td></tr><tr class="even"><td>WB_WD</td><td>in</td><td>[31:0]</td><td></td></tr><tr class="odd"><td><strong>转发FORWARD</strong></td><td></td><td></td><td></td></tr><tr class="even"><td>ID_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>ID_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>EX_RD1_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td>EX_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="even"><td>MEM_RD2_forward</td><td>out</td><td>[31:0]</td><td></td></tr><tr class="odd"><td><strong>暂停信号STALL</strong></td><td></td><td></td><td></td></tr><tr class="even"><td>Enable_PC</td><td>out</td><td></td><td>PC使能信号</td></tr><tr class="odd"><td>Enable_IF_ID</td><td>out</td><td></td><td>IF_ID流水寄存器使能信号</td></tr><tr class="even"><td>Enable_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器使能信号</td></tr><tr class="odd"><td>Flush_ID_EX</td><td>out</td><td></td><td>ID_EX流水寄存器刷新信号</td></tr><tr class="even"><td>Flush_EX_MEM</td><td>out</td><td></td><td>EX_MEM流水寄存器刷新信号</td></tr></tbody></table><h2 id="阻塞矩阵">阻塞矩阵</h2><table><thead><tr class="header"><th>IF/ID当前指令</th><th></th><th></th><th>ID/EX</th><th></th><th></th><th>EX/MEM</th><th></th><th></th><th>MEM/WB</th><th></th><th></th></tr></thead><tbody><tr class="odd"><td>指令类型</td><td>源寄存器</td><td><span class="math inline">\(T_{use}\)</span></td><td>cal_r<br>1/rd)<br></td><td>cal_i<br>(1/rt)<br></td><td>load<br>(2/rt)<br></td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(1/rt)</td><td>cal_r<br>(0/rd)</td><td>cal_i<br>(0/rt)</td><td>load<br>(0/rt)</td></tr><tr class="even"><td>beq</td><td>rs/rt</td><td>0</td><td>X</td><td>X</td><td>X</td><td></td><td></td><td>X</td><td></td><td></td><td></td></tr><tr class="odd"><td>cal_r</td><td>rs_rt</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>cal_i</td><td>rs</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td>load</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td>store</td><td>rs(base)</td><td>1</td><td></td><td></td><td>X</td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td>store</td><td>rt</td><td>2</td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h2 id="暂停实现">暂停实现</h2><blockquote><p>使用课程讲解的AT法,在流水线运行期间,ID区提供<span class="math inline">\(T_{USE}\)</span>,EX,MEM区提供<span class="math inline">\(T_{NEW}\)</span>,在冒险控制模块中采用以下判断逻辑:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL =  (ID_A1 == EX_A3 &amp;&amp; ID_A1_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)  <br>              || (ID_A2 == EX_A3 &amp;&amp; ID_A2_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A1 == MEM_A3 &amp;&amp; ID_A1_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A2 == MEM_A3 &amp;&amp; ID_A2_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>);<br></code></pre></td></tr></table></figure><p>STALL信号会控制三个行为:</p><ol type="1"><li>暂停IF区的PC模块</li><li>暂停IF_ID间流水寄存器</li><li>刷新ID_EX间流水寄存器(等同于reset)</li></ol><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> Enable_PC = !STALL;<br><span class="hljs-keyword">assign</span> Enable_IF_ID = !STALL;<br><span class="hljs-keyword">assign</span> Flush_ID_EX = STALL;<br></code></pre></td></tr></table></figure></blockquote><h2 id="转发实现">转发实现</h2><blockquote><p>转发有五条可能的数据通路:</p><ol type="1"><li><span class="math inline">\(EX\_MEM\rightarrow ID\)</span></li><li><span class="math inline">\(MEM\_WB\rightarrow ID\)</span></li><li><span class="math inline">\(EX\_MEM\rightarrow EX\)</span></li><li><span class="math inline">\(MEM\_WB\rightarrow EX\)</span></li><li><span class="math inline">\(MEM\_WB\rightarrow MEM\)</span></li></ol><p>这里以ID区的RD1转发数据逻辑为例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> ID_RD1_forward = (ID_A1 == <span class="hljs-number">5&#x27;b0</span>) ? <span class="hljs-number">0</span> :<br>                        (ID_A1 == MEM_A3) ? MEM_WD :<br>                        (ID_A1 == WB_A3) ? WB_WD :<br>                        ID_RD1;<br></code></pre></td></tr></table></figure></blockquote><h2 id="寄存器内部转发实现">寄存器内部转发实现</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs Verilog"><span class="hljs-comment">// 考虑寄存器内部转发</span><br><span class="hljs-keyword">assign</span> RD1 = (A1 == A3 &amp;&amp; A1 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A1]; <br><span class="hljs-keyword">assign</span> RD2 = (A2 == A3 &amp;&amp; A2 != <span class="hljs-number">0</span> &amp;&amp; !reset) ? WD : grf[A2];<br></code></pre></td></tr></table></figure><h2 id="测试方案">测试方案</h2><ol type="1"><li><code>Python</code>自动生成测试mips文件</li><li><code>Mars</code>运行mips文件,生成正确结果和机器码</li><li><code>iverilog</code>运行CPU文件,生成测试结果</li><li><code>Python</code>比较两份答案</li></ol><h2 id="思考题">思考题</h2><p>1、为什么需要有单独的乘除法部件而不是整合进 ALU？为何需要有独立的HI、LO 寄存器？</p><blockquote><p>乘除法的运算速率明显低于其他运算,需要多个时钟周期,将乘除法分离出ALU可以避免乘除指令干扰其他运算指令的进行.</p><p>独立的HI,LO寄存器可以保存乘除法运算的值,若不实现该独立寄存器,要等待运算完成后再将值送回寄存器堆中,严重降低流水线CPU的性能.</p></blockquote><p>2、真实的流水线 CPU是如何使用实现乘除法的？请查阅相关资料进行简单说明。</p><blockquote><ol type="1"><li>乘法</li></ol><p>CPU会初始化三个通用寄存器,分别存放被乘数,乘数,部分积.部分积寄存器初始化为0.</p><p>判断乘数寄存器的低位是低电平(0)还是高电平(1),如果是0则将乘数寄存器右移一位,同时将部分积寄存器也右移一位</p><p>如果为1,则将部分积寄存器加上被乘数寄存器的值,再进行移位操作</p><p>乘数寄存器低位溢出的一位丢弃,部分寄存器低位溢出的一位填充到乘数寄存器的高位</p><p>处理完毕后,乘数寄存器即<code>$lo</code>,部分积寄存器即<code>$hi</code></p><ol start="2" type="1"><li>除法</li></ol><p>首先CPU会初始化三个寄存器,分别用来存放被除数,除数,部分商.</p><p>余数(被除数与除数比较的结果)放到被除数的有效高位上.</p><p>首先CPU会把被除数bit位与除数bit位对齐,然后在让对齐的被除数与除数比较(双符号位判断).</p><p>双符号位判断： 比如01-10=11(前面的1是符号位) 1-2=-1计算机通过符号位和后一位的bit位来判断大于和小于，那么01-10=11就说明01小于10，如果得数为01就代表大于，如果得数为00代表等于。</p><p>如果得数大于或等于则将比较的结果放到被除数的有效高位上然后在商寄存器上商：1并向后多看一位(上商就是将商的最低位左移1位腾出商寄存器最低位上新的商)</p><p>如果得数小于则上商：0 并向后多看一位</p><p>循环做以上操作当所有的被除数都处理完后，商做结果被除数里面的值就是余数.</p></blockquote><p>3、请结合自己的实现分析，你是如何处理 Busy 信号带来的周期阻塞的？</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> STALL =  (ID_A1 == EX_A3 &amp;&amp; ID_A1_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)  <br>              || (ID_A2 == EX_A3 &amp;&amp; ID_A2_USE &lt; EX_NEW &amp;&amp; EX_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A1 == MEM_A3 &amp;&amp; ID_A1_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_A2 == MEM_A3 &amp;&amp; ID_A2_USE &lt; MEM_A2_NEW &amp;&amp; MEM_A3 != <span class="hljs-number">0</span>)<br>              || (ID_MD &amp;&amp; (MULT_DIV_BUSY || MULT_DIV_START));<br></code></pre></td></tr></table></figure><p>当<code>EX</code>区的乘除部件在计算乘除结果时,<code>MULT_DIV_BUSY</code>置1;当ID区遇到乘除相关指令(<code>ID_MD</code>=1)时,若<code>MULT_DIV_BUSY</code>或<code>MULT_DIV_START</code>为1,则周期阻塞.</p></blockquote><p>4、请问采用字节使能信号的方式处理写指令有什么好处？（提示：从清晰性、统一性等角度考虑）</p><blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">assign</span> MEM_BYTE_EN =  (WE == <span class="hljs-number">0</span>) ? <span class="hljs-number">4&#x27;b0000</span> :<br>                 (MEM_PART == `memWord) ? <span class="hljs-number">4&#x27;b1111</span> :<br>                 (MEM_PART == `memHalf &amp;&amp; half == <span class="hljs-number">0</span>) ? <span class="hljs-number">4&#x27;b0011</span> :<br>                 (MEM_PART == `memHalf &amp;&amp; half == <span class="hljs-number">1</span>) ? <span class="hljs-number">4&#x27;b1100</span> :<br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b00</span>) ? <span class="hljs-number">4&#x27;b0001</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b01</span>) ? <span class="hljs-number">4&#x27;b0010</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b10</span>) ? <span class="hljs-number">4&#x27;b0100</span> : <br>                 (MEM_PART == `memByte &amp;&amp; <span class="hljs-keyword">byte</span> == <span class="hljs-number">2&#x27;b11</span>) ? <span class="hljs-number">4&#x27;b1000</span> :<br>                 <span class="hljs-number">4&#x27;b0000</span>;<br></code></pre></td></tr></table></figure><p>使得代码清晰易读,避免了大量的位拼接的情况,可以处理按字,半字,字节读入/写入的操作,统一性好.</p></blockquote><p>5、请思考，我们在按字节读和按字节写时，实际从 DM 获得的数据和向 DM写入的数据是否是一字节？在什么情况下我们按字节读和按字节写的效率会高于按字读和按字写呢？</p><blockquote><p>不是,我们从DM获得的数据和向DM写入的数据都是一字,通过处理后选择其中一个字节执行操作.</p><p>当指令序列有大量涉及<code>lh,sh,lb,sb</code>的指令时.</p></blockquote><p>6、为了对抗复杂性你采取了哪些抽象和规范手段？这些手段在译码和处理数据冲突的时候有什么样的特点与帮助？</p><blockquote><p>译码:将指令进行分类,降低译码代码复杂度和书写难度</p><p>处理数据冲突:将数据通路的阻塞操作和转发操作分离,各部件的选择信号均由Control部件产生,减少各部件的耦合度</p></blockquote><p>7、在本实验中你遇到了哪些不同指令类型组合产生的冲突？你又是如何解决的？相应的测试样例是什么样的？</p><blockquote><p>ID区和EX区均在执行乘除类指令:STALL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $1, $0, 0x3456<br>ori $2, $0, 0x4675<br>ori $3, $0, 0x786922<br>multu $1, $2<br>mult $2, $3<br>mflo $3<br>mfhi $4<br></code></pre></td></tr></table></figure></blockquote><p>8、如果你是手动构造的样例，请说明构造策略，说明你的测试程序如何保证<strong>覆盖</strong>了所有需要测试的情况；如果你是<strong>完全随机</strong>生成的测试样例，请思考完全随机的测试程序有何不足之处；如果你在生成测试样例时采用了<strong>特殊的策略</strong>，比如构造连续数据冒险序列，请你描述一下你使用的策略如何<strong>结合了随机性</strong>达到强测的效果。</p><blockquote><p>不足之处:可能会遗漏特殊的阻塞和转发情况</p><p>策略:</p><ol type="1"><li><p>限制使用的寄存器个数,提高数据冲突的可能性</p></li><li><p>生成beq,jal等跳转类指令时打印一组语句,指定跳转的寄存器值或<code>PC+OFFSET</code>,避免跳转地址不合理</p></li></ol></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>cache</title>
    <link href="/2024/11/11/cache/"/>
    <url>/2024/11/11/cache/</url>
    
    <content type="html"><![CDATA[<h1 id="cache">Cache</h1><h2 id="概念">概念</h2><p><strong>数据块</strong>:Cache和主存被划分为大小相等的块,称为Cache块(行)</p><ul><li>Cache块数小于主存中的块数</li><li>每块由若干字节组成</li></ul><p><strong>标记</strong>:每一个Cache数据块有一个标记字段</p><p><strong>有效位</strong>:每一组Block都有一个有效位,用于指示相应数据块是否包含有效数据</p><p><strong>命中率</strong>:CPU欲访问的信息已在Cache中的比率称为Cache的命中率,Cache的总命中次数为<span class="math inline">\(N_c\)</span>,访问主存的总次数为<span class="math inline">\(N_m\)</span>,命中率为<span class="math inline">\(H=\frac{N_c}{N_c+N_m}\)</span></p><h2 id="映射">映射</h2><h3 id="直接映射">直接映射</h3><ul><li>Cache行号=主存块号 mod Cache总行数</li><li>假设Cache共有<span class="math inline">\(2^c\)</span>行,主存有<span class="math inline">\(2^m\)</span>块,在直接映射方式中,主存的第0块,第<span class="math inline">\(2^c\)</span>块,第<span class="math inline">\(2^{c+1}\)</span>块映射到Cache的第0行</li><li>给每个Cache行设置一个长为<span class="math inline">\(t=m-c\)</span>的标记(tag)</li></ul><p>直接映射的<strong>地址结构</strong>为:</p><table><thead><tr class="header"><th>标记</th><th>Cache 行号</th><th>块内地址</th></tr></thead><tbody></tbody></table><h4 id="访存过程">访存过程</h4><ol type="1"><li>根据访存地址中间的c位找到对应的cache行</li><li>将对应Cache行中的标记和主存地址的高t位标记进行比较</li><li>若相等且有效位为1,则访问Cache<strong>"命中"</strong>,此时根据主存地址中低位的块内地址,在对应的Cache行中存取信息</li><li>若不想等或有效位为0,则不命中,此时CPU从主存中读出该地址所在的一块信息送到对应的Cache行中,将有效位置1,并将标记设置为地址中的高t位,同时将该地址中的内容送CPU</li></ol><h3 id="全相联映射">全相联映射</h3><ul><li>主存中的每一块都可以装入Cache中的任何位置</li><li>同时与所有tag进行比较,需要N个比较器</li><li>数据访问和标记并行执行</li></ul><h4 id="地址结构">地址结构</h4><table><thead><tr class="header"><th>标记</th><th>块内地址</th></tr></thead><tbody></tbody></table><h4 id="访存过程-1">访存过程</h4><ol type="1"><li>将主存地址的高位标记(位数=<span class="math inline">\(log_2\)</span>主存块数)与Cache各行的标记进行比较</li><li>若有一个相等且对应有效位为1,则命中,此时根据块内地址从该Cache行中取出信息</li><li>若都不想等,则不命中,此时CPU从主存中读出该地址所在的一块信息送到Cache的<strong>任意一个空闲行</strong>中,将有效位置1,并设置标记,同时将该地址中的内容送CPU</li></ol><figure><img src="image-20241111151042631.png" alt="image-20241111151042631"><figcaption aria-hidden="true">image-20241111151042631</figcaption></figure><p><strong>优点</strong>:灵活性</p><p><strong>缺点</strong>:主存地址中的块地址要与Cache中所有Tag比较后,才能知晓是否不命中</p><h3 id="组相联映射">组相联映射</h3><ul><li>将Cache分为Q个大小相等的组,每个主存块可以装入固定组的任意一行,即组间采用直接映射,组内采用全相联映射的方式</li></ul><table><thead><tr class="header"><th>标记</th><th>组号</th><th>块内地址</th></tr></thead><tbody></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>CPU</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>离散数学-函数</title>
    <link href="/2024/11/10/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0/"/>
    <url>/2024/11/10/%E7%A6%BB%E6%95%A3%E6%95%B0%E5%AD%A6-%E5%87%BD%E6%95%B0/</url>
    
    <content type="html"><![CDATA[<h2 id="部分函数">部分函数</h2><blockquote><p>如果从集合X到Y的二元关系f是"单值"的,即f满足以下条件:</p><p>若<span class="math inline">\(&lt;x,y_1&gt;\in f\wedge&lt;x,y_2&gt;\in f,则y_1=y_2\)</span></p><p>f为X到Y的部分函数</p></blockquote><p>从X到Y的函数个数:<span class="math inline">\(\#(Y^X)=(\#Y)^{\#X}\)</span></p><h2 id="定义域">定义域</h2><p><span class="math inline">\(dom(f)=\{x\in X|y\inY使得y=f(x)\}\)</span></p><p>若<span class="math inline">\(x\in  dom(f)\)</span>,则f在x处有定义,记为<span class="math inline">\(f(x)\downarrow\)</span>,否则称f在x处无定义,<span class="math inline">\(f(x)\uparrow\)</span>,显然<span class="math inline">\(dom(f)\subseteq X\)</span></p><ol type="1"><li><span class="math inline">\(若\text{dom}(f)=X,则记f为X到Y的全函数,f为X到Y的函数,记作f:X\rightarrowY\)</span></li><li><span class="math inline">\(若\text{dom}(f)\subsetX,则称f为X到Y的严格部分函数\)</span></li><li><span class="math inline">\(若\text{ran}(f)=Y,则称f为X到Y上的部分函数\)</span></li><li><span class="math inline">\(若\text{ran}(f)\subsetY,则称f为X到Y内的部分函数\)</span></li><li>若对任意<span class="math inline">\(x_1,x_2\in\text{dom}(f),当x_1\neq x_2时,皆有f(x_1)\neq f(x_2)\)</span></li></ol><h2 id="限制">限制</h2><p>设函数<span class="math inline">\(f:X\rightarrow Y,A\subseteqX\)</span>,则<span class="math inline">\(f\cap (A\timesY)\)</span>是从A到Y的函数,则称f在A上的限制,记作<span class="math inline">\(f|_A\)</span>,又称<span class="math inline">\(f\)</span>是<span class="math inline">\(f_A\)</span>到X的延拓</p><p><span class="math inline">\(f|_A=\{&lt;x,y&gt;|&lt;x,y&gt;\in F\wedgex\in A\}\)</span></p><h2 id="定理">定理</h2><p><span class="math inline">\(1)f|U(A)|=U\{f[A]|A\in A\}\)</span></p><p><span class="math inline">\(任取y\in f[U\mathscr A],\therefore\exists x\in \cup \mathscr A使得f(x)=y\\\)</span></p><p><span class="math inline">\(\exists A\in\mathscr A,x\in A\thereforey\in f(A),\therefore y\in \cup\{f[A]|A\in\mathscr A\},\thereforef[\cup\mathscr A]\subseteq \cup\{f[A]|A\in\mathscr A\}\)</span></p><p><span class="math inline">\(任取A\in\mathscr A,A\subseteq \cup\mathscr A,f[A]\subseteq f[U\mathscr A]\)</span></p><p><span class="math inline">\(\cup \{f[A]|A\in A\}\subseteqf[\cup\mathscr A]\)</span></p><p>4)<span class="math inline">\(B=\emptyset,f^{-1}[\cap \mathscrB]=\cap\{f^{-1}[B]|B\in\mathscr B\}\)</span></p><figure><img src="image-20241106151958714.png" alt="image-20241106151958714"><figcaption aria-hidden="true">image-20241106151958714</figcaption></figure><h2 id="定理-1">定理</h2><p>若f为从集合X到Y的部分函数且<span class="math inline">\(A\subseteqX\)</span>,则:</p><p><span class="math inline">\(dom(f|_A)=A\cap dom\ f\)</span></p><p><span class="math inline">\(ran(f|_A)=f[A]\)</span></p><p>若<span class="math inline">\(A\subseteq dom(f)\)</span>,则<span class="math inline">\(f|_A\)</span>为全函数</p><h2 id="思考题">思考题</h2><figure><img src="image-20241106153418485.png" alt="image-20241106153418485"><figcaption aria-hidden="true">image-20241106153418485</figcaption></figure><h1 id="函数的复合">函数的复合</h1><p><span class="math inline">\(g\cdot f\)</span>定义为:</p><p><span class="math inline">\(\{&lt;x,z&gt;|x\in X\wedge z\in Z\wedge\exists y(y\in Y\wedge y=f(x)\wedge z=g(y))\}\)</span></p><h2 id="定理1">定理1</h2><p>1)<span class="math inline">\(dom(g\cdot f)=f^{-1}[domg]\)</span></p><p>2)<span class="math inline">\(ran(g\cdot f)=g[ranf]\)</span></p><p>3)若f,g都是全函数,<span class="math inline">\(g\cdotf\)</span>也是全函数</p><h2 id="定理2">定理2</h2><p><span class="math inline">\(h\cdot(g\cdot f)=(h\cdot g)\cdotf\)</span></p><h1 id="特殊性质的函数与逆函数">特殊性质的函数与逆函数</h1><h2 id="自然映射">自然映射</h2><p><span class="math inline">\(\phi=\{&lt;x,[x]_R&gt;|x\inA\}\)</span></p><h2 id="定理-2">定理</h2><p><span class="math inline">\(若g\cdot f是满射,则g是满射\)</span></p><p><span class="math inline">\(1)ran\ g\subseteq Z,g[ran\ f]=g[Y]=ran\g\)</span></p><p><span class="math inline">\(g[ran\ f]=ran(g\cdot f)\)</span></p><p><span class="math inline">\(由于g\cdot\ f为满射,ran(g\cdotf)=Z\)</span></p><p><span class="math inline">\(\therefore Z\subseteq ran\ g\)</span></p><p><span class="math inline">\(\therefore Z=ran\g\)</span>,即g为满射</p><p>2)<span class="math inline">\(g\cdot f是单射,则f是单射\)</span></p><p>3)<span class="math inline">\(若g\cdotf是双射,则g是满射且f是单射\)</span></p><p><strong>左满右单</strong></p><h2 id="思考题-1">思考题</h2><p>a)<strong>有多少个从A到B的函数为</strong> <strong>单射？</strong></p><p><strong>① 当 m</strong> <span class="math inline">\(\leq\)</span><strong>n时，有<span class="math inline">\(p^m_n=\frac{n!}{(n-m)!}\)</span>个单射；</strong></p><p><strong>② 当 m &gt; n时，有0个单射</strong></p><p><strong>有多少个从A到B的函数为</strong> <strong>满射</strong>？</p><p><strong>① 当 m &lt; n时，有 0 个满射；</strong></p><p><strong>② 当 n = 0且m</strong> <strong>¹</strong> <strong>0时，0个；</strong></p><p><strong>③ 当 n = 0且m = 0时， 1个；</strong></p><p><strong>④ 当 m</strong> <span class="math inline">\(\geq\)</span><strong>n</strong> <span class="math inline">\(\geq\)</span><strong>1时，为第二类Stirling数：</strong></p><p><span class="math inline">\(F(n,m)=\mathop\Sigma\limits^m_{i=0}\frac{(-1)^{m-i}i^n}{i!(m-i)!}\)</span></p><h2 id="第二类斯特林数">第二类斯特林数</h2><p><span class="math inline">\(S(n,m)=S(n-1,m-1)+S(n-1,m)*m\)</span></p><h2 id="逆函数">逆函数</h2><p><span class="math inline">\(1)若有g:Y\rightarrow X使得g\cdotf=I_X,则称f为左可逆的,\\并称g为f的一个左逆函数\)</span></p><p><span class="math inline">\(2)若有g:Y\rightarrow X使得f\cdotg=I_Y,则称f为左可逆的,\\并称g为f的一个右逆函数\)</span></p><h2 id="可逆判定">可逆判定</h2><p><span class="math inline">\(f:X\rightarrow Y为左可逆的\leftrightarrowf为单射\)</span></p><p><span class="math inline">\(f:X\rightarrow Y是右可逆的\leftrightarrowf为满射\)</span></p><h2 id="可逆性质">可逆性质</h2><p>以下条件等价:</p><ol type="1"><li>f是双射</li><li>f是可逆的</li><li>f的逆关系<span class="math inline">\(f^{-1}\)</span>即为f的逆函数</li></ol><h1 id="集合的特征函数">集合的特征函数</h1><p><span class="math inline">\(设U是全集,A是U的子集,A的特征函数\Phi_A:U\rightarrow\{0,1\}\\\Phi_A(x)=\begin{cases}1,x\in A\\0,x\notinA\end{cases}\)</span></p><h2 id="性质">性质</h2><p><span class="math inline">\(\forall x(\Phi_A(x)=0)\LeftrightarrowA=\emptyset\)</span></p><p><span class="math inline">\(\forall x(\Phi_A(x)=1)\LeftrightarrowA=U\)</span></p><p><span class="math inline">\(\forall x(\Phi_A(x)\leq\Phi_B(x))\Leftrightarrow A\subseteq B\)</span></p><p><span class="math inline">\(\forallx(\Phi_A(x)=\Phi_B(x))\Leftrightarrow A=B\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>卷积神经网络</title>
    <link href="/2024/11/05/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/"/>
    <url>/2024/11/05/%E5%8D%B7%E7%A7%AF%E7%A5%9E%E7%BB%8F%E7%BD%91%E7%BB%9C/</url>
    
    <content type="html"><![CDATA[<h1 id="从全连接层道卷积">从全连接层道卷积</h1><h2 id="全连接层">全连接层</h2><p><span class="math inline">\([H]_{i,j}=[U]_{i,j}+\mathop\sum\limits_{k}\mathop\sum\limits_l[W]_{i,j,k,l}[X]_{k,l}\\=[U]_{i,j}+\mathop\sum\limits_{a}\mathop\sum\limits_{b}[V]_{a,b}[X]_{i+a,j+a}\)</span></p><h3 id="平移不变性">平移不变性</h3><blockquote><p>检测对象在输入X中的平移,只会导致隐藏层H中的平移</p><p>V和U实际上不依赖于(i,j)的值,即<span class="math inline">\([V]_{i,j,a,b}=[V]_{a,b}\)</span>,且U是一个常数</p></blockquote><p><span class="math inline">\([H]_{i,j}=u+\sum\limits_a\sum\limits_b[V]_{a,b}[X]_{i+a,j+b}\)</span></p><h3 id="局部性">局部性</h3><blockquote><p><span class="math inline">\([H]_{i,j}\)</span>不会关注距离(i,j)太远的地方</p></blockquote><p><span class="math inline">\([H]_{i,j}=u_d+\sum\limits^{\Delta}_{a=-\Delta}\sum\limits^{\Delta}_{b=-\Delta}[V]_{a,b}[X]_{i+a,j+b}\)</span></p><h3 id="代价">代价</h3><ul><li>特征必须平移不变</li><li>每一层只包含局部信息</li></ul><h2 id="通道">通道</h2><blockquote><p>对于图像,一般是三维的张量</p></blockquote><p><span class="math inline">\([H]_{i,j,d}=\sum\limits^{\Delta}_{a=-\Delta}\sum\limits^{\Delta}_{b=-\Delta}\sum\limits^{\Delta}_{c}[V]_{a,b,c,d}[X]_{i+a,j+b,c}\)</span></p><h1 id="图像卷积">图像卷积</h1><p><span class="math inline">\(n_k\times n_w的输入矩阵,k_h\timesk_w的卷积核,输出矩阵为(n_k-k_h+1)\times(n_w-k_w+1)\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>P4-CPU设计文档</title>
    <link href="/2024/11/04/P4-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/11/04/P4-CPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="cpu设计文档">CPU设计文档</h1><h2 id="设计草稿">设计草稿</h2><h3 id="层次设计">层次设计</h3><blockquote><p><code>mips.v</code>为主电路文件,内含8个子电路文件</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">-- mips<br>-- uut1 - pc<br>-- uut2 - im<br>-- uut3 - grf<br>-- uut4 - alu<br>-- uut5 - nxtad<br>-- uut6 - dm<br>-- uut7 - ctrl<br>-- uut8 - ext<br></code></pre></td></tr></table></figure><h3 id="数据通路设计">数据通路设计</h3><figure><img src="image-20241029153321435.png" alt="数据通路"><figcaption aria-hidden="true">数据通路</figcaption></figure><h3 id="pc设计">PC设计</h3><blockquote><p>在时钟上升沿,<code>reset</code>为1则将<code>pc_out</code>置位<code>32'h3000</code>;否则将<code>pc_in</code>传递给<code>pc_out</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> pc(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_in,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_out<br>    );<br></code></pre></td></tr></table></figure><h3 id="im设计">IM设计</h3><blockquote><p>访问ROM中的<code>pc</code>地址,输出数据到<code>instr</code>,容量为<span class="math inline">\(4096\times 32bit\)</span></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> im(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] instr<br>    );<br></code></pre></td></tr></table></figure><h3 id="grf设计">GRF设计</h3><blockquote><p>一个由32个32位寄存器组成寄存器堆</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> grf(<br>    <span class="hljs-keyword">input</span> write_enable, <span class="hljs-comment">// 写入使能信号</span><br>    <span class="hljs-keyword">input</span> clk, <span class="hljs-comment">// 时钟信号</span><br>    <span class="hljs-keyword">input</span> reset, <span class="hljs-comment">// 同步复位信号</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a1, <span class="hljs-comment">// 读出数据的寄存器</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a2, <span class="hljs-comment">// 读出数据的寄存器</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] a3, <span class="hljs-comment">// 写入数据的寄存器</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] rd1, <span class="hljs-comment">// a1寄存器的读出值</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] rd2, <span class="hljs-comment">// a2寄存器的读出值</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] wpc, <span class="hljs-comment">// 当前指令地址</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] wd3 <span class="hljs-comment">// a3寄存器的写入值</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="alu设计">ALU设计</h3><blockquote><p>计算模块,根据<code>ALUControl</code>信号对<code>src_a</code>,<code>src_b</code>进行计算,结果输出到<code>alu_result</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> alu(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src_a, <br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] src_b,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] alu_control, <span class="hljs-comment">// ALU控制信号</span><br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] alu_result, <span class="hljs-comment">// 计算结果</span><br>    <span class="hljs-keyword">output</span> zero <span class="hljs-comment">// src_a, src_b相减为0时置1</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="nxtad设计">NXTAd设计</h3><blockquote><p>计算下一个指令地址的模块</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> nxtad(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc, <span class="hljs-comment">// 当前指令地址</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] instr, <span class="hljs-comment">// 当前指令</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] gpr_rs, <span class="hljs-comment">// GPR[rs]</span><br>    <span class="hljs-keyword">input</span> jump, <span class="hljs-comment">// Jump信号(由指令jal激活)</span><br>    <span class="hljs-keyword">input</span> jr, <span class="hljs-comment">// Jr信号(由指令jr激活)</span><br>    <span class="hljs-keyword">input</span> zero, <span class="hljs-comment">// zero信号(来自于ALU)</span><br>    <span class="hljs-keyword">input</span> branch, <span class="hljs-comment">// Branch信号(由指令beq激活)</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] next_pc, <span class="hljs-comment">// 下一个指令地址</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc_plus_four <span class="hljs-comment">// 当前指令地址 + 4</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="dm设计">DM设计</h3><blockquote><p>数据存储器,容量为<span class="math inline">\(3072\times32bit\)</span></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dm(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> MemWrite, <span class="hljs-comment">// memory write enable</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] addr, <span class="hljs-comment">// memory&#x27;s address for write</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] din, <span class="hljs-comment">// write data</span><br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] pc, <span class="hljs-comment">// instruction address</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] dout <span class="hljs-comment">// read data</span><br>    );<br></code></pre></td></tr></table></figure><h3 id="ctrl设计">Ctrl设计</h3><blockquote><p>Control模块,根据指令输出对应的控制信号</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ctrl(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> RegWrite,<br>    <span class="hljs-keyword">output</span> MemWrite,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">3</span>:<span class="hljs-number">0</span>] ALUControl,<br>    <span class="hljs-keyword">output</span> ALUSrc,<br>    <span class="hljs-keyword">output</span> MemtoReg,<br>    <span class="hljs-keyword">output</span> RegDst,<br>    <span class="hljs-keyword">output</span> Branch,<br>    <span class="hljs-keyword">output</span> Jump,<br>    <span class="hljs-keyword">output</span> ExtControl,<br>    <span class="hljs-keyword">output</span> Jr,<br>    <span class="hljs-keyword">output</span> Jal<br>    );<br></code></pre></td></tr></table></figure><h3 id="ext设计">Ext设计</h3><blockquote><p>扩位模块,根据信号<code>ExtControl</code>对立即数进行不同形式的扩展</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> ext(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">15</span>:<span class="hljs-number">0</span>] imm16,<br>    <span class="hljs-keyword">input</span> ExtControl, <span class="hljs-comment">// 控制信号</span><br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] imm32 <span class="hljs-comment">// 32位输出(零扩展或者符号扩展)</span><br>    );<br></code></pre></td></tr></table></figure><h2 id="测试方案">测试方案</h2><h3 id="python自动生成asm文件">Python自动生成asm文件</h3><blockquote><p>利用python生成asm文件</p></blockquote><h3 id="mars产生机器码文件及正确运行结果">Mars产生机器码文件及正确运行结果</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">java -jar Mars_perfect.jar mc CompactDataAtZero a dump .text HexText code.txt nc instruction.asm<br>java -jar Mars_perfect.jar mc CompactDataAtZero nc instruction.asm &gt; right_ans.txt<br></code></pre></td></tr></table></figure><blockquote><p>机器码文件:</p></blockquote><figure class="highlight maxima"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs maxima"><span class="hljs-number">00000000</span><br>3555ec49<br>3c0b8baa<br><span class="hljs-number">00ada820</span><br>...<br><span class="hljs-number">0399e020</span><br>12bcfff3<br><span class="hljs-number">341000b8</span><br>8e1d0034<br><br></code></pre></td></tr></table></figure><blockquote><p>正确运行结果:</p></blockquote><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@00003004:</span> $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">0000</span>ec49<br><span class="hljs-variable">@00003008</span>: $<span class="hljs-number">11</span> &lt;= <span class="hljs-number">8</span>baa0000<br><span class="hljs-variable">@0000300c</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00000000</span><br>...<br><span class="hljs-variable">@00003240</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00001</span>bef<br></code></pre></td></tr></table></figure><h3 id="iverilog产生检测文件运行结果">iverilog产生检测文件运行结果</h3><blockquote><p><code>cmd</code>执行以下命令:</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">iverilog -o wave -y docs tb_mips.v<br>vvp -n wave -lxt2 &gt; your_ans.txt<br></code></pre></td></tr></table></figure><p>运行结果输出到<code>your_ans.txt</code></p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-variable">@00003004:</span> $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">0000</span>ec49<br><span class="hljs-variable">@00003008</span>: $<span class="hljs-number">11</span> &lt;= <span class="hljs-number">8</span>baa0000<br><span class="hljs-variable">@0000300c</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00000000</span><br>...<br><span class="hljs-variable">@00003240</span>: $<span class="hljs-number">21</span> &lt;= <span class="hljs-number">00001</span>bef<br></code></pre></td></tr></table></figure><h2 id="思考题">思考题</h2><ol type="1"><li><p>阅读下面给出的 DM 的输入示例中（示例 DM 容量为 4KB，即 32bit ×1024字），根据你的理解回答，这个 addr 信号又是从哪里来的？地址信号 addr位数为什么是 [11:2] 而不是 [9:0] ？</p><figure><img src="http://cscore.buaa.edu.cn/assets/cscore-image/refkxh/86953c72-c519-48b2-8cb8-7b2c90850e53/66.png" alt="66.png"><figcaption aria-hidden="true">66.png</figcaption></figure><blockquote><p><code>addr</code>来自<code>ALU</code>模块的计算结果,该计算结果为<code>GPR[base]+SignExtend[imm]</code>,其中<code>base</code>是指令的25-21位,<code>imm</code>是指令的15-0位.</p><p>由于DM容量为4KB,DM应当取[11:0],又因为按字节寻址,只要取[11:2],</p></blockquote></li><li><p>思考上述两种控制器设计的译码方式，给出代码示例，并尝试对比各方式的优劣。</p><blockquote><p>记录指令对应的控制信号:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 写入寄存器使能信号</span><br><span class="hljs-keyword">assign</span> RegWrite = R || lui || ori || lw || jal;<br><span class="hljs-comment">// 写入Memory使能信号</span><br><span class="hljs-keyword">assign</span> MemWrite = sw;<br><span class="hljs-comment">// ALU控制信号</span><br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">0</span>] = ori || lui;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">1</span>] = sub || lui || lw || sw || add || beq;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">2</span>] = sub || beq;<br><span class="hljs-keyword">assign</span> ALUControl[<span class="hljs-number">3</span>] = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// ALUSrc:ALU读入端口来源控制信号(寄存器 or 立即数)</span><br><span class="hljs-keyword">assign</span> ALUSrc = lui || lw || sw || ori;<br><span class="hljs-comment">// MemtoReg:为1时,寄存器写入数据来自Memory,否则为ALU计算结果</span><br><span class="hljs-keyword">assign</span> MemtoReg = lw;<br><span class="hljs-comment">// RegDst:寄存器写入地址端口选择信号(1-&gt;15:11, 0-&gt;20:16)</span><br><span class="hljs-keyword">assign</span> RegDst = R;<br><span class="hljs-comment">// Branch:跳转信号</span><br><span class="hljs-keyword">assign</span> Branch = beq;<br><span class="hljs-comment">// Jump:jal,j跳转信号</span><br><span class="hljs-keyword">assign</span> Jump = jal;<br><span class="hljs-comment">// ExtControl:选择Ext扩位方式</span><br><span class="hljs-keyword">assign</span> ExtControl = ori || lui;<br><span class="hljs-comment">// Jr</span><br><span class="hljs-keyword">assign</span> Jr = jr;<br><span class="hljs-comment">// Jal</span><br><span class="hljs-keyword">assign</span> Jal = jal;<br></code></pre></td></tr></table></figure><p>记录控制信号每种取值对应的指令:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">case</span>(option)<br>    beq:<span class="hljs-keyword">begin</span><br>        RegWrite = <span class="hljs-number">1&#x27;b0</span>;<br>        MemWrite = <span class="hljs-number">1&#x27;b0</span>;<br>        ALUControl=<span class="hljs-number">4&#x27;b110</span>;<br>        <span class="hljs-comment">// RegDst = 1&#x27;bX; (无关信号)</span><br>        <span class="hljs-comment">// MemtoReg = 1&#x27;bX; (无关信号)</span><br>        ALUSrc = <span class="hljs-number">1&#x27;b0</span>;<br>        Branch = <span class="hljs-number">1&#x27;b1</span>;<br>        Jump = <span class="hljs-number">1&#x27;b0</span>;<br>        ExtControl = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    ...<br><span class="hljs-keyword">endcase</span><br></code></pre></td></tr></table></figure><p>优劣:</p><ol type="1"><li>前者在添加新的信号时修改代码更为方便,减少工作量,后者代码量较大,需要指明新指令对应的每个信号的值;</li><li>后者更为直观,容易检查错误,前者不够直观.</li></ol></blockquote></li><li><p>在相应的部件中，复位信号的设计都是<strong>同步复位</strong>，这与P3中的设计要求不同。请对比<strong>同步复位</strong>与<strong>异步复位</strong>这两种方式的reset 信号与 clk 信号优先级的关系。</p><blockquote><p>同步复位:<code>reset</code>小于<code>clk</code></p><p>异步复位:<code>reset</code>大于<code>clk</code></p></blockquote></li><li><p>C 语言是一种弱类型程序设计语言。C语言中不对计算结果溢出进行处理，这意味着 C语言要求程序员必须很清楚计算结果是否会导致溢出。因此，如果仅仅支持 C语言，MIPS 指令的所有计算指令均可以忽略溢出。请说明为什么在忽略溢出的前提下，addi 与 addiu 是等价的，add 与 addu是等价的。提示：阅读《MIPS32® Architecture For Programmers Volume II:The MIPS32® Instruction Set》中相关指令的 Operation 部分。</p></li></ol><blockquote><p><code>addi</code>,<code>add</code>在发生溢出时,会放弃对寄存器赋值的操作,<code>addiu</code>,<code>addu</code>会忽略溢出.当在忽略溢出的前提下,<code>addi</code>与<code>addiu</code>等价,<code>add</code>与<code>addu</code>等价</p></blockquote><h2 id="附件">附件</h2><h3 id="python自动生成代码">Python自动生成代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># coding=gb2312</span><br><span class="hljs-keyword">from</span> random <span class="hljs-keyword">import</span> *<br><br>number = <span class="hljs-number">50</span><br>gpr = [<span class="hljs-number">0</span>] * <span class="hljs-number">32</span><br>mem = [<span class="hljs-number">0</span>] * (<span class="hljs-number">2</span>**<span class="hljs-number">10</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_add</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rd = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> -<span class="hljs-number">2</span>**<span class="hljs-number">31</span> &lt;= gpr[rs] + gpr[rt] &lt;= <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:  <span class="hljs-comment"># 若溢出,则不打印这条指令</span><br>        gpr[rd] = gpr[rs] + gpr[rt] <span class="hljs-keyword">if</span> rd != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        f.write(<span class="hljs-string">&#x27;add &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_sub</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rd = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">if</span> -<span class="hljs-number">2</span>**<span class="hljs-number">31</span> &lt;= gpr[rs] + gpr[rt] &lt;= <span class="hljs-number">2</span>**<span class="hljs-number">31</span>-<span class="hljs-number">1</span>:  <span class="hljs-comment"># 若溢出,则不打印这条指令</span><br>        gpr[rd] = gpr[rs] + gpr[rt] <span class="hljs-keyword">if</span> rd != <span class="hljs-number">0</span> <span class="hljs-keyword">else</span> <span class="hljs-number">0</span><br>        f.write(<span class="hljs-string">&#x27;sub &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_ori</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    rs = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>        gpr[rt] = gpr[rs] | imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lw</span>(<span class="hljs-params">f</span>):<br>    base = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">if</span> base != <span class="hljs-number">0</span>:<br>        gpr[base] = imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    offset = (randint(-<span class="hljs-number">200</span>, <span class="hljs-number">200</span>) // <span class="hljs-number">4</span>) * <span class="hljs-number">4</span> - (gpr[base] % <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span>**<span class="hljs-number">10</span> &gt; offset + gpr[base] &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>            gpr[rt] = mem[gpr[base] + offset]<br>        f.write(<span class="hljs-string">&#x27;lw &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(offset) + <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;)\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_sw</span>(<span class="hljs-params">f</span>):<br>    base = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">8</span>)<br>    <span class="hljs-keyword">if</span> base != <span class="hljs-number">0</span>:<br>        gpr[base] = imm<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    offset = (randint(-<span class="hljs-number">200</span>, <span class="hljs-number">200</span>) // <span class="hljs-number">4</span>) * <span class="hljs-number">4</span> - (gpr[base] % <span class="hljs-number">4</span>)<br>    <span class="hljs-keyword">if</span> <span class="hljs-number">2</span> ** <span class="hljs-number">10</span> &gt; offset + gpr[base] &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>            gpr[rt] = mem[gpr[base] + offset]<br>        f.write(<span class="hljs-string">&#x27;sw &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(offset) + <span class="hljs-string">&#x27;(&#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> +<br>                <span class="hljs-built_in">str</span>(base) + <span class="hljs-string">&#x27;)\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">ori</span>(<span class="hljs-params">f, key, num</span>):<br>    gpr[key] = num<br>    f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(key) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>            <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">add</span>(<span class="hljs-params">f, rd, rs, rt</span>):<br>    gpr[rd] = gpr[rs] + gpr[rt]<br>    f.write(<span class="hljs-string">&#x27;add &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">sub</span>(<span class="hljs-params">f, rd, rs, rt</span>):<br>    gpr[rd] = gpr[rs] - gpr[rt]<br>    f.write(<span class="hljs-string">&#x27;sub &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rd) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br>label_ct = <span class="hljs-number">0</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_beq</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> label_ct<br>    rs = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 排除$0</span><br>    rt = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br>    <span class="hljs-keyword">while</span> rt == rs:<br>        rt = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># rt != rs</span><br>    key1 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 中转</span><br>    <span class="hljs-keyword">while</span> key1 == rt <span class="hljs-keyword">or</span> key1 == rs:<br>        key1 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br>    key2 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)  <span class="hljs-comment"># 中转</span><br>    <span class="hljs-keyword">while</span> key2 == rt <span class="hljs-keyword">or</span> key2 == rs <span class="hljs-keyword">or</span> key2 == key1:<br>        key2 = randint(<span class="hljs-number">1</span>, <span class="hljs-number">31</span>)<br><br><br>    mod = randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 跳转方向</span><br>    equal = randint(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>)  <span class="hljs-comment"># 是否相等</span><br>    label = <span class="hljs-string">&#x27;labelx&#x27;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct))<br>    label_ct += <span class="hljs-number">1</span><br>    in_ct = randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>)  <span class="hljs-comment"># 指令总数</span><br><br>    <span class="hljs-comment"># 这里为了避免溢出,我们取一个较小的数而且它不能是0</span><br>    imm = randint(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>**<span class="hljs-number">10</span>-<span class="hljs-number">1</span>)<br>    ori(f, key1, imm)  <span class="hljs-comment"># 将中转寄存器key1设为imm</span><br>    ori(f, key2, imm)<br><br>    <span class="hljs-keyword">if</span> mod == <span class="hljs-number">1</span>:   <span class="hljs-comment"># 向下跳转</span><br>        <span class="hljs-keyword">if</span> equal == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 相等</span><br><br>            imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = gpr[rs] = imm<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        <span class="hljs-keyword">else</span>:  <span class="hljs-comment"># 不相等(极小概率相等)</span><br>            imm1 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            imm2 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = imm1<br>            gpr[rs] = imm2<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;beq &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                <span class="hljs-string">&#x27;$&#x27;</span> +<span class="hljs-built_in">str</span> (rt) + <span class="hljs-string">&#x27;,&#x27;</span> + label + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        run(f, in_ct)<br>        f.write(label + <span class="hljs-string">&#x27;:\n&#x27;</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 向上跳转</span><br>        f.write(label + <span class="hljs-string">&#x27;:\n&#x27;</span>)<br>        run(f, in_ct)<br>        <span class="hljs-keyword">if</span> equal == <span class="hljs-number">1</span>:  <span class="hljs-comment"># 相等,这里处理死循环的可能</span><br>            sub(f, key1, key1, key2) <span class="hljs-comment"># 第一次循环key1为0</span><br>            imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = gpr[rs] = imm<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            add(f, rt, rt, key1) <span class="hljs-comment"># gpr[rt] = gpr[rt] + 0(key1)</span><br>        <span class="hljs-keyword">else</span>:<br>            imm1 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            imm2 = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">16</span> - <span class="hljs-number">1</span>)<br>            gpr[rt] = imm1<br>            gpr[rs] = imm2<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm1) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>            f.write(<span class="hljs-string">&#x27;ori &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-string">&#x27;$0&#x27;</span> + <span class="hljs-string">&#x27;,&#x27;</span> +<br>                    <span class="hljs-built_in">str</span>(imm2) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br>        f.write(<span class="hljs-string">&#x27;beq &#x27;</span> + <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rs) + <span class="hljs-string">&#x27;,&#x27;</span><br>                <span class="hljs-string">&#x27;$&#x27;</span> + <span class="hljs-built_in">str</span>(rt) + <span class="hljs-string">&#x27;,&#x27;</span> + label + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_lui</span>(<span class="hljs-params">f</span>):<br>    rt = randint(<span class="hljs-number">0</span>, <span class="hljs-number">31</span>)<br>    imm = randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span>**<span class="hljs-number">16</span>-<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">if</span> rt != <span class="hljs-number">0</span>:<br>        gpr[rt] = imm &lt;&lt; <span class="hljs-number">16</span><br>    f.write(<span class="hljs-string">&#x27;lui&#x27;</span> + <span class="hljs-string">&#x27; $&#x27;</span> + <span class="hljs-built_in">str</span>(rt) +<br>            <span class="hljs-string">&#x27;,&#x27;</span> + <span class="hljs-built_in">str</span>(imm) + <span class="hljs-string">&#x27;\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_nop</span>(<span class="hljs-params">f</span>):<br>    f.write(<span class="hljs-string">&#x27;nop\n&#x27;</span>)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">print_jal</span>(<span class="hljs-params">f</span>):<br>    <span class="hljs-keyword">global</span> label_ct<br>    f.write(<span class="hljs-string">&quot;jal labelx\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>    run(f, randint(<span class="hljs-number">0</span>,<span class="hljs-number">20</span>))<br>    f.write(<span class="hljs-string">&quot;labelx:\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>    label_ct += <span class="hljs-number">1</span><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">run</span>(<span class="hljs-params">f, ct</span>):<br>    op_set = [<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;ori&#x27;</span>, <span class="hljs-string">&#x27;lw&#x27;</span>, <span class="hljs-string">&#x27;sw&#x27;</span>, <span class="hljs-string">&#x27;lui&#x27;</span>, <span class="hljs-string">&#x27;nop&#x27;</span>]<br>    <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>        op = op_set[randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(op_set)-<span class="hljs-number">1</span>)]<br>        <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;add&#x27;</span>:<br>            print_add(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sub&#x27;</span>:<br>            print_sub(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;ori&#x27;</span>:<br>            print_ori(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lw&#x27;</span>:<br>            print_lw(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sw&#x27;</span>:<br>            print_sw(f)<br>        <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lui&#x27;</span>:<br>            print_lui(f)<br>        <span class="hljs-keyword">else</span>:<br>            print_nop(f)<br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    op_set = [<span class="hljs-string">&#x27;add&#x27;</span>, <span class="hljs-string">&#x27;sub&#x27;</span>, <span class="hljs-string">&#x27;ori&#x27;</span>, <span class="hljs-string">&#x27;lw&#x27;</span>, <span class="hljs-string">&#x27;sw&#x27;</span>, <span class="hljs-string">&#x27;beq&#x27;</span>, <span class="hljs-string">&#x27;lui&#x27;</span>, <span class="hljs-string">&#x27;nop&#x27;</span>, <span class="hljs-string">&#x27;jal&#x27;</span>]<br>    path = <span class="hljs-string">&#x27;instruction.asm&#x27;</span><br><br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(path, <span class="hljs-string">&quot;w&quot;</span>) <span class="hljs-keyword">as</span> f:<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>            ori(f, x, randint(<span class="hljs-number">0</span>, <span class="hljs-number">2</span> ** <span class="hljs-number">31</span> - <span class="hljs-number">1</span>))<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(number):<br>            op = op_set[randint(<span class="hljs-number">0</span>, <span class="hljs-built_in">len</span>(op_set) - <span class="hljs-number">1</span>)]<br>            <span class="hljs-keyword">if</span> op == <span class="hljs-string">&#x27;add&#x27;</span>:<br>                print_add(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sub&#x27;</span>:<br>                print_sub(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;ori&#x27;</span>:<br>                print_ori(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lw&#x27;</span>:<br>                print_lw(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;sw&#x27;</span>:<br>                print_sw(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;beq&#x27;</span>:<br>                print_beq(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;lui&#x27;</span>:<br>                print_lui(f)<br>            <span class="hljs-keyword">elif</span> op == <span class="hljs-string">&#x27;jal&#x27;</span>:<br>                print_jal(f)<br>            <span class="hljs-keyword">else</span>:<br>                print_nop(f)<br>    <span class="hljs-comment"># 接下来打印jr语句</span><br>        f.write(<span class="hljs-string">&quot;jal labelx\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;jal End\n&quot;</span>)<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;labelx:\n&quot;</span>.replace(<span class="hljs-string">&quot;x&quot;</span>, <span class="hljs-built_in">str</span>(label_ct)))<br>        run(f, randint(<span class="hljs-number">0</span>, <span class="hljs-number">20</span>))<br>        f.write(<span class="hljs-string">&quot;jr $ra\n&quot;</span>)<br>        <span class="hljs-comment"># &quot;结束&quot;标签</span><br>        f.write(<span class="hljs-string">&quot;End:\n&quot;</span>)<br><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    main()<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>振动与波</title>
    <link href="/2024/11/04/%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/"/>
    <url>/2024/11/04/%E6%8C%AF%E5%8A%A8%E4%B8%8E%E6%B3%A2/</url>
    
    <content type="html"><![CDATA[<h2 id="阻尼振动方程">阻尼振动方程</h2><p><span class="math display">\[\begin{split}&amp;f_阻=-\gamma v=-\gamma \frac{dx}{dt}\\&amp;m\frac{d^2x}{dt^2}=-\gamma\frac{dx}{dt}-kx\\&amp;令\beta=\frac{\gamma}{2m}\\&amp;\frac{dx^2}{dt^2}+2\beta\frac{dx}{dt}+\omega_0^2x=0\\\end{split}\]</span></p><h3 id="补充二阶微分方程">补充:二阶微分方程</h3><p><span class="math display">\[\begin{split}&amp;常系数二阶齐次线性方程:对于y^{``}+py^`+qy=0\\&amp;常系数二阶非齐次线性方程:对于y^{``}+py^`+qy=f(x)\\&amp;非常系数二阶齐次线性方程:y^{``}+P(x)y^`+Q(x)y=0\\&amp;非常系数二阶非齐次线性方程:y^{``}+P(x)y^`+Q(x)y=f(x)\\\end{split}\]</span></p><h4 id="常系数二阶齐次线性方程通解">常系数二阶齐次线性方程通解</h4><p><span class="math display">\[\begin{split}&amp;对于y^{``}+py^`+qy=0\\&amp;设方程:r^2+pr+q=0\\a)&amp;\Delta &gt;0,y=C_1e^{r_1}+C_2e^{r_2}\\b)&amp;\Delta =0,y=Ce^{x}+Cxe^{x}\\c)&amp;\Delta &lt;0,r=a\pm bi\\&amp;y=e^{ax}(C_1\cos(bx)+iC_2\sin(bx) )\\\end{split}\]</span></p><h4 id="朗斯基行列式">朗斯基行列式</h4><p><span class="math display">\[\begin{split}&amp;朗斯基行列式\\&amp;W(y_1,y_2)=\begin{vmatrix}&amp;y_1&amp;y_2\\&amp;y_1^`&amp;y_2^`\\\end{vmatrix}=y_1y_2^`-y_2y_1^`\\&amp;\frac{d^2y}{dx^2}+p\frac{dy}{dx}+qy=f(x)的特解:\\&amp;y_p(x)=-y_1(x)\int\frac{y_2(x)f(x)}{W(y_1,y_2)}dx+y_2(x)\int\frac{y_1(x)f(x)}{W(y_1,y_2)}dx\end{split}\]</span></p><h4 id="刘维尔公式">刘维尔公式</h4><p><span class="math display">\[\begin{split}&amp;对于方程:\\&amp;y^{``}+p(x)y^`+q(x)y=0\\&amp;y_1(x),y_2(x)是该方程的解,则C_1y_1(x)+C_2y_2(x)也是该方程的解\\\end{split}\]</span></p><p><span class="math display">\[\begin{align}&amp;令y_2=uy_1:\\y_2=uy_1&amp;\Leftrightarrow y_2^`=u^`y_1+uy_1^`\\&amp;\Leftrightarrow y_2^{``}=u^{``}y_1+2u^`y_1^`+uy_1^{``}\\\end{align}\]</span></p><p><span class="math display">\[\begin{split}&amp;u^{``}y_1+2u^`y_1^`+uy_1^{``}+p(x)(u^`y_1+uy_1^`)+q(x)uy_1=0\\&amp;解得:u=\int\frac{1}{y_1^2}\cdot e^{-\int pdx}dx\\&amp;另一个特解:y_2=y_1\int\frac{1}{y_1^2}e^{-\int pdx}dx(刘维尔公式)\\\end{split}\]</span></p><p><span class="math display">\[\begin{split}那么方程的解:y=C_1y+C_2y_1\int\frac{1}{y_1^2}e^{-\int pdx}dx\end{split}\]</span></p><blockquote><p>回到阻尼振动方程</p></blockquote><h3 id="阻尼振动方程-1">阻尼振动方程</h3><p><span class="math display">\[\begin{split}&amp;\frac{dx^2}{dt^2}+2\beta\frac{dx}{dt}+\omega_0^2x=0\\&amp;r^2+2\beta r+\omega_0^2=0\\&amp;\Delta=4\beta^2-4\omega_0^2\\&amp;这里我们要求阻尼较小,即\beta&lt;&lt;\omega_0,则\Delta &lt;0\\&amp;r=-\beta\pm\sqrt{\omega_0^2-\beta^2}\ i\\&amp;则解为:\\&amp;x=e^{-\betat}(C_1\cos(\sqrt{\omega_0^2-\beta^2}t)+C_2i\sin(\sqrt{\omega_0^2-\beta^2}t))\\&amp;可以得到x=A_0e^{-\beta t}\cos(\omega^`t+\phi),\omega^`=\sqrt{\omega_0-\beta^2}\\\end{split}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>Physics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>BUAA OOPre总结</title>
    <link href="/2024/11/01/BUAA%202024OOPre%E6%80%BB%E7%BB%93/"/>
    <url>/2024/11/01/BUAA%202024OOPre%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="buaa-2024-oopre总结">BUAA 2024 OOPre总结</h1><h2 id="架构设计">架构设计</h2><h3 id="最终架构">最终架构</h3><p>最终作业架构的设计如下(<code>Bouml</code>软件制作):</p><figure><img src="image-20241101173321658.png" alt="最终架构设计"><figcaption aria-hidden="true">最终架构设计</figcaption></figure><ul><li>主函数为<code>Main()</code>,调用<code>Solver</code>类</li><li><code>Solver</code>类接收输入,内含一个<code>ArrayList&lt;Adventurer&gt;</code>,通过输入调用对应函数对<code>ArrayList&lt;Adventurer&gt;</code>进行处理</li><li><code>Adventurer</code>类继承<code>Employer</code>,<code>Employee</code>接口</li><li><code>Adventurer</code>类拥有<code>Bottle</code>,<code>Equipment</code>,<code>Fragments</code>的组合,表示该冒险者拥有的药水瓶,装备,碎片</li><li><code>AdventurerGame</code>依赖于<code>Guard</code>接口,<code>Guard</code>接口由<code>Stn</code>,<code>Flm</code>,<code>Stn</code>,<code>Frz</code>,<code>Wnd</code>五种类(怪物)实现</li><li><code>TreasureFactory</code>依赖于<code>Treasure</code>接口,<code>Treasure</code>接口由<code>StnTreasure</code>,<code>FlmTreasure</code>,<code>StnTreasure</code>,<code>FrzTreasure</code>,<code>WndTreasure</code>五种类(宝物)实现</li></ul><h3 id="迭代调整">迭代调整</h3><ol type="1"><li>第三次作业实现了继承,将<code>Bottle</code>类实现为父类,<code>HpBottle</code>,<code>AtkBottle</code>,<code>DefBottle</code>类作为子类继承其方法</li><li>第五次作业新增<code>Fragment</code>类,并撰写了一个<code>Solver</code>类来处理输入,由于评测机的<code>JUnit</code>测试似乎不支持文件重定向,将<code>Solver</code>类调用的函数修改为以字符串为参数</li><li>第六次作业新增工厂模式生成<code>Treasure</code>类,观察者模式实现<code>Employee</code>与<code>Employer</code>接口</li></ol><h2 id="junit使用心得体会">JUnit使用心得体会</h2><p>在进行<code>JUnit</code>测试的过程中我们要实现两个目标:</p><ol type="1"><li>代码覆盖度高,这需要我们撰写出可以覆盖足够多情况的测试样例</li><li>排查代码隐患和错误,考虑足量多的极端情况,比如第六次作业中可能出现被雇佣人攻击雇佣人的情况,这时处理<code>normalFight</code>的顺序非常关键</li></ol><p><code>JUnit</code>可以降低对复杂指令的检查难度,例如<code>chainFight</code>中计算被攻击者的队列,我通过不同的输入样例确保了递归在次数为5会停止</p><p>在对<code>JUnit</code>的探索中,我认识到<code>assert</code>语句的重要性,它可以减少花在排查输出结果的时间</p><p><code>JUnit</code>还可以搭配自动化生成测试数据的程序,虽然不能和正确程序对拍,但是对于理解题目要求与测试覆盖率都有很大的帮助</p><h2 id="oopre心得体会">OOPre心得体会</h2><p>我从OOPre课程中学到了层次化设计,初步理解了面向对象思想,并掌握了<code>Git</code>,<code>Junit</code>等工具的使用</p><p>以我的理解,面向对象即把问题中所有的事物都"抽象"成"对象",通过封装,继承,多态的概念设计程序,这样的思路极大地提高了代码的可扩展性与可维护性,这些都是我在C语言中的学习中没有机会掌握的</p><p>另外,通过这门课,我的<code>debug</code>能力得到了很大的提升,通过使用<code>JUnit</code>和<code>BreakPoint</code>排查了很多错误</p><p>对代码的重构也是一件很重要的事,<code>checkstyle</code>在敲代码过程中会对重复代码和冗余的代码提出修改,如果重复出现在同一个类中,我们可以重复代码提出来作为一个单独的函数;冗余代码可以根据IDEA提示修改,例如删除一个<code>ArrayList</code>中元素的操作,<code>if (...) remove(...)</code>的代码段可以用一句<code>removeIf()</code>替代.这样,代码才能保持足够的清晰可读性和可维护性</p><h2 id="对oopre课程建议">对OOPre课程建议</h2><p>请加入互测功能</p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LeNet&amp;AlexNet</title>
    <link href="/2024/11/01/LeNet&amp;AlexNet/"/>
    <url>/2024/11/01/LeNet&amp;AlexNet/</url>
    
    <content type="html"><![CDATA[<h2 id="alexnet">AlexNet</h2><h3 id="第一层">第一层</h3><table><thead><tr class="header"><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr class="odd"><td>image(3X224X224)</td><td>image(32X32)</td><td></td></tr><tr class="even"><td>11X11 Conv(96), stride 4</td><td>5X5 Conv,PAD2</td><td></td></tr><tr class="odd"><td>3X3 MaxPool, stride 2</td><td>2x2 AvrgPool</td><td></td></tr></tbody></table><h3 id="第二层">第二层</h3><table><thead><tr class="header"><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr class="odd"><td>5X5 Conv(256),pad 2</td><td></td><td></td></tr><tr class="even"><td>3X3 MaxPooling,stride 2</td><td></td><td></td></tr><tr class="odd"><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr class="even"><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr class="odd"><td>3X3 Conv, pad 1</td><td></td><td></td></tr><tr class="even"><td>3X3 MaxPool, stride 2</td><td></td><td></td></tr></tbody></table><h3 id="第三层">第三层</h3><table><thead><tr class="header"><th>AlexNet</th><th>LeNet</th><th></th></tr></thead><tbody><tr class="odd"><td>Dense(4096)</td><td>Dense(84)</td><td></td></tr><tr class="even"><td>Dense(4096)</td><td>Dense(84)</td><td></td></tr><tr class="odd"><td>Dense(1000)</td><td>Dense(10)</td><td></td></tr></tbody></table><p>更多细节</p><ul><li>激活函数从Sigmoid变到了ReLu(减缓梯度消失)</li><li>隐藏全连接层后加入了丢弃层</li><li>数据增加</li></ul><p><span class="math display">\[\text{out}(N_i, C_{\text{out}_j}) = \text{bias}(C_{\text{out}_j}) +        \sum_{k = 0}^{C_{\text{in}} - 1} \text{weight}(C_{\text{out}_j},k) \star \text{input}(N_i, k)\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>深度学习</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>随机变量的数字特征</title>
    <link href="/2024/11/01/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81/"/>
    <url>/2024/11/01/%E9%9A%8F%E6%9C%BA%E5%8F%98%E9%87%8F%E7%9A%84%E6%95%B0%E5%AD%97%E7%89%B9%E5%BE%81/</url>
    
    <content type="html"><![CDATA[<blockquote><p><span class="math inline">\(X\simU(-\frac{1}{2},\frac{1}{2}),Y=g(X)=\begin{cases}lnX,X&gt;0,\\0,X\leq0\end{cases}\)</span></p></blockquote><p><span class="math inline">\(\begin{align}E(Y)=&amp;\int^{+\infty}_{\infty}g(x)f_X(x)dx\\=&amp;\int^{\frac{1}{2}}_{-\frac{1}{2}}g(x)\cdot1dx\\=&amp;\int^{\frac{1}{2}}_{0}\ln xdx\\=&amp;-\frac{1}{2}\ln 2-\frac{1}{2}\\\\E(Y^2)=&amp;\int^{+\infty}_{\infty}g^2(x)f_X(x)dx\\=&amp;\int^{\frac{1}{2}}_{0}\ln xdx\\=&amp;\frac{1}{2}\ln^2 2+1+\ln 2\\D(Y)=&amp;E(Y^2)-(E(Y))^2\end{align}\)</span></p><figure><img src="image-20241101101003214.png" alt="image-20241101101003214"><figcaption aria-hidden="true">image-20241101101003214</figcaption></figure><table><thead><tr class="header"><th><span class="math inline">\(X_i\)</span></th><th>1</th><th>0</th></tr></thead><tbody><tr class="odd"><td>P</td><td><span class="math inline">\(\frac{1}{n}\)</span></td><td><span class="math inline">\(1-\frac{1}{n}\)</span></td></tr></tbody></table><p><span class="math inline">\(E(X_i)=1\cdot \frac{1}{n}+0\cdot(1-\frac{1}{n})=\frac{1}{n}\)</span></p><p><span class="math inline">\(E(X)=\mathop{\Sigma} _{i=1}^{n}E(X_i)=1\)</span></p><p><span class="math inline">\(E(X^2)=E(\Sigma_{i=1}^{n}X_i)^2=\Sigma_{i=1}^nE(X_i^2)+2\Sigma_{1\leq i\leq j\leq n}^nE(X_iX_j)\)</span></p><table><thead><tr class="header"><th><span class="math inline">\(X_iX_j\)</span></th><th>1</th><th>0</th></tr></thead><tbody><tr class="odd"><td>P</td><td><span class="math inline">\(\frac{1}{n(n-1)}\)</span></td><td><span class="math inline">\(1-\frac{1}{n(n-1)}\)</span></td></tr></tbody></table><p><span class="math inline">\(E(X_iX_j)=\frac{1}{n(n-1)},i,j=1,2,...,n\)</span></p><p><span class="math inline">\(E(X_i^2)=\frac{1}{n},n=1,2,...,n\)</span></p><p><span class="math inline">\(E(X^2)=n\cdot \frac{1}{n}+2\cdotC^2_n\cdot \frac{1}{n(n-1)}=2\)</span></p><p><span class="math inline">\(D(x)=2-1=1\)</span></p><h2 id="标准化随机变量">标准化随机变量</h2><p>设随机变量X的期望E(X),方差D(X)都存在,且D(X)$<span class="math inline">\(0,称\)</span>X^=$为X的标准化随机变量</p><p><span class="math inline">\(E(X^\star)=0,D(X^\star)=1\)</span></p><blockquote><p>若已知分布的类型,及期望和方差,常能确定分布</p></blockquote><figure><img src="image-20241101102752881.png" alt="image-20241101102752881"><figcaption aria-hidden="true">image-20241101102752881</figcaption></figure><p><span class="math inline">\(\begin{align}&amp;\int^1_0(Ax^2+Bx)dx=\frac{A}{3}+\frac{B}{2}=1\\&amp;E(X)=\int^1_0x(Ax^2+Bx)dx=\frac{A}{4}+\frac{B}{3}=0.5\\\end{align}\)</span></p><p><span class="math inline">\(得到:A=-6,B=6\)</span></p><h2 id="协方差">协方差</h2><p><span class="math inline">\(E((X-E(X))(Y-E(Y))为随机变量X,Y的协方差\)</span></p><p><span class="math inline">\(记作\text{cov}(X,Y)=E(XY)-E(X)E(Y)\)</span></p><p>称<span class="math inline">\(\begin{bmatrix}D(X)&amp;\text{cov}(X,Y)\\\text{cov}(X,Y)&amp;D(Y)\end{bmatrix}\)</span></p><p>为(X,Y)的协方差矩阵</p><p><span class="math inline">\(\rho_{XY}=\frac{\text{cov}(X,Y)}{\sqrt{D(X)}\sqrt{D(Y)}}\)</span></p><p>事实上:<span class="math inline">\(\rho_{XY}=\text{cov}(X^\star,Y^\star)\)</span></p><blockquote><p>若<span class="math inline">\(\rho_{XY}=0\)</span>,则称X,Y不相关</p></blockquote><p><span class="math inline">\(\text{cov}(X,Y)=E((X-E(X))(Y-E(Y)))\\=E(XY)-E(X)E(Y)\)</span></p><p>X,Y相互独立$$X,Y不相关</p><figure><img src="image-20241101110908054.png" alt="image-20241101110908054"><figcaption aria-hidden="true">image-20241101110908054</figcaption></figure><p><span class="math inline">\(\begin{align}cov(U,V)=&amp;E(UV)-E(U)E(V)\\=&amp;E(a^2X^2-b^2Y^2)-[E(aX+bY)][E(aX-bY)]\\=&amp;a^2E(X^2)-b^2E(Y^2)-[a^2E^2(X)-b^2E^2(Y)]\\=&amp;a^2[E(X^2)-E^2(X)]-b^2[E(Y^2)-E^2(Y)]\\=&amp;a^2D(X)-b^2D(Y)\\=&amp;(a^2-b^2)\sigma^2\\D(U)=&amp;D(aX+bY)\\=&amp;a^2D(X)+b^2D(Y)=(a^2+b^2)\sigma^2\\D(Y)=&amp;(a^2+b^2)\sigma\\\rho_{UV}=&amp;\frac{cov(U,V)}{\sqrt {D(U)}\sqrt{D(V)}}\\=&amp;\frac{a^2-b^2}{a^2+b^2}\\\end{align}\)</span></p><h2 id="协方差的性质">协方差的性质</h2><ol type="1"><li><span class="math inline">\(cov(X,Y)=cov(Y,X)=E(XY)-E(X)E(Y)\)</span></li><li><span class="math inline">\(\text{cov}(aX,bY)=ab\text{cov}(X,Y)\)</span></li><li><span class="math inline">\(\text{cov}(X,X)=D(X)\)</span></li><li><span class="math inline">\(|\text{cov}(X,Y)|^2\leqD(X)D(Y)\)</span>当且仅当<span class="math inline">\(P(Y-E(Y)=t_0(X-E(X)))=1\)</span></li></ol><h3 id="cauchy-schwarz不等式">Cauchy-Schwarz不等式</h3><p><span class="math inline">\(|E(XY)|^2\leq E(X^2)E(Y^2)\)</span></p><p><span class="math inline">\(\begin{align}g(t)=&amp;E[(X-E(X))\cdot t-(Y-E(Y))]^2\\=&amp;E[(X-E(X))^2t^2-2(X-E(X))t(Y-E(Y))+(Y-E(Y))^2]\\=&amp;D(X)t^2-2\text{cov}(X,Y)+D(Y)\\\end{align}\)</span></p><p>对于任何实数<span class="math inline">\(t\)</span>,<span class="math inline">\(g(t)\geq 0\rightarrow4\text{cov}^2(X,Y)-4D(X)D(Y)\leq 0\)</span></p><p>即<span class="math inline">\(|cov(X,Y)|^2\leq D(X)D(Y)\)</span></p><p><span class="math inline">\(g(t_0)=0\)</span>时,有两个相等的实零点</p><p>等号成立,<span class="math inline">\(|cov(x,Y)|^2=D(X)D(Y)\)</span></p><p><span class="math inline">\(t_0=\pm\sqrt{\frac{D(Y)}{D(X)}}\)</span></p><p><span class="math inline">\(\begin{cases}E[(Y-E(Y))-t_0(X-E(X))]^2=0\\E[(Y-E(Y))-t_0(X-E(X))]=0\end{cases}\leftrightarrow\begin{cases}D[(Y-E(Y))-t_0(X-E(X))]=0\\E[(Y-E(Y))-t_0(X-E(X))=0]=1\end{cases}\)</span></p><p>若X,Y服从二维正态分布,<span class="math inline">\(X,Y相互独立\Leftrightarrow X,Y不相关\)</span></p><figure><img src="image-20241101115529133.png" alt="image-20241101115529133"><figcaption aria-hidden="true">image-20241101115529133</figcaption></figure><p><span class="math inline">\(\begin{align}&amp;E(X)=E(Y)=1,D(X)=D(Y)=4,\rho_{XY}=\frac{1}{2}\\&amp;cov(X,Y)=\rho_{XY}\sqrt{D(X)}\sqrt{D(Y)}=2\\&amp;cov(X,Z)=cov(X,X)+cov(X,Y)=D(X)+\rho_{XY}\sqrt{D(X)}\sqrt{D(Y)}\\&amp;=4+\frac{1}{2}\cdot\sqrt{4}\cdot \sqrt{4}=6\\&amp;D(Z)=D(X)+D(Y)+2cov(X,Y)=12\\&amp;\rho_{XZ}=\frac{\sqrt {3}}{2}\end{align}\)</span></p><h2 id="重要数学期望">重要数学期望</h2><p><span class="math inline">\(E(X^k)\)</span>X的k阶原点矩</p><p><span class="math inline">\(E(|X|^k)\)</span>X的k阶绝对原点矩</p><p><span class="math inline">\(E((X-E(X))^k)\)</span>X的k阶中心矩</p><h2 id="马尔可夫不等式">马尔可夫不等式</h2><p><span class="math inline">\(P(X\geq \varepsilon)\leq\frac{E(x)}{\varepsilon}\)</span></p><p><span class="math inline">\(证:P(X\geq\varepsilon)=\int^{+\infty}_{\varepsilon}f(x)dx\leq\int^{+\infty}_{\varepsilon}\frac{x}{\varepsilon}f(x)dx\\\leq\frac{1}{\varepsilon}\int^{+\infty}_0xf(x)dx=\frac{E(X)}{\varepsilon}\)</span></p><h3 id="推论1">推论1</h3><p><span class="math inline">\(P(|X|\geq\varepsilon)\leq\frac{E(|X|^k)}{\varepsilon^k}\)</span></p><h3 id="推论2-切比雪夫不等式">推论2 切比雪夫不等式</h3><p><span class="math inline">\(P(|X-E(X)|\geq \varepsilon)\leq\frac{D(X)}{\varepsilon^2}\)</span></p><p><span class="math inline">\(proof:P(|X-E(x)|\geq\varepsilon)=P(|X-E(x)|\geq \varepsilon^2)\\\leq\frac{E(|X-E(X)|^2)}{\varepsilon^2}=\frac{D(X)}{\varepsilon^2}\)</span></p><figure><img src="image-20241108101426956.png" alt="image-20241108101426956"><figcaption aria-hidden="true">image-20241108101426956</figcaption></figure><p><span class="math inline">\(X\simB(6000,\frac{1}{6})\\E(X)=1000\\D(X)=6000\times\frac{1}{6}\times\frac{5}{6}=\frac{5000}{6}\)</span></p><p><span class="math inline">\(P(|\frac{X}{6000}-\frac{1}{6}|&lt;0.01)=P(|X-6000|&lt;60)\\\geq1-\frac{\frac{5000}{6}}{60^2}=0.7685\)</span></p><h2 id="切比雪夫大数定律">切比雪夫大数定律</h2><p><span class="math inline">\(D(X_k)=\sigma^2_k\leqc,k=1,2,...\)</span></p><p>则有</p><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}D(\frac{1}{n}\mathop\Sigma\limits_{k=1}^nE(X_k))=0\)</span></p><p><span class="math inline">\(proof:E(\frac{1}{n}\mathop\Sigma\limits^n_{i=1}X_i)=\frac{1}{n}\mathop\Sigma\limits^n_{i=1}E(X_i)\\D(\frac{1}{n}\mathop\Sigma^n_{i=1}X_i)=\frac{1}{n^2}\mathop\Sigma^n_{i=1}D(X_i)=\frac{1}{n^2}\cdotnc\\=\frac{c}{n}\)</span></p><h3 id="定义">定义</h3><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}P(|Y_n-a|\geq \varepsilon)=0\\\lim\limits_{n\rightarrow\infty}P(|Y_n-a|&lt; \varepsilon)=1\)</span></p><p>记作<span class="math inline">\(Y_n\mathop\rightarrow\limits^P_{n\rightarrow\infty}a\)</span></p><h3 id="辛钦大数定律">辛钦大数定律</h3><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}(|\frac{1}{n}\mathop\Sigma\limits_{k=1}^nX_k-\mu|\geq\varepsilon)=0\)</span></p><h2 id="伯努利大数定律">伯努利大数定律</h2><p><span class="math inline">\(\lim\limits_{n\rightarrow \infty}P(|\frac{n_A}{n}-p|\geq \varepsilon)=0\)</span></p><h3 id="意义">意义</h3><p>回答了:为何能以某事件发生的概率作为事件的概率的估计</p><h2 id="独立同分布的中心极限定理">独立同分布的中心极限定理</h2><p><span class="math inline">\(随机变量序列X_1,X_2,...,X_n,...相互独立,\\服从同一分布,且有期望和方差:\\E(X_k)=\mu,D(X_k)=\sigma^2,k=1,2...\)</span></p><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}P(\frac{\mathop\Sigma\limits^{n}_{k=1}X_k-n\mu}{\sqrt{n}\sigma}\leqx)=\frac{1}{\sqrt{2\pi}}\int^x_{-\infty}e^{-\frac{t^2}{2}}dt\)</span></p><h2 id="德莫佛-拉普拉斯中心极限定理">德莫佛-拉普拉斯中心极限定理</h2><p><span class="math inline">\(Y_n\simB(n,p),0&lt;p&lt;1,n=1,2,...\)</span></p><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}P(\frac{Y_n-n\mu}{\sqrt{np(1-p)}}\leqx)=\frac{1}{\sqrt{2\pi}}\int^x_{-\infty}e^{-\frac{t^2}{2}}dt\)</span></p><p>即对任意的a&lt;b,</p><p><span class="math inline">\(\lim\limits_{n\rightarrow\infty}P(a&lt;\frac{Y_n-np}{\sqrt{np(1-p)}}\leqb)=\frac{1}{\sqrt{2\pi}}\int^b_ae^{-\frac{t^2}{2}}dt\)</span></p><p><span class="math inline">\(Y_n\sim N(np,np(1-p))(近似)\)</span></p><figure><img src="image-20241108114422370.png" alt="标准正态分布表"><figcaption aria-hidden="true">标准正态分布表</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>概率统计</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>指令流水线</title>
    <link href="/2024/10/30/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4/"/>
    <url>/2024/10/30/%E6%8C%87%E4%BB%A4%E6%B5%81%E6%B0%B4/</url>
    
    <content type="html"><![CDATA[<h1 id="指令流水线">指令流水线</h1><h2 id="指令流水">指令流水</h2><ol type="1"><li><p>取值</p></li><li><p>分析</p></li><li><p>执行</p></li><li><p>顺序执行方式,传统的冯诺依曼机采用顺序执行方式,又称为串行执行方式</p></li><li><p>一次重叠执行方式</p></li></ol><figure><img src="image-20241030161836112.png" alt="一次重叠"><figcaption aria-hidden="true">一次重叠</figcaption></figure><p>优点:执行时间缩短1/3,部件利用率提高</p><p>缺点:硬件上开销代价大,控制过程更为复杂</p><ol start="3" type="1"><li>二次重叠执行方式</li></ol><figure><img src="image-20241030162048191.png" alt="image-20241030162048191"><figcaption aria-hidden="true">image-20241030162048191</figcaption></figure><p>缩短近2/3(理想情况)</p><blockquote><p>我们可以将指令执行分为四或五个阶段,并且每个阶段利用的部件相互独立,则可以让CPU实现同时运行四/五条指令</p></blockquote><p>流水线的表示方法</p><ol type="1"><li>指令执行过程图</li></ol><p>​ <img src="image-20241030162415476.png" alt="image-20241030162415476"></p><ol start="2" type="1"><li>时空图</li></ol><figure><img src="image-20241030162435291.png" alt="image-20241030162435291"><figcaption aria-hidden="true">image-20241030162435291</figcaption></figure><h2 id="性能标准">性能标准</h2><p><strong>吞吐率</strong>:处理完成n个任务所用的时间为<span class="math inline">\(T_k\)</span>,<span class="math inline">\(TP=\frac{n}{T_K}\)</span></p><p><span class="math inline">\(TP_{max}=\frac{1}{\Delta t}\)</span></p><figure><img src="image-20241030162818987.png" alt="image-20241030162818987"><figcaption aria-hidden="true">image-20241030162818987</figcaption></figure><p><span class="math inline">\(0-k\Delta t\)</span>:装入时间</p><p><span class="math inline">\(k\Delta t-(k+n-1)\Delta t\)</span></p><p><strong>加速比</strong>:完成同样一批任务,不使用流水线所用的时间与所用流水线的时间之比</p><p><strong>效率</strong>:流水线的设备利用率</p><figure><img src="image-20241030163430255.png" alt="image-20241030163430255"><figcaption aria-hidden="true">image-20241030163430255</figcaption></figure><p><span class="math inline">\(n\rightarrow\infty时,E_{max}=1\)</span></p><h2 id="影响因素">影响因素</h2><figure><img src="image-20241030163719987.png" alt="机器周期的设置"><figcaption aria-hidden="true">机器周期的设置</figcaption></figure><blockquote><p>由经典MIPS架构提出的五阶段执行理念</p></blockquote><p>五阶段:</p><ol type="1"><li><strong>Instruction Fetch</strong>:取指令</li><li><strong>Instruction Decode</strong>:解码指令</li><li><strong>EXecute</strong>:执行指令</li><li><strong>Memory</strong>:访存</li><li><strong>Write Back</strong>:回写</li></ol><blockquote><p>为方便流水线的设计,将每个阶段的耗时取成一样,以最长耗时为准</p><p>为了保证各阶段之间数据的传递,我们在每个阶段之间需要增加一个缓冲寄存器(或称为锁存器),作用是保存本流水段的执行结果,提供给下一流水段使用</p></blockquote><p>影响因素</p><ol type="1"><li>结构相关(资源冲突)</li><li>数据相关(数据冲突)</li><li>控制相关(控制冲突)</li></ol><h3 id="结构相关">结构相关</h3><p>多条指令在同一时刻争用同一资源而形成的冲突称为结构相关</p><p>解决办法:</p><ol type="1"><li>后一指令暂停一周期</li><li>资源重复配置:数据存储器+指令存储器</li></ol><h3 id="数据相关">数据相关</h3><p>在一个程序中,存在必须等前一条指令执行完才能执行后一条指令的情况</p><p>解决办法:</p><ol type="1"><li>把遇到数据相关的指令及其后续指令都暂停一至几个时钟周期,直到数据相关问题消失后再继续执行,分为:<ol type="1"><li>硬件阻塞</li><li>软件插入<code>NOP</code></li></ol></li><li>数据旁路技术</li><li>编译优化:通过编译器调整指令顺序来解决数据相关</li></ol><h3 id="控制相关">控制相关</h3><p>当流水线遇到转移指令和其他改变PC值的指令而造成断流时,会引起控制相关</p><p>解决办法:</p><ol type="1"><li>转移指令分支预测</li><li>预取转移成功和不成功两个控制流方向上的目标指令</li><li>加快和提前形成条件码</li></ol><p>流水线的分类</p><ol type="1"><li>部件功能级,处理机级,处理机间级流水线</li><li>单功能流水线和多功能流水线</li><li>静态流水线和动态流水线</li></ol><figure><img src="image-20241030190211089.png" alt="数据通路"><figcaption aria-hidden="true">数据通路</figcaption></figure><p>集中式控制器</p><ul><li>控制器只集中实现在ID阶段</li><li>控制器产生全部的译码信号</li><li>流水所有的译码信号,直到其不再需要为止</li></ul><p>分布式控制器</p><ul><li>控制器分布实现在多个流水线阶段</li><li>每级控制器只产生该级功能部件相关的译码信号</li><li>流水指令,作为各级控制器的输入</li></ul><h2 id="多发技术">多发技术</h2><ol type="1"><li>超标量技术</li></ol><ul><li>每个时钟周期内可并发多条指令</li><li>要配置多个功能部件</li><li>不能调整指令的顺序</li></ul><ol start="2" type="1"><li>超流水技术</li></ol><ul><li>在一个时钟周期内再分段</li><li>在一个时钟周期内一个功能部件使用多次</li><li>不能调整指令的执行顺序</li><li>靠编译器解决优化问题</li></ul><ol start="3" type="1"><li>超长指令字</li></ol><h2 id="三控制器架构规划">三控制器架构规划</h2><h3 id="功能部件控制器">功能部件控制器</h3><h3 id="暂停控制器">暂停控制器</h3><h3 id="转发控制器">转发控制器</h3>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>次序关系</title>
    <link href="/2024/10/25/%E6%AC%A1%E5%BA%8F%E5%85%B3%E7%B3%BB/"/>
    <url>/2024/10/25/%E6%AC%A1%E5%BA%8F%E5%85%B3%E7%B3%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="次序关系">次序关系</h1><h2 id="偏序关系">偏序关系</h2><ul><li>自反,反对称,传递</li><li><span class="math inline">\(\leq\)</span>表示偏序关系,<span class="math inline">\(&lt;P,\leq\)</span>表示偏序结构</li><li>例:<span class="math inline">\(\lt N,\leq\gt,\lt N,\geq\gt,\ltP(A),\subseteq\gt,\lt I_+,|\gt\)</span></li></ul><h2 id="全序关系">全序关系</h2><ul><li>设<span class="math inline">\(\ltP,\leq\gt\)</span>是一个偏序结构,如果对于任意<span class="math inline">\(x,y\in P\)</span>,或者<span class="math inline">\(x\leq y\)</span>,或者<span class="math inline">\(y\leq x\)</span>,则称<span class="math inline">\(\leq\)</span>为P上的<strong>全序</strong>或线序,并称<span class="math inline">\(\ltP,\leq\gt\)</span>为<strong>全序结构</strong>或链</li><li><span class="math inline">\(\forall x\forall y(x\in P\wedge y\inP\rightarrow x\leq y\vee y\leq x)\)</span></li></ul><h2 id="可比">可比</h2><p>对于偏序集合<span class="math inline">\(\lt P,\leq\gt,x,y\inP\)</span>,如果有<span class="math inline">\(x\leq y\)</span>或者<span class="math inline">\(y\leq x\)</span>,就说P的元素x和y是可比的</p><h2 id="严格偏序关系拟序关系">严格偏序关系(拟序关系)</h2><ul><li><p>R是P上的<strong>严格偏序关系</strong>,当且仅当R是<strong>反自反的</strong>和<strong>传递的</strong></p></li><li><p>&lt;表示严格偏序关系,&lt;<span class="math inline">\(P,&lt;\)</span>&gt;为严格偏序(拟序)结构</p></li><li><p><span class="math inline">\(\lt=\leq-I_P\)</span></p></li></ul><h2 id="遮盖">遮盖</h2><p><span class="math inline">\(y遮盖x\Leftrightarrow x&lt;y\wedge \neg\exists (z\in P\wedge x&lt;z \wedge z&lt;y)\)</span></p><h2 id="哈斯图偏序结构图">哈斯图/偏序结构图</h2><p>偏序结构通常用<strong>简化的关系图</strong>来表示</p><h2 id="偏序结构中的特殊元素">偏序结构中的特殊元素</h2><p><span class="math display">\[\begin{align}&amp;\lt A,\leq\gt是偏序结构,并且B\subseteq A,则\\\\&amp;(1)b是B的最大元\Leftrightarrow b\in B\wedge \forall x(x\inB\rightarrow x\leq b)\\\\&amp;(2)b是B的最小元\Leftrightarrow b\in B\wedge \forall x(x\inB\rightarrow b\leq x)\\\\&amp;(3)b是B的极大元\Leftrightarrow \neg\exists x(x\in B\wedgeb&lt;x)\\\\  &amp;(4)b是B的极小元\Leftrightarrow \neg\exists x(x\in B\wedgex&lt;b)\\\\\end{align}\]</span></p><ul><li>B的最大元、最小元<strong>若存在,则唯一</strong></li><li>B的极大元、极小元若存在,不一定唯一</li><li>若B是<strong>有穷集</strong>,则B的极大元、极小元必存在,但B的最大元、最小元不一定存在</li></ul><h2 id="良序结构">良序结构</h2><ul><li>一个偏序结构<span class="math inline">\(\ltP,\leq\gt\)</span>,如果P的每一个非空子集都有一个<strong>最小元</strong>,则称<span class="math inline">\(\leq\)</span>为<strong>良序关系</strong></li><li><strong>每个良序结构都是全序结构</strong></li><li><strong>但并非每个全序结构都是良序的</strong></li></ul><h2 id="良序的充要条件">良序的充要条件</h2><h3 id="定理a">定理A</h3><p><span class="math display">\[\begin{align}&amp;若\leq为集合P上的偏序关系,则\leq为P上良序关系,当且仅当\\\\&amp;a.\leq 为P上的全序关系；\\\\&amp;b.P上的每个非空子集都有极小元。\\\\\end{align}\]</span></p><h3 id="定理b">定理B</h3><p><span class="math display">\[\begin{align}&amp;设\lt A,\leq\gt为全序结构,则\ltA,\leq\gt是良序结构的充分必要条件是:\\\\&amp;不存在A中元素的无穷序列a_0,a_1,a_2,...,使得对每个i\inN,皆有a_{i+1}&lt;a_i\\\\\end{align}\]</span></p><h2 id="等价关系">等价关系</h2><blockquote><p>如果集合A上的关系R是自反,对称,传递的,则R在A上是<strong>等价关系</strong></p></blockquote><h3 id="等价类">等价类</h3><blockquote><p>设R是集合A上的等价关系,对于每个x<span class="math inline">\(\in\)</span>A,A中与x有关系R的元素的集合称为<strong>x关于R的等价类</strong>,简称为x的等价类,记作<span class="math inline">\([x]_R\)</span></p></blockquote><p><span class="math display">\[ [x]_R=\{y|y\in A\wedge x R y\}\\\\[x]_R\subseteq A\]</span></p><h3 id="定理">定理</h3><p><span class="math display">\[\begin{align}&amp;R是非空集合A上的等价关系,则有:\\\\&amp;(1)对于每个x\in A,x\in [x]_R,即[x]_R是A的非空子集\\\\&amp;(2)[x]_R=[y]_R当且仅当xRy\\\\&amp;(3)若x, y\in A且x \bar Ry,则[x]_R\cap [y]_R=\emptyset\\\\&amp;(4)\mathop{\bigcup}\limits_{x\in A}[x]_R=A\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;(4)证明:\forall x\in A,x\in[x]_R,则x\in\mathop{\bigcup}\limits_{x\in A}[x]_R\\\\&amp;\forall x\in A,则[x]_R\subseteq A,所以\mathop{\bigcup}\limits_{x\inA}[x]_R\subseteq A\\\\&amp;故\mathop{\bigcup}\limits_{x\in A}[x]_R=A\\\\\end{align}\]</span></p><h3 id="商集">商集</h3><blockquote><p>R是A上的等价关系,所有等价类组成的集合称为A关于R的商集,记作A/R</p><p>例如A={1,2,3,4,5,6,7},A/R={ {1,4,7}, {2,5}, {3,6} }</p><figure><img src="image-20241025082644058.png" alt="模3同余关系图"><figcaption aria-hidden="true">模3同余关系图</figcaption></figure></blockquote><p><span class="math display">\[\begin{align}&amp;A/R=\{[x]_R|x\in A\}\end{align}\]</span></p><h2 id="划分">划分</h2><p><span class="math display">\[\begin{align}&amp;设A是非空集合,\pi\subseteq\rho(A),若\pi满足以下三个条件,则称\pi为A上的一个划分:\\\\&amp;(1)对于每个S\in \pi,S=\emptyset\\\\&amp;(2)对于任意B,C\in \pi,若B\neq C,B\cap C=\emptyset\\\\&amp;(3)\cup \pi =A\\\\&amp;\pi中的元素称为划分块,\pi中划分块的个数称为秩\\\\&amp;有穷个划分快的划分称为有穷划分,否则称为无穷划分\end{align}\]</span></p><h3 id="定理-1">定理</h3><blockquote><p>非空集合A上的等价关系R,决定了A上的一个划分,即商集A/R</p></blockquote><h3 id="定理-2">定理</h3><blockquote><p>设<span class="math inline">\(\pi\)</span>是非空集合A上的一个划分,若令:</p><p><span class="math inline">\(R_\pi=\{\lt x,y\gt|存在S\in \pi使得x,y\inS\}\)</span></p><p>则<span class="math inline">\(R_\pi\)</span>必是A上的等价关系且<span class="math inline">\(A/R_\pi=\pi\)</span></p></blockquote><p><span class="math display">\[\begin{align}&amp;\pi=\{C_1,C_2,...,C_n\}\\\\&amp;R_\pi=(C_1\times C_1)\cup (C_2\times C_2)\cup...\cup(C_n\timesC_n)\\\\\end{align}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>有序偶和笛卡尔乘积</title>
    <link href="/2024/10/25/%E6%9C%89%E5%BA%8F%E5%81%B6%E5%92%8C%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/"/>
    <url>/2024/10/25/%E6%9C%89%E5%BA%8F%E5%81%B6%E5%92%8C%E7%AC%9B%E5%8D%A1%E5%B0%94%E4%B9%98%E7%A7%AF/</url>
    
    <content type="html"><![CDATA[<h1 id="有序偶和笛卡尔乘积">有序偶和笛卡尔乘积</h1><h2 id="有序偶">有序偶</h2><h3 id="定义">定义</h3><blockquote><p>任给两个对象 x 和y,将它们按规定的顺序构成的序列,称之为有序偶，记为&lt;x,y &gt;</p><p>其中,x 称为有序偶的第一元,y 称为第二元</p></blockquote><h3 id="表示方法">表示方法</h3><p>Kuratovski提出了一种有序偶的集合表示:<span class="math inline">\(\lta,b\gt= \{ \{a\}, \{a,b\} \}\)</span></p><h3 id="定理">定理</h3><p><span class="math display">\[\begin{align}&amp;唯一性定理:&lt;u,v&gt;=&lt;x,y&gt;\ \ iff\ \ u=x\wedge v = y\\\\&amp;证明:\\\\(充分性)&amp;u=x,v=y时,有\{u\}=\{x\},\{u,v\}=\{x,y\}\\\\&amp;因此\{\{u\},\{u,v\}\}=\{\{x\},\{x,y\}\}\\\\&amp;即&lt;u,v&gt;=&lt;x,y&gt;\\\\(必要性)&amp;分情况讨论:\\\\&amp;(1)设u=v\\\\&amp;因为&lt;u,v&gt;=\{\{u\},\{u,v\}\}=\\\\&amp;&lt;u,v&gt;=&lt;x,y&gt;=\{\{x\},\{x,y\}\}\\\\&amp;所以u=x=y\\\\&amp;u=x,v=y\\\\&amp;(2)设u\neq v\\\\&amp;\because\{\{u\},\{u,v\}\}=\{\{x\},\{x,y\}\}\\\\&amp;\therefore\{u\}=\{x\},\{u,v\}\}=\{x,y\}\\\\&amp;\therefore u=x,v=y\\\\&amp;\end{align}\]</span></p><h2 id="笛卡尔乘积">笛卡尔乘积</h2><h3 id="定义-1">定义</h3><p><span class="math display">\[ A\times B=\{&lt;x,y&gt;|x\in A\wedgey\in B\} \]</span></p><h3 id="性质">性质</h3><ol type="1"><li>不满足交换律</li><li>不满足结合律</li><li>当<span class="math inline">\(A=\emptyset\)</span>或<span class="math inline">\(B=\emptyset\)</span>时,<span class="math inline">\(A\times B=\emptyset\)</span></li><li><span class="math inline">\(\sharp(A\times B)=\sharp A\cdot\sharpB\)</span></li></ol><h3 id="定理-1">定理</h3><p><span class="math display">\[\begin{align}&amp;A\times B=\emptyset\ \ iff\ \ A=\emptyset或 B=\emptyset\\\\&amp;证明:只需证明A\times B\neq \emptyset\ \ iff\ \ A\neq \emptyset且B\neq\emptyset\\\\&amp;\because A \neq \emptyset,B\neq \emptyset\\\\&amp;\therefore 设x\in A,y\in B\\\\&amp;\therefore&lt;x,y&gt;\in A\times B\\\\&amp;\therefore A\times B\neq \emptyset\\\\\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;设A,B,C,D为任意四个非空集合,则\\\\&amp;A\times B\subseteq C\times D\ \ iff\ \ A\subseteq C且B\subseteqD\\\\&amp;证明:(充分性)任取x\in A,由于B\neq \emptyset,可取b\in B\\\\&amp;&lt;x,b&gt;\in A\times B\\\\&amp;因A\times B\subset C\times D\\\\&amp;&lt;x,b&gt;\in C\times D\\\\&amp;则x\in C,故A\subseteq C\\\\&amp;同理:B\subseteq D\\\\&amp;(必要性)任取&lt;a,b&gt;\in A\times B\\\\&amp;则a\in A且b\in B\\\\&amp;由A\subseteq C,B\subseteq D\\\\&amp;则a\in C,b\in D\\\\&amp;&lt;a,b&gt;\in C\times D\\\\&amp;A\times B\subseteq C\times D\\\\\end{align}\]</span></p><h2 id="关系">关系</h2><h3 id="定义-2">定义</h3><p><span class="math display">\[\begin{align}&amp;关系的定义:\\\\&amp;R\subseteq X\times Y\\\\&amp;&lt;x,y&gt;\in R\Rightarrow x\ R\ y\\\\&amp;&lt;x,y&gt;\notin R\Rightarrow x\ \bar{R}\ y\end{align}\]</span></p><p>$$ <span class="math display">\[\begin{align}&amp;全域关系U_x=\{&lt;x_i,x_j&gt;|x_i,x_j\in X\}=X\times X\\\\&amp;恒等关系I_x=\{&lt;x,x&gt;|x\in X\}\end{align}\]</span></p><p>$$</p><p><span class="math display">\[\begin{align}&amp;定义域dom(R)=\{x\in X|\exists y\in Y:&lt;x,y&gt;\in R\}\\\\&amp;值域ran(R)=\{y\in Y|\exists x\in X:&lt;x,y&gt;\in R\}\\\\&amp;dom(R)\subseteq X,ran(R)\subseteq Y\\\\\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;R的关系矩阵M_R=(r_{ij})_{m\times n}\\\\&amp;r_{ij}=\begin{cases}0\,\,若x_i\bar{R}y_i\\\\1\,\,若x_iRy_i\end{cases}\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;R=\{&lt;x_1,y_1&gt;,&lt;x_2,y_1&gt;,&lt;x_2,y_2&gt;,&lt;x_2,y_3&gt;\}\\\\&amp;关系矩阵为\begin{bmatrix}1&amp;0&amp;0\\\\1&amp;1&amp;1\\\\\end{bmatrix}\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;R自反\Leftrightarrow \forall x(x\in X\rightarrow &lt;x,x&gt;\inR)\\\\&amp;在R的关系图中,每个顶点均有自环\\\\&amp;R的关系矩阵中,主对角线元素均为1\\\\\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;反自反\Leftrightarrow \\\\&amp;\forall x(x\in X\rightarrow &lt;x,x&gt;\notin R)\\\\\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;对称矩阵:\forall x\forall y(x\in X\wedge y\in Y\wedge&lt;x,y&gt;\in R\rightarrow &lt;y,x&gt;\in R)\\\\&amp;在R的关系图中,任意两个不同顶点之间:或者无弧,或者有两条方向相反的弧\\\\&amp;关系矩阵为对称矩阵\\\\\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;R是反对称的\Leftrightarrow \forall x\forall y(x\in X\wedge y\inY\wedge &lt;x,y&gt;\in R\wedge &lt;y,x&gt;\in R\rightarrow x=y)\\\\&amp;\Leftrightarrow\forall x\forall y(x\in X\wedge y\in Y\wedge&lt;x,y&gt;\in R\rightarrow &lt;y,x&gt;\notin R)\\\\&amp;在R的关系图中,任意不同顶点之间至多有一条弧\\\\&amp;R矩阵中,若i\neq j且iRj,则j\bar{R}i\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;R是传递的 \Leftrightarrow \forall x\forall y\forall z\\\\&amp;(x\inX\wedge y\in X\wedge z\in X\wedge &lt;x,y&gt;\in R\wedge &lt;y,z&gt;\inR\rightarrow &lt;x,z&gt;\in R)\end{align}\]</span></p><p><span class="math display">\[\begin{align}&amp;A有n个元素\\\\&amp;自反关系:2^{n^2-n}\\\\&amp;反自反关系:2^{n^2-1}\\\\&amp;对称关系:2^{\frac{n(n+1)}{2}}\\\\&amp;反对称关系:2^n\times3^{\frac{n(n-1)}{2}}\end{align}\]</span></p><h2 id="习题2.1.9">习题2.1.9</h2><h3 id="a">a)</h3><blockquote><p><span class="math inline">\(dom(U\mathscr A)=\cup\{domR|R\in \mathscrA\}\)</span></p></blockquote><h3 id="b">b)</h3><blockquote><p><span class="math inline">\(ran(U\mathscr A)=\cup\{ranR|R\in \mathscrA\}\)</span></p></blockquote><h2 id="三序偶的理解">三序偶的理解</h2><p><span class="math display">\[\begin{align}&lt;a,b,c&gt;=&amp;&lt;&lt;a,b&gt;,c&gt;\\\\=&amp;&lt;\{\{a\},\{a,b\}\},c&gt;\\\\=&amp;\{\{\{\{a\},\{a,b\}\}\},\{\{\{a\},\{a,b\}\},c\}\} \\\\\neq&amp; \{\{a\},\{a,b\},\{a,b,c\}\}\end{align}\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>discrete mathematics</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>递归下降</title>
    <link href="/2024/10/24/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D/"/>
    <url>/2024/10/24/%E9%80%92%E5%BD%92%E4%B8%8B%E9%99%8D/</url>
    
    <content type="html"><![CDATA[<h2 id="grammer文法">Grammer文法</h2><h3 id="lex词法">Lex词法</h3><blockquote><p>语言中的词汇及其属性和含义的规则</p></blockquote><p><span class="math display">\[&lt;var\_name&gt;\rightarrow&lt;letter&gt;|&lt;letter&gt;&lt;var\_name&gt;\\&lt;letter&gt;\rightarrow a^`|b^`|...|z^`\]</span></p><p><span class="math display">\[&lt;&gt;标识语法成分的边界\\\rightarrow表示左侧部分由右侧部分的具体规则组合而成\\|表示规则可以从其两侧提供的任意选项中选取\\变量名定义为:有至少一个(大于0个)小写字母组成的字符串\\\]</span></p><h3 id="syntax-语法">Syntax 语法</h3><blockquote><p>描述语言中句子结构和组织方式的规则</p></blockquote><h2 id="词法语法分析">词法&amp;语法分析</h2><h3 id="lexer-词法分析">Lexer 词法分析</h3><h4 id="token">Token</h4><blockquote><p>文本的最小语法单元,试译作"语素"</p></blockquote><h3 id="parser-语法分析">Parser 语法分析</h3><p><span class="math display">\[Expr&lt;表达式&gt;\rightarrow &lt;项&gt;|&lt;项&gt;+&lt;表达式&gt;\\Term&lt;项&gt;\rightarrow &lt;因子&gt;|&lt;因子&gt;*&lt;项&gt;\\Factor&lt;因子&gt;\rightarrow &#39;i&#39;\]</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>单周期CPU设计文档</title>
    <link href="/2024/10/23/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/"/>
    <url>/2024/10/23/%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%BE%E8%AE%A1%E6%96%87%E6%A1%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="cpu-设计文档">CPU 设计文档</h1><h2 id="整体架构">整体架构</h2><figure><img src="image-20241022231853793.png" alt="整体架构"><figcaption aria-hidden="true">整体架构</figcaption></figure><h2 id="部件">部件</h2><h3 id="pcprogram-counter">PC(Program Counter)</h3><blockquote><p>程序计数器,用于指示指令的位置.</p><p>主体为一个寄存器,用于存储指令地址,在时钟上升沿时输出到PC`</p></blockquote><figure><img src="image-20241022185634323.png" alt="PC"><figcaption aria-hidden="true">PC</figcaption></figure><h3 id="iminsturction-memory">IM(Insturction Memory)</h3><blockquote><p>指令存储器,存储指令内容.</p><p>主体为一个ROM,通过PC输入地址,将PC所对应的指令输出到Instr.</p></blockquote><figure><img src="image-20241022190043406.png" alt="IM"><figcaption aria-hidden="true">IM</figcaption></figure><h3 id="dmdata-memory">DM(Data Memory)</h3><blockquote><p>数据存储器,与CPU直接交换数据的内部存储器</p><p>主体为一个RAM,即可读又可写,WE为1时,将WD数据写入到A地址;WE为0时,读出WD地址对应数据到RD</p></blockquote><figure><img src="image-20241022231940141.png" alt="DM"><figcaption aria-hidden="true">DM</figcaption></figure><h3 id="grfregister-file">GRF(Register File)</h3><blockquote><p>CPU内部的寄存器堆</p><p>有32个32位寄存器,通过A1/A2选择寄存器读出到RD1/RD2,通过A3选择寄存器写入数据WD3</p></blockquote><figure><img src="image-20241022190555004.png" alt="GRF"><figcaption aria-hidden="true">GRF</figcaption></figure><h3 id="aluarithmetic-and-logical-unit">ALU(Arithmetic and LogicalUnit)</h3><blockquote><p>计算单元,支持多种计算操作</p><p>由SrcA与SrcB读入两个操作数,通过ALUControl选择计算类型,输出到ALUResult</p></blockquote><figure><img src="image-20241022232019925.png" alt="ALU"><figcaption aria-hidden="true">ALU</figcaption></figure><h3 id="sptsplitter">SPT(Splitter)</h3><blockquote><p>分线器,分割指令的不同位</p></blockquote><figure><img src="image-20241022190810134.png" alt="SPT"><figcaption aria-hidden="true">SPT</figcaption></figure><h3 id="extextender">EXT(Extender)</h3><blockquote><p>扩位器,当ExtControl为0时,将输入的立即数由16位有符号扩展变为32位;当ExtControl为1时,将输入的立即数由16位零扩展变为32位</p></blockquote><figure><img src="image-20241022232119130.png" alt="EXT"><figcaption aria-hidden="true">EXT</figcaption></figure><h3 id="nxtadnext-address">NXTAD(Next Address)</h3><blockquote><p>用于计算PC输入的下一个指令地址</p></blockquote><figure><img src="image-20241022232220391.png" alt="NXTAD"><figcaption aria-hidden="true">NXTAD</figcaption></figure><h3 id="cucontrol-unit">CU(Control Unit)</h3><blockquote><p>控制单元,通过输入指令,决定输出信号</p></blockquote><figure><img src="image-20241022232239176.png" alt="CU"><figcaption aria-hidden="true">CU</figcaption></figure><h2 id="alu信号表">ALU信号表</h2><table><thead><tr class="header"><th>ALUControl信号</th><th>操作</th></tr></thead><tbody><tr class="odd"><td>000</td><td>与</td></tr><tr class="even"><td>001</td><td>或</td></tr><tr class="odd"><td>010</td><td>加</td></tr><tr class="even"><td>011</td><td>覆盖高位</td></tr><tr class="odd"><td>110</td><td>减</td></tr><tr class="even"><td>111</td><td>移位</td></tr></tbody></table><h2 id="cu信号表">CU信号表</h2><table style="width:100%;"><thead><tr class="header"><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th>ExtControl</th></tr></thead><tbody><tr class="odd"><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr class="even"><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr class="odd"><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td>0</td></tr><tr class="even"><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr class="odd"><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr class="even"><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr class="odd"><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>X</td></tr><tr class="even"><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td>0</td></tr><tr class="odd"><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>0</td></tr><tr class="even"><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td>0</td></tr><tr class="odd"><td>ori</td><td>1</td><td>0</td><td>001</td><td>X</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr class="even"><td>lui</td><td>1</td><td>0</td><td>011(高位覆盖)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td>1</td></tr><tr class="odd"><td>nop</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td><td>X</td></tr></tbody></table><h2 id="测试方案">测试方案</h2><h3 id="撰写mips测试文件">撰写MIPS测试文件</h3><blockquote><p>使用<code>ori,nop,add,sub,lw,sw,</code>撰写一个测试用MIPS文件.</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs assembly">ori $0, $0, 10<br>ori $1, $0, 11<br>ori $2, $0, 22<br>ori $3, $0, 40<br>ori $4, $0, 2000<br>ori $5, $4, 12<br><br>nop<br>nop<br>nop<br><br>add $6, $5, $4<br>add $7, $6, $2<br>add $8, $7, $1<br>add $9, $8, $0<br>add $10, $0, $3<br><br>sw $0, 0($10)<br>sw $1, 4($10)<br>sw $2, 8($10)<br><br>nop<br>nop<br>nop<br><br><br>lw $11, 0($10)<br>lw $12, 0($10)<br>lw $13, 0($10)<br><br>sub $14, $10, $0<br>sub $15, $14, $1<br>sub $16, $15, $2<br><br>lui $17, 0xffff<br>lui $18, 0x4fff<br>lui $19, 0x1<br>lui $20, 0x223<br><br>ori $21, $21, 1<br>ori $22, $22, 1<br>loop:<br>sub $22, $22, $4<br>beq $21, $22, loop<br></code></pre></td></tr></table></figure><h3 id="使用mars获得机器码">使用MARS获得机器码</h3><blockquote><p>将MIPS代码输入MARS中,将文件机器码以十六进制格式导出,并在文件开头添加<code>v2.0 raw</code>.</p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">3400000</span>a<br><span class="hljs-number">3401000</span>b<br><span class="hljs-number">34020016</span><br><span class="hljs-number">34030028</span><br><span class="hljs-number">340407d0</span><br><span class="hljs-number">3485000</span>c<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00a43020</span><br><span class="hljs-number">00c23820</span><br><span class="hljs-number">00e14020</span><br><span class="hljs-number">01004820</span><br><span class="hljs-number">00035020</span><br>ad400000<br>ad410004<br>ad420008<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">8d4b0000</span><br><span class="hljs-number">8d4c0000</span><br><span class="hljs-number">8d4d0000</span><br><span class="hljs-number">01407022</span><br><span class="hljs-number">01c17822</span><br><span class="hljs-number">01e28022</span><br><span class="hljs-number">3</span>c11ffff<br><span class="hljs-number">3</span>c124fff<br><span class="hljs-number">3c130001</span><br><span class="hljs-number">3c140223</span><br><span class="hljs-number">36b50001</span><br><span class="hljs-number">36d60001</span><br><span class="hljs-number">02c4b022</span><br><span class="hljs-number">12</span>b6fffe<br>v2.<span class="hljs-number">0</span> raw<br><span class="hljs-number">3400000</span>a<br><span class="hljs-number">3401000</span>b<br><span class="hljs-number">34020016</span><br><span class="hljs-number">34030028</span><br><span class="hljs-number">3</span>c01ffff<br><span class="hljs-number">3421</span>ffff<br><span class="hljs-number">00012025</span><br><span class="hljs-number">3485000</span>c<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00a43020</span><br><span class="hljs-number">00c23820</span><br><span class="hljs-number">00e14020</span><br><span class="hljs-number">01004820</span><br><span class="hljs-number">00035020</span><br>ad400000<br>ad410004<br>ad420008<br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">8d4b0000</span><br><span class="hljs-number">8d4c0000</span><br><span class="hljs-number">8d4d0000</span><br><span class="hljs-number">01407022</span><br><span class="hljs-number">01c17822</span><br><span class="hljs-number">01e28022</span><br><span class="hljs-number">3</span>c11ffff<br><span class="hljs-number">3</span>c124fff<br><span class="hljs-number">3c130001</span><br><span class="hljs-number">3c140223</span><br><span class="hljs-number">36b50001</span><br><span class="hljs-number">36d60001</span><br><span class="hljs-number">02c4b022</span><br><span class="hljs-number">12</span>b6fffe<br></code></pre></td></tr></table></figure><h3 id="比对mars与logisim模拟cpu的寄存器">比对MARS与Logisim模拟CPU的寄存器</h3><blockquote><p>经过测试,两者结果相符</p></blockquote><figure><img src="image-20241023000916439.png" alt="image-20241023000916439"><figcaption aria-hidden="true">image-20241023000916439</figcaption></figure><figure><img src="image-20241023000930000.png" alt="image-20241023000930000"><figcaption aria-hidden="true">image-20241023000930000</figcaption></figure><h3 id="比对dm">比对DM</h3><p>Logisim中DM导出结果:</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v2</span>.<span class="hljs-number">0</span> raw<br><span class="hljs-attribute">11</span>*<span class="hljs-number">0</span> b <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><p>Mars中的结果为:</p><figure><img src="image-20241023000652564.png" alt="image-20241023000652564"><figcaption aria-hidden="true">image-20241023000652564</figcaption></figure><h3 id="python自动化测试">Python自动化测试</h3><h4 id="mars-memory文件导出方式">Mars Memory文件导出方式</h4><blockquote><p>通过<code>File-Dump Memory to File</code>,MemorySegment选择<code>.data</code>,DumpFormat选择<code>Hexadecimal Text</code></p></blockquote><figure class="highlight dns"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs dns"><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">00000000</span><br><span class="hljs-number">0000000</span>b<br><span class="hljs-number">00000016</span><br><span class="hljs-number">00000000</span><br>...<br><span class="hljs-number">00000000</span><br></code></pre></td></tr></table></figure><h4 id="logisim-memory文件导出方式">Logisim Memory文件导出方式</h4><blockquote><p>右键RAM,选择<code>save image</code></p></blockquote><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">v2</span>.<span class="hljs-number">0</span> raw<br><span class="hljs-attribute">11</span>*<span class="hljs-number">0</span> b <span class="hljs-number">16</span><br></code></pre></td></tr></table></figure><h4 id="python测试文件">Python测试文件</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs python">mips_path = <span class="hljs-string">&quot;mips.txt&quot;</span><br>logisim_path = <span class="hljs-string">&quot;logisim.txt&quot;</span><br><br>mips_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;mips.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br>logisim_file = <span class="hljs-built_in">open</span>(<span class="hljs-string">&quot;logisim.txt&quot;</span>, <span class="hljs-string">&quot;r&quot;</span>)<br><br>mips_mem = []<br>lines = mips_file.readlines()<br><span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> lines:<br>    line = line.removesuffix(<span class="hljs-string">&quot;\n&quot;</span>)<br>    mips_mem.append(<span class="hljs-built_in">int</span>(line, <span class="hljs-number">16</span>))<br><br>logisim_mem = [<span class="hljs-number">0</span>] * <span class="hljs-built_in">len</span>(mips_mem)<br>lines2 = logisim_file.readlines()<br>line = lines2[<span class="hljs-number">1</span>]<br>line = line.removesuffix(<span class="hljs-string">&quot;\n&quot;</span>)<br>index = <span class="hljs-number">0</span><br><span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> line.split(<span class="hljs-string">&quot; &quot;</span>):<br>    <span class="hljs-built_in">print</span>(s)<br>    <span class="hljs-keyword">if</span> <span class="hljs-string">&quot;*&quot;</span> <span class="hljs-keyword">in</span> s:<br>        <span class="hljs-comment"># cnt为10进制,value为16进制</span><br>        cnt, value = s.split(<span class="hljs-string">&quot;*&quot;</span>)<br>        cnt = <span class="hljs-built_in">int</span>(cnt)<br>        value = <span class="hljs-built_in">int</span>(value, <span class="hljs-number">16</span>)<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(cnt):<br>            logisim_mem[index] = value<br>            index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">else</span>:<br>        value = <span class="hljs-built_in">int</span>(s, <span class="hljs-number">16</span>)<br>        logisim_mem[index] = value<br>        index += <span class="hljs-number">1</span><br><br>flag = <span class="hljs-literal">True</span><br><span class="hljs-keyword">for</span> x, y <span class="hljs-keyword">in</span> <span class="hljs-built_in">zip</span>(logisim_mem, mips_mem):<br>    <span class="hljs-keyword">if</span> x != y:<br>        flag = <span class="hljs-literal">False</span><br><br><span class="hljs-built_in">print</span>(logisim_mem)<br><span class="hljs-built_in">print</span>(mips_mem)<br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Two documents is the same!!!&quot;</span> <span class="hljs-keyword">if</span> flag == <span class="hljs-literal">True</span> <span class="hljs-keyword">else</span> <span class="hljs-string">&quot;Two documents is different!!!&quot;</span>)<br></code></pre></td></tr></table></figure><h2 id="思考题">思考题</h2><ol type="1"><li><p>上面我们介绍了通过 FSM 理解单周期 CPU的基本方法。请大家指出单周期 CPU所用到的模块中，哪些发挥状态存储功能，哪些发挥状态转移功能。</p><blockquote><p><code>IM,GRF,DM</code>发挥状态存储功能,<code>PC</code>发挥状态,<code>EXT,NXTAD,ALU,CU</code>发挥状态转移功能</p></blockquote></li><li><p>现在我们的模块中 IM 使用 ROM， DM 使用 RAM， GRF 使用Register，这种做法合理吗？ 请给出分析，若有改进意见也请一并给出。</p><blockquote><p>合理,<code>IM</code>作为指令存储器,只需要在运行前导入指令集,在运行中不会修改,应当使用<code>ROM</code>;</p><p><code>DM</code>是数据存储器,在涉及<code>lw,sw</code>的指令中会发生读取和写入操作,应当使用<code>RAM</code>;</p><p><code>GRF</code>作为<code>CPU</code>内部存储,每次只会存储一个数,并且需要实现读取和写入,应当用<code>Register</code>.</p><p>改进方式:<code>IM</code>,<code>DM</code>加入片选逻辑</p></blockquote></li><li><p>在上述提示的模块之外，你是否在实际实现时设计了其他的模块？如果是的话，请给出介绍和设计的思路。</p><blockquote><p><code>NXTAD</code>(Next Address Module),用于计算下一个指令的地址.</p><p><code>NXTAD</code>需要处理两种情况:一种是正常的通过地址+4获得新地址;另一种是在<code>beq</code>指令中跳转到特定地址.</p><p>我们使用<code>Branch</code>,<code>Zero</code>作为控制信号:输入指令为<code>beq</code>时,<code>Branch</code>置1,若指令中的两个寄存器值相等,则<code>Zero</code>置1.当<code>Branch</code>与<code>Zero</code>均为1时,<code>NXTAD</code>模块处理后一种情况,否则为前一种.</p></blockquote></li><li><p>事实上，实现 <code>nop</code>空指令，我们并不需要将它加入控制信号真值表，为什么？</p><blockquote><p><code>nop</code>不改变任何寄存器或者<code>Data Memory</code>的值,不会产生任何影响,我们无需写入或读取数据</p></blockquote></li><li><p>阅读 Pre 的 <a href="http://cscore.buaa.edu.cn/tutorial/mips/mips-6/mips6-1/">“MIPS指令集及汇编语言”</a>一节中给出的测试样例，评价其强度（可从各个指令的覆盖情况，单一指令各种行为的覆盖情况等方面分析），并指出具体的不足之处。</p><blockquote><p>对<code>ori,lui,add</code>涉及的情况较为充分,但缺乏对<code>sub</code>的测试,<code>lw,sw</code>缺乏立即数为负数的情况,未考虑用<code>beq</code>实现循环的情况</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>manimce</title>
    <link href="/2024/10/22/manimce/"/>
    <url>/2024/10/22/manimce/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">conda activate manimce<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">manim basic.py <br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Video Action Recognition</title>
    <link href="/2024/10/21/video-Action-Recognition/"/>
    <url>/2024/10/21/video-Action-Recognition/</url>
    
    <content type="html"><![CDATA[<h1 id="video-action-recognition">Video Action Recognition</h1><ul><li><h2 id="lstm">LSTM</h2></li><li><h2 id="d-convnets">3D ConvNets</h2></li></ul><figure><img src="image-20241022001842588.png" alt="image-20241022001842588"><figcaption aria-hidden="true">image-20241022001842588</figcaption></figure><ul><li><p>large parameters</p></li><li><p>extract feature</p></li><li><h2 id="two-stream-network">Two-Stream Network</h2></li><li><h2 id="d-fused-two-stream">3D-Fused Two-Stream</h2></li><li><h2 id="inflated-3di3d">Inflated 3D(I3D)</h2><ul><li>infate to 3D from 2D</li><li>use parameters in 2D models</li><li>bootstrapping</li></ul></li><li><h2 id="temporal-segment-networks">Temporal Segment Networks</h2><ul><li>segmental consensus</li><li>late fusion</li></ul></li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Two-Stream Inflated 3D ConvNets</title>
    <link href="/2024/10/20/Two-Stream-Inflated-3D-ConvNets/"/>
    <url>/2024/10/20/Two-Stream-Inflated-3D-ConvNets/</url>
    
    <content type="html"><![CDATA[<h1 id="two-stream-inflated-3d-convnets">Two-Stream Inflated 3DConvNets</h1><blockquote><p>视频分类方向</p><p>采用先进的二维图像识别架构,拓展过滤器和池化内核到3维</p><p>基于双流神经网络:局部运动效果较好</p><p>论文发表时基于Inception,后改为基于ResNet</p></blockquote><h2 id="related-work">Related Work</h2><blockquote><p>视频领域对于使用2D还是3D暂无定论,一种基本方法是2D网络配上LSTM,LSTM作为时空建模;或者配备光流;或者直接建立3D网络</p></blockquote><h3 id="convnetlstm">ConvNet+LSTM</h3><figure><img src="image-20241021165310989.png" alt="image-20241021165310989"><figcaption aria-hidden="true">image-20241021165310989</figcaption></figure><ul><li>从每一帧中独立提取特征,在整个视频中整合预测</li><li>ConvNet忽略时间结构,因此加入LSTM</li></ul><h3 id="d-convnets">3D ConvNets</h3><ul><li>直接创建时空数据的分层展示</li><li>因为多了一层内核的维度,其参数比2D卷积网络更为复杂,难以训练</li></ul><h3 id="two-stream-network-双流神经网络">Two-Stream Network双流神经网络</h3><figure><img src="image-20241021164927825.png" alt="two-stream"><figcaption aria-hidden="true">two-stream</figcaption></figure><blockquote><p>由两个2D神经网络构成:</p><p>空间流:学习场景信息</p><p>时间流:分析光流图像,学习时间信息</p><p>最后加权平均</p></blockquote><h3 id="d-fused-two-stream">3D-Fused Two-Stream</h3><figure><img src="image-20241021165442590.png" alt="image-20241021165442590"><figcaption aria-hidden="true">image-20241021165442590</figcaption></figure><blockquote><p>提前融合(fuse),用一个3D卷积神经网络输出结果</p></blockquote><h2 id="approach">Approach</h2><h3 id="inflate">inflate</h3><blockquote><p>将2D的Kernel,pooling layer直接转换为3D</p></blockquote><h3 id="bootstrapping">bootstrapping</h3><blockquote><p>将图像复制N次形成一个无聊视频,将3D模型在ImageNet上预训练,以满足无聊视频的不动点.</p><p>途径:将图片的参数复制N次(N是时间维度),再除以N实现缩放</p><p>确保卷积filter对图像和视频输入的处理一致</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>LSSPT</title>
    <link href="/2024/10/20/LSSPT/"/>
    <url>/2024/10/20/LSSPT/</url>
    
    <content type="html"><![CDATA[<h1 id="introduction">Introduction</h1><h2 id="conventional-deep-learning-based-methods">conventional deeplearning-based methods</h2><ul><li>LSTM, GCN</li><li>explore group activity representations under supervised or weaklysupervised modes</li><li>require manually annotated personal action, labels(数据标记?)</li></ul><h2 id="background">background</h2><ul><li>NLP:unsupervised</li><li>SSL developes</li><li>SSRL, the temporal evolution (时间演变) not yet been explicitlyexploited</li><li>predictive coding scheme (预测编码方案)</li></ul><h2 id="group-activities">group activities</h2><ul><li>more complex state dynamics</li><li>lead to failure of SSRL usingRNN(复杂序列<strong>关系</strong>建模困难)</li><li>LSTM相关模型缺乏注意力机制(attention to the history sequencedependencies)</li><li>Transformer networks in NLP restricted to normal data</li><li>人类在长周期group activity中重复某种运动</li><li><strong>exploiting multiple ranges of historicalinformation</strong></li></ul><h2 id="lsspt">LSSPT</h2><h3 id="encoder-decoder-framework">encoder-decoder framework</h3><ul><li>encoder: summarize group state</li><li>decoder: anticipate the state in the future</li><li>based on relation graph and casual Transformer</li></ul><h3 id="sparse-graph-transformer">sparse graph Transformer</h3><ul><li>spatial state context in short time</li></ul><h3 id="casual-temporal-transformerctt">casual temporalTransformer(CTT)</h3><ul><li>long range temporal dynamics</li></ul><h1 id="approach">Approach</h1><h2 id="predictive-coding">predictive coding</h2><ul><li>时空编码函数</li><li>预测函数</li><li>优化函数</li></ul><h2 id="architecture">Architecture</h2><ul><li>特征提取<ul><li>I3D预训练模型提取人物特征</li></ul></li><li>长短状态编码</li><li>长短状态解码</li><li>推理训练<ul><li>重构损失reconstructed loss</li><li>对比损失contrasitive loss</li><li>对抗损失adversarial loss</li></ul></li></ul><h2 id="long-short-state-encoder">Long-Short State Encoder</h2><h3 id="sparse-graph-transformer-1">sparse graph transformer</h3><h4 id="building">building</h4><p><span class="math inline">\(\{p{}^t_i\}{}^N_{i=1}\)</span>,<span class="math inline">\(p_i\in \mathit R^d\)</span>表示第i个人的特征</p><p><span class="math inline">\(稀疏矩阵G^t=\{V^t,E^t\}\)</span>,<span class="math inline">\(V_t=\{p{}^t_i\}{}^N_{i=1}\)</span>表示节点,<span class="math inline">\(E_t=\{(i,j)|p_i,p_j 在n时刻连结\}\)</span></p><p><span class="math inline">\(节点的邻居Nei(i,t)=\{p^t_j\}{}^M_{i=1},其中p^t_j满足(i,j)\inE^t\)</span></p><h4 id="update">update</h4><p>通过邻居节点传递的key,自身节点的equry更新节点信息,由原先的<span class="math inline">\(h_i\)</span>变为<span class="math inline">\(\hat{h_i}\)</span></p><p>$ =softmax()[v_i]^N_{i=1}\ q_i表示query\ k_j表示key\ v_i表示value\$</p><h4 id="group-state-modeling">group state modeling</h4><p>$ 小组状态g_t=P_{max}(Norm(f_o(),...,f_o())) \ P_{max}池化层 \Norm层标准化 \ f_o全连接层 \ $</p><h4 id="casual-temporal-transformer">casual temporal transformer</h4><ul><li>masked Transformer<ul><li>为绝对帧添加时间位置编码</li><li>多层CTT层传递,masked multihead attention,LayerNorm(层归一化),MLP(what???)</li><li>mask保证模型只注意部分特定输入(类似于LLM中后文不会影响前文语素的注意力分配机制)</li></ul></li></ul><h2 id="long-short-state-decoder">Long-Short State Decoder</h2><ul><li>state attention modules: 建立长短期之间的依赖</li><li>state update modules: 输出长短期信息</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>CV</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java HashMap</title>
    <link href="/2024/10/12/Java-HashMap/"/>
    <url>/2024/10/12/Java-HashMap/</url>
    
    <content type="html"><![CDATA[<h1 id="hashmap">HashMap</h1><h2 id="作用">作用</h2><blockquote><p>字典</p></blockquote><h2 id="方法">方法</h2><h3 id="创建">创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs Java">HashMap&lt;Integer, Integer&gt; hm = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br></code></pre></td></tr></table></figure><h3 id="添加键值对">添加键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.put(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>);<br>hm.putIfAbsent(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>); <span class="hljs-comment">//仅在hm原本不包含2对应的键值对时执行添加2-3键值对的操作</span><br><br><span class="hljs-comment">// 添加所有键值对</span><br>HashMap&lt;Integer, Integer&gt; hm2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br>hm2.putAll(hm);<br></code></pre></td></tr></table></figure><h3 id="删除键值对">删除键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm.remove(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="访问键值对">访问键值对</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">System.out.println(hm.get(<span class="hljs-number">2</span>)); <span class="hljs-comment">// 打印2对应的元素</span><br></code></pre></td></tr></table></figure><h3 id="迭代">迭代</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// 对键集合遍历for循环</span><br><span class="hljs-keyword">for</span> (Integer i : hm.keySet()) &#123;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + i + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(i));<br>&#125;<br><br><span class="hljs-comment">// iterator</span><br>Iterator&lt;Integer&gt; it = hm.keySet().iterator();<br><span class="hljs-keyword">while</span> (it.hasNext()) &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">key</span> <span class="hljs-operator">=</span> it.next;<br>    System.out.println(<span class="hljs-string">&quot;key: &quot;</span> + key + <span class="hljs-string">&quot; values: &quot;</span> + Sites.get(key));<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="merge">merge</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.merge(key, value, remappingFunction)<br></code></pre></td></tr></table></figure><blockquote><p>如果 key 对应的 value 不存在，则返回该 value 值，如果存在，则返回通过remappingFunction 重新计算后的值。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hm2.merge(<span class="hljs-number">1</span>,<span class="hljs-number">1</span>,(k,v)-&gt;v+<span class="hljs-number">1</span>); <span class="hljs-comment">// 若keySet中不包含1,则插入1-1键值对,若有则对v加一</span><br></code></pre></td></tr></table></figure><h3 id="compute">compute</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">hashmap.compute(K key, BiFunction remappingFunction);<br></code></pre></td></tr></table></figure><blockquote><p>对<code>hashMap</code>中的指定<code>key</code>的值进行重新计算</p><p>若<code>key</code>对应的<code>value</code>不存在,则返回<code>null</code>,若存在则返回通过<code>remappingFunction</code>重新计算后的值</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">newPrice</span> <span class="hljs-operator">=</span> prices.compute(<span class="hljs-string">&quot;Shoes&quot;</span>, (key, value) -&gt; value - value * <span class="hljs-number">10</span>/<span class="hljs-number">100</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java-PriorityQueue</title>
    <link href="/2024/10/12/PriorityQueue/"/>
    <url>/2024/10/12/PriorityQueue/</url>
    
    <content type="html"><![CDATA[<h1 id="priorityqueue">PriorityQueue</h1><h2 id="用途">用途</h2><blockquote><p>大顶堆、小顶堆</p></blockquote><h2 id="方法">方法</h2><h3 id="创建">创建</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers0 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(); <span class="hljs-comment">// 小根堆(顶端元素为最小)</span><br><br>PriorityQueue&lt;Integer&gt; numbers1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;((a,b)-&gt;b-a); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 指定数量</span><br>PriorityQueue&lt;Integer&gt; numbers2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;(<span class="hljs-number">10</span>); <span class="hljs-comment">// 指定容量可以避免执行扩容操作,加快速度</span><br><br><span class="hljs-comment">// 使用Comparator</span><br>PriorityQueue&lt;Integer&gt; numbers3 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(<span class="hljs-number">10</span>, <span class="hljs-keyword">new</span> <span class="hljs-title class_">Comparator</span>&lt;Integer&gt;()&#123;<br>            <span class="hljs-meta">@Override</span><br>            <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">compare</span><span class="hljs-params">(Integer o1, Integer o2)</span> &#123;<br>                <span class="hljs-keyword">return</span> o2-o1; <span class="hljs-comment">// &gt;=0即表示不用交换</span><br>            &#125;<br>        &#125;); <span class="hljs-comment">// 大根堆(顶端元素为最大)</span><br><br><span class="hljs-comment">// 通过Collection作为参数创建</span><br>ArrayList&lt;Integer&gt; arr = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.asList(<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">3</span>));<br>PriorityQueue&lt;Integer&gt; numbers4 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;Integer&gt;(arr);<br></code></pre></td></tr></table></figure><h3 id="入队">入队</h3><blockquote><p><code>add()</code>,<code>offer()</code>两者均为入队方法，仅在处理队列已满的情况时有所不同</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java">PriorityQueue&lt;Integer&gt; numbers = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PriorityQueue</span>&lt;&gt;();<br><br>numbers.add(<span class="hljs-number">4</span>); <span class="hljs-comment">// 队列已满时引发异常</span><br>numbers.add(<span class="hljs-number">3</span>);<br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [3, 4]</span><br><br>numbers.offer(<span class="hljs-number">1</span>); <span class="hljs-comment">// 队列已满时返回false</span><br>System.out.println(<span class="hljs-string">&quot;PriorityQueue: &quot;</span> + numbers);<br><span class="hljs-comment">// [1, 4, 3]</span><br></code></pre></td></tr></table></figure><h3 id="出队">出队</h3><blockquote><p><code>remove()</code>,<code>poll()</code>在处理队列为空时不一样：<code>remove()</code>抛出异常，<code>poll()</code>返回<code>null</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">numbers.remove();<br><br>numbers.poll(); <span class="hljs-comment">// 推荐这种方法</span><br></code></pre></td></tr></table></figure><h3 id="访问">访问</h3><blockquote><p><code>peek()</code>:队列为空时返回<code>null</code></p><p><code>element()</code>:队列为空时抛出异常</p></blockquote><figure class="highlight abnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs abnf">numbers.peek()<span class="hljs-comment">;</span><br><br>numbers.element()<span class="hljs-comment">;</span><br></code></pre></td></tr></table></figure><h3 id="清空">清空</h3><p><code>clear()</code></p><h3 id="判空">判空</h3><p><code>isEmpty()</code></p><p>访问元素个数</p><p><code>size()</code></p><h2 id="自动扩容机制">自动扩容机制</h2><blockquote><p>源码如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment"> * Increases the capacity of the array.</span><br><span class="hljs-comment"> *</span><br><span class="hljs-comment"> * <span class="hljs-doctag">@param</span> minCapacity the desired minimum capacity</span><br><span class="hljs-comment"> */</span><br><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">grow</span><span class="hljs-params">(<span class="hljs-type">int</span> minCapacity)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">oldCapacity</span> <span class="hljs-operator">=</span> queue.length;<br>    <span class="hljs-comment">// Double size if small; else grow by 50%</span><br>    <span class="hljs-type">int</span> <span class="hljs-variable">newCapacity</span> <span class="hljs-operator">=</span> ArraysSupport.newLength(oldCapacity,<br>            minCapacity - oldCapacity, <span class="hljs-comment">/* minimum growth */</span><br>            oldCapacity &lt; <span class="hljs-number">64</span> ? oldCapacity + <span class="hljs-number">2</span> : oldCapacity &gt;&gt; <span class="hljs-number">1</span><br>                                       <span class="hljs-comment">/* preferred growth */</span>);<br>    queue = Arrays.copyOf(queue, newCapacity);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>旧容量在64以下增加2,否则乘以2</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P1总结</title>
    <link href="/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/09/%E8%AE%A1%E7%BB%84P1%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h1 id="往年題">往年題</h1><h2 id="允许括号的表达式状态机">允许括号的表达式状态机</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=145&amp;PieId=1202">P1_L7_允许括号的表达式状态机- 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> string2(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> clr,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] in,<br>    <span class="hljs-keyword">output</span> out<br>    );<br>    <span class="hljs-keyword">parameter</span> START = <span class="hljs-number">3&#x27;B000</span>,<br>              DIGIT = <span class="hljs-number">3&#x27;B001</span>,<br>              CAL = <span class="hljs-number">3&#x27;B010</span>,<br>              LEFT_BRACKET = <span class="hljs-number">3&#x27;B011</span>,<br>              LEFT_DIGIT = <span class="hljs-number">3&#x27;B100</span>,<br>              LEFT_CAL = <span class="hljs-number">3&#x27;B101</span>,<br>              ILLEGAL = <span class="hljs-number">3&#x27;B110</span>;<br>    <span class="hljs-keyword">parameter</span> zero = <span class="hljs-number">48</span>,<br>              nine = <span class="hljs-number">57</span>,<br>              left = <span class="hljs-number">40</span>,<br>              right = <span class="hljs-number">41</span>,<br>              mult_ = <span class="hljs-number">42</span>,<br>              plus_ = <span class="hljs-number">43</span>;<br>    <span class="hljs-keyword">reg</span> [<span class="hljs-number">2</span>:<span class="hljs-number">0</span>] state;<br>    <span class="hljs-keyword">reg</span> num;<br>    <span class="hljs-keyword">reg</span> mark;<br>    <span class="hljs-keyword">reg</span> left_bracket;<br>    <span class="hljs-keyword">reg</span> right_bracket;<br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> clr) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (clr)<span class="hljs-keyword">begin</span><br>        state = START;<br>        num = <span class="hljs-number">1&#x27;b0</span>;<br>        mark = <span class="hljs-number">1&#x27;b0</span>;<br>        left_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>        right_bracket = <span class="hljs-number">1&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        num = (in &gt;= zero &amp;&amp; in &lt;= nine) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        mark = (in == mult_ || in == plus_) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        left_bracket = (in == left) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>        right_bracket = (in == right) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">case</span> (state)<br>            START:<span class="hljs-keyword">begin</span><br>              state = num ? DIGIT:<br>                      left_bracket ? LEFT_BRACKET:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? CAL: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            CAL:<span class="hljs-keyword">begin</span><br>              state = left_bracket ? LEFT_BRACKET : <br>                      num ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span> <br>            LEFT_BRACKET:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT: ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_DIGIT:<span class="hljs-keyword">begin</span><br>              state = mark ? LEFT_CAL :<br>                      right_bracket ? DIGIT:<br>                      ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            LEFT_CAL:<span class="hljs-keyword">begin</span><br>              state = num ? LEFT_DIGIT : ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>            ILLEGAL:<span class="hljs-keyword">begin</span><br>              state = ILLEGAL;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">endcase</span><br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><br>    <span class="hljs-keyword">assign</span> out = (state == DIGIT) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h2 id="投票表決器">投票表決器</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=424&amp;PieId=1202">P1_L1_vote_plus- 系统能力课程实验平台 (buaa.edu.cn)</a></p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> VoterPlus(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] np,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] vip,<br>    <span class="hljs-keyword">input</span> vvip,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] result<br>    );<br><br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] last_np;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">7</span>:<span class="hljs-number">0</span>] last_vip;<br>    <span class="hljs-keyword">reg</span> last_vvip;<br>    <span class="hljs-keyword">integer</span> temp;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> reset) <span class="hljs-keyword">begin</span><br>      <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>        last_np = <span class="hljs-number">32&#x27;b0</span>;<br>        last_vip = <span class="hljs-number">8&#x27;b0</span>;<br>        last_vvip = <span class="hljs-number">1&#x27;b0</span>;<br>        result = <span class="hljs-number">8&#x27;b0</span>;<br>      <span class="hljs-keyword">end</span><br>      <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span>:c<br>          temp = temp + ((last_np[i] ^ np[i]) &amp; np[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + temp;<br><br>        temp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i=i+<span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span>:cycle<br>          temp = temp + ((last_vip[i] ^ vip[i]) &amp; vip[i]);<br>        <span class="hljs-keyword">end</span><br>        result = result + <span class="hljs-number">4</span> * temp;<br><br>        result = result + <span class="hljs-number">16</span> * ((last_vvip ^ vvip) &amp; vvip);<br>        last_np = last_np | np;<br>        last_vip = last_vip | vip;<br>        last_vvip = last_vvip | vvip;<br>      <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="上机">上机</h1><h2 id="题目大意">题目大意</h2><blockquote><p>三道题,前一道是考察for循环的基本语法,后两道考察状态机</p></blockquote><ul><li>题目1:输入两个32位数,将其中一个数的二进制位逆序排列,比较两个数同一二进制位上出现不同位的次数</li><li>题目2:判断一串由0,1组成的字符串是否符合如下要求:<ul><li>将相邻的相同数字合成一组,相邻组的长度奇偶性一定不同</li></ul></li><li>题目3:输入格式为<code>&#123;xxxx:xxxx,xxxx:xxxx,&#125;</code>的字符串,记录当前的键值对数目和自上次复位以来的单个集合中最大键值对数目</li></ul><h2 id="思路">思路</h2><h3 id="section">1</h3><blockquote><p>使用组合逻辑,在always @(*)块中写一个for循环</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">always</span> @(*)<span class="hljs-keyword">begin</span><br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i = i + <span class="hljs-number">1</span>) <span class="hljs-keyword">begin</span><br>        cnt = (a[i] ^ b[i] == <span class="hljs-number">1</span>) ? cnt + <span class="hljs-number">1</span> : cnt;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">end</span><br></code></pre></td></tr></table></figure><h3 id="section-1">2</h3><blockquote><p>设置状态:</p><p>xx_xx中,下划符前的表示上一个集合的奇偶性(或者NULL表示暂无上一个集合,下划符后的表示当前集合的集合的奇偶性</p><p>状态转换图如下:</p></blockquote><p><img src="935df7948fedda6ff43aeb9df3a7759.jpg" alt="状态转换图" style="zoom: 25%;"></p><h3 id="section-2">3</h3><blockquote><p>考场没有写出来,错在了对于异常输入的处理办法.该题已经指明了<code>&#123;xxxx:xxx,xxxx:xxxx&#125;</code>的结构是固定的,测试数据不会出现<code>&#123;</code>,<code>&#125;</code>,<code>:</code>,<code>,</code>这四个字符的丢失,所以当存在键值对不满足条件后,应当等待下一个<code>,</code>的输入</p><p>例如在<code>&#123;a:,b:12,&#125;</code>中,<code>a:</code>明显不是一个符合要求的键值对(缺乏<code>value</code>),但这时我们必须保证后面的键值对能计入,需要等待<code>,</code>输入后进入新一轮输入键值对中.</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P2总结</title>
    <link href="/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/"/>
    <url>/2024/10/07/%E8%AE%A1%E7%BB%84P2%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<blockquote><p>MIPS的考察方式为将C语言代码翻译成MIPS汇编语言,其中对for循环的翻译、递归函数的转换最为重要</p></blockquote><h1 id="往年题">往年题</h1><h2 id="删数问题">删数问题</h2><blockquote><p>键盘输入一个高精度的正整数 <code>n</code>（不超过 250位），去掉其中任意<code>k</code>个数字后剩下的数字按原左右次序将组成一个新的非负整数。编程对给定的<code>n</code> 和<code>k</code>，寻找一种方案使得剩下的数字组成的新数最小。</p></blockquote><h3 id="题目来源">题目来源</h3><p><a href="https://www.luogu.com.cn/problem/P1106">P1106 删数问题 -洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p><h3 id="思路">思路</h3><blockquote><p>已知我们要删掉m个数,我们要使得新数字最小,一定会选择前m+1位数中最小的那位作为最高位,设该位为k,则k之前的位均可以删去,保留第i位,对于第i+1位到末尾的数据,我们将m修改为m-(i-1)(因为此时数字已经删去i-1位),采取同样的上述操作,直到m=0.</p></blockquote><h3 id="c代码">C++代码</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs C++"><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;iostream&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span><span class="hljs-string">&lt;string&gt;</span></span><br><span class="hljs-keyword">using</span> <span class="hljs-keyword">namespace</span> std;<br><span class="hljs-type">int</span> n,k,a[<span class="hljs-number">257</span>],rest,t=<span class="hljs-number">1</span>,minp,cnt=<span class="hljs-number">0</span>;<br><span class="hljs-type">bool</span> flag=<span class="hljs-number">0</span>;<br>string num;<br><span class="hljs-function"><span class="hljs-type">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>    cin&gt;&gt;num&gt;&gt;k;<br>    n=num.<span class="hljs-built_in">length</span>();<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=<span class="hljs-number">1</span>;i&lt;=n;++i)a[i]=num[i<span class="hljs-number">-1</span>]-<span class="hljs-string">&#x27;0&#x27;</span>;<br>    rest=n-k;<br>    <span class="hljs-keyword">while</span>(cnt&lt;rest)&#123;<br>        minp=t;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> i=t;i&lt;=k+t;++i)<span class="hljs-keyword">if</span>(a[minp]&gt;a[i])minp=i;<br>        <span class="hljs-keyword">if</span>(a[minp])flag=<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">if</span>(flag)cout&lt;&lt;a[minp];<br>        k-=minp-t;<br>        t=minp<span class="hljs-number">+1</span>;<br>        cnt++;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(!flag)cout&lt;&lt;<span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="java代码">Java代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution1106</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">sc</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(System.in);<br>        <span class="hljs-type">String</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> sc.next();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> sc.nextInt();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> n.length();<br>        <span class="hljs-type">int</span>[] a = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[len];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            a[i] = n.charAt(i) - <span class="hljs-string">&#x27;0&#x27;</span>;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">rest</span> <span class="hljs-operator">=</span> len - k;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">cnt</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> minp;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        <span class="hljs-keyword">while</span> (cnt &lt; rest) &#123;<br>            minp = t;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> t; i &lt;= k + t; i++) &#123;<br>                minp = a[minp] &gt; a[i] ? i : minp;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (a[minp] &gt; <span class="hljs-number">0</span>) flag = <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">if</span> (flag) &#123;<br>                System.out.print(a[minp]);<br>            &#125;<br>            k -= minp - t;<br>            t = minp + <span class="hljs-number">1</span>;<br>            cnt++;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (!flag)&#123;<br>            System.out.print(<span class="hljs-number">0</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="mips答案">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 600<br><br>.macro push(%i)<br>subi $sp, $sp, 4<br>sw %i, 0($sp)<br>.end_macro<br><br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%i)<br>li $v0, 5<br>syscall<br>move %i, $v0<br>.end_macro<br><br>.macro printInt(%i)<br>li $v0, 1<br>move $a0, %i<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 11<br>move $a0, %c<br>syscall<br>.end_macro<br><br>.macro inputStr(%str)<br>li $v0, 12<br>la $a0, %str<br>li $a1, 150<br>syscall<br>.end_macro<br><br># 使用$t7($t7=i) for (int i = t; i &lt;= k + t; i++)<br>.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bgt $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#使用$t7(记录字符串个数),$t6(记录字符当前对应位置)<br>.macro input_char_begin(%startLabel, %endLabel)<br>li $t7, -1<br>li $t6, -4<br>%startLabel:<br>beq $v0, 10, %endLabel<br>.end_macro<br><br>.macro input_char_end(%startLabel, %endLabel, %str, %len)<br>addi $t7, $t7, 1<br>addi $t6, $t6, 4<br>sw $v0, %str($t6)<br>j %startLabel<br>%endLabel:<br>move %len, $t7<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %cnt, %rest)<br>%startLabel:<br>bge %cnt, %rest, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_data(%arr, %i, %data)<br>push($t4)<br>li $t5, 4<br>mult $t5, %i<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t4)<br>.end_macro<br><br>.text<br># 读入字符串a<br>input_char_begin(start1,end1)<br>li $v0, 12 # 读入一个字符到$v0<br>syscall<br>input_char_end(start1,end1,a,$s0)<br>#a记录字符串位置,$s0记录字符串长度(len)<br><br># 读入k<br>inputInt($t0) #$t0=k,要删去的字符个数<br>#48-57<br>#rest = $s1<br>sub $s1, $s0, $t0 # rest = len - k<br>#cnt = $t1 = 0<br>li $t1, 0<br># minp = $t2 = 0<br>li $t2, 0<br># t = $t3 = 0<br>li $t3, 0<br>#flag = $t4 = 0 (false)<br>li $t4, 0<br><br>while_begin(start2,end2,$t1,$s1)<br>move $t2, $t3 # minp = t<br>for_begin(start3, end3,$t3,$t0)<br># minp = a[minp] &gt; a[i] ? i : minp;<br>push($s4)<br>push($s5)<br>load_data(a,$t2,$s4) # $s4 = a[minp]<br>load_data(a,$t7,$s5) # $s5 = a[i], <br>bgt $s4, $s5, update<br>j skip<br>update:<br>move $t2, $t7 # minp = i<br>skip:<br>pop($s5)<br>pop($s4)<br>for_end(start3,end3)<br><br>#printInt($t2)<br>load_data(a, $t2, $t5) # $t5 = a[minp]<br>#printInt($t5)<br>bgt $t5, $0, flag_true<br>j skip2<br>flag_true:<br>li $t4, 1 # flag = true;<br>skip2:<br><br>beq $t4, $0, skip3  # if (flag) print(a[minp])<br>load_data(a, $t2, $t5)# $t5 = a[minp]<br>printChar($t5)<br>skip3:<br><br>sub $t0, $t0, $t2 # k = k - minp<br>add $t0, $t0, $t3 # k = k + t<br>addi $t3, $t2, 1 # t = minp + 1<br>addi $t1, $t1, 1 # cnt++<br>while_end(start2,end2)<br><br>beq $t4, 1, skip4<br>li $s2, 0<br>printInt($s2)<br>skip4:<br><br><br></code></pre></td></tr></table></figure><h2 id="加法拆分">加法拆分</h2><blockquote><p>给一个数n,<strong>按照字典序</strong>输出它可能的加法拆分</p></blockquote><h3 id="思路-1">思路</h3><blockquote><p>采用dfs</p></blockquote><h3 id="c代码-1">C代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">5000</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">printArr</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt)</span><br>&#123;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; cnt - <span class="hljs-number">1</span>; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[i]);<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;+&quot;</span>);<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, arr[cnt - <span class="hljs-number">1</span>]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>&#125;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">dfs</span><span class="hljs-params">(<span class="hljs-type">int</span> *arr, <span class="hljs-type">int</span> cnt, <span class="hljs-type">int</span> left, <span class="hljs-type">int</span> last)</span><br>&#123;<br>    <span class="hljs-keyword">if</span> (left == <span class="hljs-number">0</span>)<br>    &#123;<br>        printArr(arr, cnt);<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = last; k &lt;= left; k++)<br>    &#123;<br>        arr[cnt] = k;<br>        dfs(arr, cnt + <span class="hljs-number">1</span>, left - k, k);<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    dfs(arr, <span class="hljs-number">0</span>, n, <span class="hljs-number">1</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-1">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 用于存放待打印数字的数组<br>enter: .word &#x27;\n&#x27;<br>plus: .word  &#x27;+&#x27;<br>test: .word &#x27;t&#x27;<br><br>#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br><br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>#读入整数<br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>#打印整数<br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br># 打印字符<br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#结束程序<br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>#for循环<br>.macro for_begin(%startLabel, %endLabel, %start, %end)<br>move $t7, %start<br>%startLabel:<br>bgt $t7, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 将数据存在arr的指定位置<br>.macro store_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>sw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br># arr的指定位置读取数据<br>.macro load_data(%arr, %data, %index)<br>push($t5)<br>li $t5, 4<br>mult $t5, %index<br>mflo $t5<br>lw %data, %arr($t5)<br>pop($t5)<br>.end_macro<br><br>#打印指定长度的数组<br>.macro printArr(%arr, %cnt)<br>li $t4, 0<br>print_loop:<br>bge $t4, %cnt, print_end<br><br>load_data(%arr, $t6, $t4)<br>printInt($t6)<br>addi $t4, $t4, 1<br>bge $t4, %cnt, print_end<br>printChar(plus)<br>print_skip:<br>j print_loop<br>print_end:<br>printChar(enter)<br>.end_macro<br><br># 数据指代<br>.eqv n $s0<br>.eqv cnt $a1<br>.eqv left $a2<br>.eqv last $a3<br><br>.text<br>inputInt(n)<br>li cnt, 0<br>move left, n<br>li last, 1<br>jal dfs<br>done<br><br>dfs:<br>push($ra)<br>beq left, $0, dfs_return<br>for_begin(dfs_start,dfs_end,last,left)<br># $t7 = k<br>store_data(arr, $t7, cnt)<br>push(cnt)<br>push(left)<br>push(last)<br>push($t7)<br>addi cnt, cnt, 1<br>sub left, left, $t7<br>move last, $t7<br>jal dfs<br>pop($t7)<br>pop(last)<br>pop(left)<br>pop(cnt)<br>for_end(dfs_start, dfs_end)<br>j dfs_done<br><br>dfs_return:<br>printArr(arr, cnt)<br><br>dfs_done:<br>pop($ra)<br>jr $ra<br><br><br></code></pre></td></tr></table></figure><h3 id="易错点">易错点</h3><ul><li><code>$a0</code>作为<code>Syscall</code>打印时需要的参数,要避免用户自定义函数中的参数含有<code>$a0</code>,产生不必要的冲突.或者修改<code>print</code>函数,采用入栈+退栈的方式(该方法更安全):</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro printInt(%int)<br>push($a0)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>pop($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>字符应当被指定为<code>word</code>在<code>MIP32</code>中占<code>4</code>字节,即<code>32</code>位,打印字符方式为:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>plus: .word &#x27;+&#x27;<br>.text<br>li $v0, 4<br>la $a0, plus<br>syscall<br></code></pre></td></tr></table></figure><h2 id="双关键词排序">双关键词排序</h2><h3 id="冒泡排序基础">冒泡排序基础</h3><blockquote><p>为了降低翻译难度,我在这里删去了用来决定提前推出排序的标记<code>flag</code>,同时一定程度上增加了算法的时间</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-type">void</span> <span class="hljs-title function_">BubbleSort</span><span class="hljs-params">(<span class="hljs-type">int</span> A[], <span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i, k, temp;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (A[k] &gt; A[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                temp = A[k];<br>                A[k] = A[k + <span class="hljs-number">1</span>];<br>                A[k + <span class="hljs-number">1</span>] = temp;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p>翻译成MIPS:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>arr: .space 400<br>space: .word &#x27; &#x27;<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(arr, i)<br>for_end(start0, end0, i)<br><br>#bubble sort<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(arr, k, A_k)<br>addi k_1, k, 1<br>load_data(arr, k_1, A_k_1)<br>bgt A_k, A_k_1, swp<br>j skip<br>swp:<br>swap(arr,k,k_1)<br>skip:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#打印数组<br>for_begin(start3, end3, i, $0, n)<br>print_arr_element(arr, i)<br>printChar(space)<br>for_end(start3, end3, i)<br></code></pre></td></tr></table></figure><h3 id="稍作修改的答案">稍作修改的答案</h3><blockquote><p>本题使用具有稳定性的冒泡排序,先对<code>B</code>数组从小到大进行排序,再对<code>A</code>数组进行相同操作,但在交换数组元素时对另一个数组也要进行相同位置的交换操作.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-comment">/* 双关键字排序*/</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">swap</span><span class="hljs-params">(<span class="hljs-type">int</span> *p, <span class="hljs-type">int</span> *q)</span><br>&#123;<br>    <span class="hljs-type">int</span> temp = *p;<br>    *p = *q;<br>    *q = temp;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d%d&quot;</span>, &amp;a[i], &amp;b[i]);<br>    &#125;<br><br>    <span class="hljs-type">int</span> i, k;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (b[k] &gt; b[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (i = n - <span class="hljs-number">1</span>; i &gt; <span class="hljs-number">0</span>; i--)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; i; k++)<br>        &#123;<br>            <span class="hljs-keyword">if</span> (a[k] &gt; a[k + <span class="hljs-number">1</span>])<br>            &#123;<br>                swap(&amp;a[k], &amp;a[k + <span class="hljs-number">1</span>]);<br>                swap(&amp;b[k], &amp;b[k + <span class="hljs-number">1</span>]);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d %d\n&quot;</span>, a[i], b[i]);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>翻译成MIPS汇编语言,关键在<code>swap</code>和双层<code>for</code>循环上</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>A: .space 400<br>B: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>subi %start, %start, 1<br>move %i, %start<br>addi %start, %start, 1<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>#获得数组指定位置的值<br>.macro load_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#将数据存储到数组中的指定位置<br>.macro store_data(%arr, %index, %value)<br>push($t9)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>pop($t9)<br>.end_macro<br><br>#交换数组中第i位和第k位,使用$t8,$t9作为temp<br>.macro swap(%arr, %i, %k)<br>push($t7)<br>push($t8)<br>load_data(%arr, %i, $t7)<br>load_data(%arr, %k, $t8)<br>store_data(%arr, %k, $t7)<br>store_data(%arr, %i, $t8)<br>pop($t8)<br>pop($t7)<br>.end_macro<br><br>#输入数组元素<br>.macro input_arr_element(%arr, %index)<br>li $v0, 5<br>syscall<br>store_data(%arr, %index, $v0)<br>.end_macro<br><br>#输出数组元素<br>.macro print_arr_element(%arr, %index)<br>li $v0, 1<br>load_data(%arr, %index, $a0)<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv k_1 $t2#k+1<br>.eqv A_k $t3 #arr[k]<br>.eqv A_k_1 $t4 #arr[k+1]<br>.text<br>#输入A,B数组<br>inputInt(n)<br>for_begin(start0, end0, i, $0,n)<br>input_arr_element(A, i)<br>input_arr_element(B, i)<br>for_end(start0, end0, i)<br><br>#先对B数组进行冒泡排序(从小到大)<br>for_begin_decrease(start1,end1,i,n,$0)<br>for_begin(start2,end2,k,$0,i)<br>load_data(B, k, A_k)<br>addi k_1, k, 1<br>load_data(B, k_1, A_k_1)<br>bgt A_k, A_k_1, swp1<br>j skip1<br>swp1:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip1:<br>for_end(start2,end2,k)<br>for_end_decrease(start1,end1,i)<br><br>#再对A数组进行冒泡排序(从小到大)<br>for_begin_decrease(start3,end3,i,n,$0)<br>for_begin(start4,end4,k,$0,i)<br>load_data(A, k, A_k)<br>addi k_1, k, 1<br>load_data(A, k_1, A_k_1)<br>bgt A_k, A_k_1, swp2<br>j skip2<br>swp2:<br>swap(A,k,k_1)<br>swap(B,k,k_1)<br>skip2:<br>for_end(start4,end4,k)<br>for_end_decrease(start3,end3,i)<br><br>#打印数组<br>for_begin(start5, end5, i, $0, n)<br>print_arr_element(A, i)<br>printChar(space)<br>print_arr_element(B,i)<br>printChar(enter)<br>for_end(start5, end5, i)<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,宏可以大幅降低拓展代码的难度</p></blockquote><h2 id="字符统计">字符统计</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=35&amp;PieId=1202">P2_L1_calculate- 系统能力课程实验平台 (buaa.edu.cn)</a></p><blockquote><p>使用MIPS汇编语言写一个具有字符统计功能的汇编程序(不考虑延迟槽)</p></blockquote><h3 id="分析">分析</h3><blockquote><p>本题要实现一个计数器,这在C语言中通常使用字典实现,而要在MIPS汇编语言直接构建这样一个部件难度较大,我们可以开两个数组<code>arr</code>与<code>order</code>,<code>arr</code>记录字符对应的出现次数,<code>order</code>记录各个字符的依次出现顺序</p></blockquote><h3 id="mips答案-2">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 200 # 26 * 4<br>order: .space 200<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br><br># 别名<br>.eqv n, $s0 # 输入字符总数<br>.eqv ct $s1 # 用于记录输入的字符种类<br>.eqv i, $t0 # 用于for循环<br>.eqv k, $t1 # 用于for循环<br>.eqv t, $t3 # 用于for循环<br>.eqv flag, $s2 # 标志<br><br>.macro for_begin(%startLabel, %endLabel, %i,%start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0, 4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>#将数字转化为对应字符(0-&#x27;a&#x27;)<br>.macro printCharFromInt(%int)<br>addi $a0, %int, 97<br>li $v0, 11<br>syscall<br>.end_macro<br><br>.macro store_data(%arr,%index,%value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro put(%arr, %order, %k)<br>subi %k, %k, 97 <br>put_order(%order, %k)<br><br>load_data(%arr, %k, $t7)<br>addi $t7, $t7, 1<br>store_data(%arr, %k, $t7)<br>.end_macro<br><br>.macro put_order(%order, %k)<br>li flag, 1 # 标记当前字符是否未出现<br>for_begin(start10, end10, t, $0, ct)<br>load_data(order, t, $t7)<br>beq $t7, %k, yes # 找到了<br>j put_order_end<br>yes:<br>li flag, 0 # 将标记置为0<br>put_order_end:<br>for_end(start10, end10, t)<br>beq flag, $0, skip<br>store_data(order, ct, %k) # 将新的字符种类添加到order中<br>addi ct, ct, 1<br>skip:<br>.end_macro<br><br>.macro print_arr_element(%arr, %order, %k)<br>load_data(%order, %k, $t5) # %k是[0,ct)之间的一个整数, $t5记录第%k个出现的字符种类(&#x27;a&#x27;-97到&#x27;b&#x27;-97,即[0,26))<br>load_data(%arr, $t5, $t4) # $t4寄存对应字符的出现次数<br>beq $t4, $0, skip # 该语句无用,但为了代码拓展性和稳定性可以保留<br>printCharFromInt($t5) # 0对应&#x27;a&#x27;,25对应&#x27;z&#x27;<br>printChar(space)<br>printInt($t4)<br>printChar(enter)<br>skip:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br># 初始化<br>li ct, 0<br><br># 输入n<br>inputInt(n)<br><br># 输入n个字符<br>for_begin(start1,end1,i,$0,n)<br>inputChar(k)<br>put(arr, order, k)<br>for_end(start1,end1,i)<br><br># 打印<br>for_begin(start2,end2,k,$0,ct)<br>print_arr_element(arr, order, k)<br>for_end(start2,end2,k)<br><br># 终止程序<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-1">易错点</h3><ul><li>MIPS评测机似乎不会有换行符的输入,虽然无法在本地实现对换行符的处理,却可以通过评测机.但倘若增加了一个用于除去换行符影响的<code>ignoreInt()</code>方法,反而会出现RE错误.</li><li>在这里要实现读入单个字符,根据手册可以搓出这个宏:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br></code></pre></td></tr></table></figure><ul><li>但如何避免换行符的影响?我们可以用读入字符串的方法(此时程序会读入一行字符,包括换行符),在将字符串的第0位字符提取出来.</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro inputChar(%c)<br>li $v0, 8<br>li $a1, 10<br>syscall<br>lw %c, 0($a0)<br>.end_macro<br></code></pre></td></tr></table></figure><h2 id="矩阵转置相加">矩阵转置相加</h2><blockquote><p>使用MIPS汇编语言编写一个具有矩阵<strong>转置相加</strong>功能的汇编程序(不考虑延迟槽).</p></blockquote><h3 id="c语言代码">C语言代码</h3><blockquote><p>开两个二维数组a,b,各元素依次相加,通过调换for循环顺序实现对转置矩阵的打印.</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> b[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span><br>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;a[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;b[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>        &#123;<br>            a[i][k] = a[i][k] + b[i][k];<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;The result is:\n&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> k = <span class="hljs-number">0</span>; k &lt; m; k++)<br>    &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, a[i][k]);<br>            <span class="hljs-keyword">if</span> (i != n - <span class="hljs-number">1</span>)<br>            &#123;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot; &quot;</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (k != m - <span class="hljs-number">1</span>)<br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-3">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br>sentence: .asciiz &quot;The result is:\n&quot;<br>A: .space 256 # 8 * 8 * 4<br>B: .space 256 # 8 * 8 * 4<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv temp1, $t3<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.text<br># 读入n, m<br>inputInt(n)<br>inputInt(m)<br><br># 读入矩阵A<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1, i)<br><br># 读入矩阵B<br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, m)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br># 矩阵A,B相加,结果存储到A中<br>for_begin(start5, end5, i, $0, n)<br>for_begin(start6, end6, k, $0, m)<br>load_arr(A, i, k, temp)<br>load_arr(B, i, k, temp1)<br>add temp, temp, temp1<br>store_arr(A, i, k, temp)<br>for_end(start6, end6, k)<br>for_end(start5, end5, i)<br><br>printStr(sentence)<br><br># 打印A的转置数组<br>for_begin(start7, end7, k, $0, m)<br>for_begin(start8, end8, i, $0, n)<br>load_arr(A, i, k, temp)<br>printInt(temp)<br>addi i, i, 1<br>beq i, n, skip<br>printStr(space)<br>skip:<br>subi i, i, 1<br>for_end(start8, end8, i)<br>addi k, k, 1<br>beq k, m, skip2<br>printStr(enter)<br>skip2:<br>subi k, k, 1<br>for_end(start7, end7, k)<br><br># 终止程序<br>done<br></code></pre></td></tr></table></figure><h3 id="易错点-2">易错点</h3><ul><li><p>要注意到矩阵每一行的最后不能出现空格,最后一行的末尾不能有换行符.我们可以先对for循环中的参数(<code>i</code>或<code>k</code>)进行加一操作,判断其是否与<code>n</code>或<code>m</code>相等.</p></li><li><p>多层循环使用宏会更加方便.对于不同的for循环,一定要将开始和结束的标志符设置为不同的(不要复制粘贴后忘了修改就行)</p></li></ul><h2 id="倒序全排列">倒序全排列</h2><blockquote><p>使用MIPS实现全排列生成算法</p><p>输入一个小于等于7的正整数,求出n的全排列,并按照字典序倒序输出</p></blockquote><h3 id="思路-2">思路</h3><figure><img src="image-20241008194552753.png" alt="正序全排列C语言代码"><figcaption aria-hidden="true">正序全排列C语言代码</figcaption></figure><blockquote><p>这里题目给出了正序全排列的C语言代码,不难发现:只要将<code>FullArray(int index)</code>中出现的第二个正序for循环改为倒序即可.即:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = n - <span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>    <span class="hljs-keyword">if</span> (symbol[i] == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-comment">// body</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-4">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>symbol: .space 28<br>array: .space 28<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27;<br><br>.eqv n, $s0<br>.eqv index, $a1<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv flag, $t2<br>.eqv one, $t3 # 用于存储立即数1<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro print_arr_element(%arr, %i)<br>sll $t9, %i, 2<br>lw $a0, %arr($t9)<br>li $v0, 1<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># 递减for循环<br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.text<br>inputInt(n)<br>li one, 1<br>li index, 0<br>jal FullArray<br>done<br><br>FullArray:<br>push($ra)<br>bge index, n, return<br>for_begin_decrease(start2, end2, i, n, $0)<br>load_data(symbol, i, flag)<br>beq flag, $0, yes<br>j no<br>yes:<br>addi i, i, 1<br>store_data(array, index, i)<br>subi i, i, 1<br>store_data(symbol, i, one)<br>addi index, index, 1<br>push(i)<br>jal FullArray<br>pop(i)<br>subi index, index, 1<br>store_data(symbol, i, $0)<br>no:<br><br>for_end_decrease(start2, end2, i)<br><br>j full_array_end<br><br>return:<br>for_begin(start1, end1, k, $0, n)<br>print_arr_element(array, k)<br>printStr(space)<br>for_end(start1, end1, k)<br>printStr(enter)<br>full_array_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h2 id="阶乘连加">阶乘连加</h2><figure><img src="image-20241008201630823.png" alt="1202-329"><figcaption aria-hidden="true">1202-329</figcaption></figure><h3 id="mips答案-5">MIPS答案</h3><blockquote><p>实现思路很简单,不需要写一个C语言程序了,但要注意细节问题</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv index, $a1<br>.eqv ans, $s1<br>.eqv new, $s2<br>.eqv i, $t0<br>.eqv k, $t1<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputUnsignedInt(%u)<br>li $v0, 36<br>move $a0, %u<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin_decrease(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>ble %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end_decrease(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br><br>for_begin_decrease(start, end, i, n, $0)<br>li new, 1<br>for_begin_decrease(start2, end2, k, i, $0)<br>mult new, k<br>mflo new<br>for_end_decrease(start2, end2, k)<br>addu ans, ans, new<br>for_end_decrease(start, end, i)<br><br>inputUnsignedInt(ans)<br><br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-3">易错点</h3><ul><li>该程序设计无符号数,<code>add</code>要替换为<code>addu</code></li></ul><h2 id="单步汉诺塔">单步汉诺塔</h2><blockquote><ul><li>输入格式：</li><li>输入包含1行，只包含1个1位整数，即0-9中的某一个整数，记其为n</li><li>汉诺塔三根柱子的编号从左到右依次为'A','B','C',初始的时候所有盘子都在‘A'上，编号从上（小）到下（大）分别为0~n</li><li>移动这些盘子到’C‘，要求移动时只能将某个柱子上最上面的盘子移动到相邻的柱子，并且任何情况下大盘子不能在小盘子上面，即A上的盘子不能直接移动到C上</li><li>输出格式：请参照下文的C语言样例，要求实现同粒度的输出（即能通过逐行<code>strcmp</code>的检测）</li><li>数据范围：</li><li>0&lt;n&lt;10</li></ul></blockquote><blockquote><p>C语言样例已给出:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">void</span> <span class="hljs-title function_">move</span><span class="hljs-params">(<span class="hljs-type">int</span> id, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;move disk %d from %c to %c\n&quot;</span>, id, from, to);<br>&#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">hanoi</span><span class="hljs-params">(<span class="hljs-type">int</span> base, <span class="hljs-type">char</span> from, <span class="hljs-type">char</span> via, <span class="hljs-type">char</span> to)</span> &#123;<br>  <span class="hljs-keyword">if</span> (base == <span class="hljs-number">0</span>) &#123;<br>      move(base, from, via);<br>      move(base, via, to);<br>      <span class="hljs-keyword">return</span>;<br>  &#125;<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>  move(base, from, via);<br>  hanoi(base - <span class="hljs-number">1</span>, to, via, from);<br>  move(base, via, to);<br>  hanoi(base - <span class="hljs-number">1</span>, from, via, to);<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>  <span class="hljs-type">int</span> n;<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>  hanoi(n, <span class="hljs-string">&#x27;A&#x27;</span>, <span class="hljs-string">&#x27;B&#x27;</span>, <span class="hljs-string">&#x27;C&#x27;</span>);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-6">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;move disk A from A to A\n&quot;<br><br>.eqv shift, $t3<br>.eqv shift1, 10<br>.eqv shift2, 7<br>.eqv shift3, 5<br>.eqv n, $s0<br>.eqv base, $a1<br>.eqv from, $a2<br>.eqv via, $a3<br>.eqv to, $t4<br>.eqv A, 65<br>#.eqv B, 66<br>.eqv C, 67<br>.eqv zero, 48<br><br># move()函数,使用$t7<br>.macro move_(%id, %from, %to)<br>la $t7, sentence<br>addi $t7, $t7, shift1<br>sb %id, 0($t7)<br>addi $t7, $t7, shift2<br>sb %from, 0($t7)<br>addi $t7, $t7, shift3<br>sb %to, 0($t7)<br>printStr(sentence)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro swap(%x, %y)<br>push(%x)<br>push(%y)<br>pop(%x)<br>pop(%y)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>move base, n<br>addi base, base, zero<br>li from, 65<br>li via, 66<br>li to, 67<br>jal hanoi<br><br>done<br><br>hanoi:<br>push($ra)<br>beq base, zero, return<br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, from, via)<br><br>push(base)<br>push(from)<br>push(to)<br>subi base, base, 1<br>swap(from, to)<br>jal hanoi<br>pop(to)<br>pop(from)<br>pop(base)<br>move_(base, via, to)<br><br>subi base, base, 1<br>jal hanoi<br><br>j hanoi_end<br>return:<br>move_(base, from, via)<br>move_(base, via, to)<br>hanoi_end:<br>pop($ra)<br>jr $ra<br><br></code></pre></td></tr></table></figure><h3 id="难点修改字符串">难点(修改字符串)</h3><ul><li>对于字符串的修改,可以采用以下模板:</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, modify_str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>sentence: .asciiz &quot;hello, world!\n&quot;<br><br>.eqv c, $t0 # 待加入的字符<br>.eqv shift, $t1 # 偏移量<br><br># 将字符串第i位修改为指定字符c<br>.macro modify_str(%str, %i, %c)<br>la $t9, %str<br>add $t9, $t9, %i<br>sb %c, 0($t9) # sb存入一个byte(比特),这是因为asciiz字符串中一个字符占8位(即1byte)<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.text<br>li shift, 3<br>li c, 70 # &#x27;F&#x27;对应ASCII码为70<br>modify_str(sentence, shift, c)<br>printStr(sentence)<br><br># output:<br># helFo, world!<br></code></pre></td></tr></table></figure><h2 id="二分查找的实现与应用">二分查找的实现与应用</h2><p><a href="http://cscore.buaa.edu.cn/#/problem?ProblemId=415&amp;PieId=1202">P2_L1_bsearch- 系统能力课程实验平台 (buaa.edu.cn)</a></p><h3 id="c语言代码-1">C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> arr[<span class="hljs-number">1000</span>];<br><span class="hljs-type">int</span> <span class="hljs-title function_">binary_search</span><span class="hljs-params">(<span class="hljs-type">int</span> key,<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> n)</span> <span class="hljs-comment">//自定义函数binary_search()</span><br>&#123;<br>    <span class="hljs-type">int</span> low,high,mid,count=<span class="hljs-number">0</span>,count1=<span class="hljs-number">0</span>;<br>    low=<span class="hljs-number">0</span>;<br>    high=n<span class="hljs-number">-1</span>;<br>    <span class="hljs-keyword">while</span>(low&lt;=high)    <span class="hljs-comment">//査找范围不为0时执行循环体语句</span><br>    &#123;<br>        count++;    <span class="hljs-comment">//count记录査找次数</span><br>        mid=(low+high)/<span class="hljs-number">2</span>;    <span class="hljs-comment">//求中间位置</span><br>        <span class="hljs-keyword">if</span>(key&lt;a[mid])    <span class="hljs-comment">//key小于中间值时</span><br>            high=mid<span class="hljs-number">-1</span>;    <span class="hljs-comment">//确定左子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key&gt;a[mid])    <span class="hljs-comment">//key 大于中间值时</span><br>            low=mid+<span class="hljs-number">1</span>;    <span class="hljs-comment">//确定右子表范围</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(key==a[mid])    <span class="hljs-comment">//当key等于中间值时，证明查找成功</span><br>        &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;1&quot;</span>);<br>            count1++;    <span class="hljs-comment">//count1记录查找成功次数</span><br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">if</span>(count1==<span class="hljs-number">0</span>)    <span class="hljs-comment">//判断是否查找失敗</span><br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; m; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;arr[i]);<br>    &#125;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;key);<br>        binary_search(key, arr, m);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-7">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 4000<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv low, $t0<br>.eqv high, $t1<br>.eqv mid, $t2<br>.eqv count, $t3<br>.eqv count1, $t4<br>.eqv temp, $t5<br>.eqv i, $t6<br>.eqv k, $t7<br>.eqv key, $t8<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro while_begin(%startLabel, %endLabel, %low, %high)<br>%startLabel:<br>bgt %low, %high, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro binary_search(%key, %a, %n)<br>li count, 0<br>li count1, 0<br>li low, 0<br>subi high, %n, 1<br>while_begin(start1, end1, low, high)<br>addi count, count, 1<br>add mid, low, high<br>srl mid, mid, 1 # mid = (low + high) / 2;<br>load_data(%a, mid, temp)<br>blt key, temp, less<br>beq key, temp, same<br>bgt key, temp, greater<br><br>less:<br>subi high, mid, 1<br>j judge_end<br>same:<br>printImmediate(1)<br>printChar(enter)<br>addi count1, count, 1<br>j break_mark<br>greater:<br>addi low, mid, 1<br>judge_end:<br>while_end(start1,end1)<br>break_mark:<br>beq count1, 0, fail<br>j skip0<br>fail:<br>printImmediate(0)<br>printChar(enter)<br>skip0:<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(m)<br>for_begin(start2, end2, i, $0, m)<br>inputInt(temp)<br>store_data(arr,i,temp)<br>for_end(start2, end2, i)<br><br>inputInt(n)<br>for_begin(start3,end3,k,$0,n)<br>inputInt(key)<br>binary_search(key, arr, m)<br>for_end(start3,end3,k)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="水仙花数的判断">水仙花数的判断</h2><h3 id="c语言代码-2">C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">square</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-keyword">return</span> x * x * x;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">narcissus</span><span class="hljs-params">(<span class="hljs-type">int</span> x)</span> &#123;<br>    <span class="hljs-type">int</span> a0;<br>    <span class="hljs-type">int</span> a1;<br>    <span class="hljs-type">int</span> a2;<br>    a0 = x % <span class="hljs-number">10</span>;<br>    a1 = (x % <span class="hljs-number">100</span>) / <span class="hljs-number">10</span>;<br>    a2 = x / <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">if</span> (square(a0) + square(a1) + square(a2) == x) &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = m; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (narcissus(i)) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-8">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>enter: .word &#x27;\n&#x27;<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv ten, $s2<br>.eqv hundred, $s3<br><br>.eqv a0, $t0<br>.eqv a1, $t1<br>.eqv a2, $t2<br>.eqv i, $t3<br>.eqv sum, $t4<br>.eqv temp, $t5<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro square_add_to(%x, %sum)<br>mult %x, %x<br>mflo temp<br>mult %x, temp<br>mflo temp<br>add sum, sum, temp<br>.end_macro<br><br>.macro narcissus(%x)<br>li sum, 0<br>div %x, ten<br>mfhi a0<br>square_add_to(a0, sum)<br>div %x, hundred<br>mfhi a1<br>div a1, a1, 10<br>square_add_to(a1, sum)<br>div a2, %x, 100<br>square_add_to(a2, sum)<br><br>beq sum, %x, yes<br>j no<br>yes:<br>printInt(%x)<br>printChar(enter)<br>no:<br>.end_macro<br><br>.text<br>li ten, 10<br>li hundred, 100<br><br>inputInt(m)<br>inputInt(n)<br>for_begin(start0,end0,i,m,n)<br>narcissus(i)<br>for_end(start0,end0,i)<br></code></pre></td></tr></table></figure><h3 id="除法操作">除法操作</h3><blockquote><p>实现除法有以下操作</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs assembly"># 1<br>div $t0, $t1<br>mflo $t2 # $t0 % $t1 的结果存储在低位中<br>mfhi $t3 # $t0 // $t1的结果存储在高位中<br><br># 2<br>div $t2, $t0, $t1 # $t2 = $t0 // $t1 (整数除法)<br><br># 3<br>div $t0, $t1, 100 # $t0 = $t1 // 100 (除以16-bit立即数)<br><br># 4<br>div $t0, $t1, 100000 # $t0 = $t1 // 100000(除以32-bit立即数)<br><br># 5<br>srl $t0, 2 # $t0值向右移两位,即除以4<br></code></pre></td></tr></table></figure><h2 id="约瑟夫环问题">约瑟夫环问题</h2><h3 id="c语言代码-3">C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> a[<span class="hljs-number">100</span>];<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-type">int</span> m;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-type">int</span> i = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> count = <span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> flag = <span class="hljs-number">1</span>;<br><br>    <span class="hljs-keyword">while</span> (<span class="hljs-number">1</span>) &#123;<br>        <span class="hljs-keyword">if</span> (flag == n) &#123;<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (a[i] == <span class="hljs-number">1</span>) &#123;<br>            i = i + <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">if</span> (count == m) &#123;<br>                a[i] = <span class="hljs-number">1</span>;<br>                flag++;<br>                i++;<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i);<br>                <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>                count = <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                count++;<br>                i++;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">if</span> (i == n) &#123;<br>            i = <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">if</span> (a[i] != <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, i+<span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">break</span>;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-9">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a: .space 400<br>space: .word &#x27; &#x27;<br>enter: .word &#x27;\n&#x27;<br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv one, $s2<br><br>.eqv i, $t0<br>.eqv count, $t1<br>.eqv flag, $t2<br>.eqv temp, $t3<br><br>.macro load_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start,%end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printChar(%c)<br>li $v0,  4<br>la $a0, %c<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.text<br>inputInt(n)<br>inputInt(m)<br><br>li i, 0<br>li count, 1<br>li flag, 1<br>li one, 1<br>while:<br>beq flag, n, break_<br>load_data(a, i, temp)<br>beq temp, $0, else<br>add_:<br>addi i, i, 1<br>j while_end<br>else:<br>beq count, m, yes<br>no:<br>addi count, count, 1<br>addi i, i, 1<br>j while_end<br>yes:<br>store_data(a,i,one)<br>addi flag, flag, 1<br>addi i, i, 1<br>printInt(i)<br>printChar(enter)<br>li count, 1<br>while_end:<br>beq i, n, mod<br>j skip<br>mod:<br>li i, 0<br>skip:<br>j while<br><br>break_:<br><br>for_begin(start0, end0, i, $0, n)<br>load_data(a, i, temp)<br>beq temp, $0, find<br>j skip2<br>find:<br>addi i, i, 1<br>printInt(i)<br>j break2<br>skip2:<br>for_end(start0, end0, i)<br><br>break2:<br>done<br><br></code></pre></td></tr></table></figure><h1 id="练习题">练习题</h1><h2 id="回文串判断">回文串判断</h2><blockquote><p>其实用了足够多的封装之后,对于一些简单的MIPS题目已经不用特意写一遍C语言了</p></blockquote><h3 id="mips答案-10">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>arr: .space 80<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv flag, $s2<br>.eqv i, $t0<br>.eqv temp, $t1<br>.eqv temp1, $t2<br>.eqv temp2, $t3<br>.macro load_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>lw %value, arr($t9)<br>.end_macro<br><br>.macro store_data(%arr, %index, %value)<br>li $t9, 4<br>mult $t9, %index<br>mflo $t9<br>sw %value, arr($t9)<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro inputChar(%c)<br>li $v0, 12<br>syscall<br>move %c, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printImmediate(%imm)<br>li $v0, 1<br>li $a0, %imm<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>inputChar(temp)<br>store_data(arr, i, temp)<br>for_end(start1, end1, i)<br><br>srl m, n, 1<br>li flag, 1<br>for_begin(start2, end2, i, $0, m)<br>load_data(arr, i, temp1)<br>sub temp, n, i<br>subi temp, temp, 1<br>load_data(arr, temp, temp2)<br>beq temp1, temp2, skip<br>li flag, 0<br>skip:<br>for_end(start2, end2, i)<br><br>beq flag, 1, yes<br>no:<br>printImmediate(0)<br>j flag_end<br>yes:<br>printImmediate(1)<br>flag_end:<br>done<br><br></code></pre></td></tr></table></figure><h2 id="全排列生成">全排列生成</h2><blockquote><p>参考往年题中的<strong>倒序全排列</strong></p></blockquote><h2 id="矩阵相乘">矩阵相乘</h2><h3 id="mips答案-11">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 256 # 8 * 8 * 4<br>B:.space 256<br>C:.space 256<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3 # $t9 = i * 8<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv f, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.text<br>inputInt(n)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, n)<br>inputInt(temp)<br>store_arr(A,i,k,temp)<br>for_end(start2, end2, k)<br>for_end(start1,end1,i)<br><br>for_begin(start3, end3, i, $0, n)<br>for_begin(start4, end4, k, $0, n)<br>inputInt(temp)<br>store_arr(B,i,k,temp)<br>for_end(start4, end4, k)<br>for_end(start3,end3,i)<br><br>for_begin(start5,end5,i,$0,n)<br>for_begin(start6, end6, k, $0, n)<br>li temp, 0<br>for_begin(start7, end7, f, $0, n)<br>load_arr(A,i,f,temp1)<br>load_arr(B,f,k,temp2)<br>mult temp1, temp2<br>mflo temp0<br>add temp, temp, temp0<br>for_end(start7, end7, f)<br>store_arr(C,i,k,temp)<br>for_end(start6, end6, k)<br>for_end(start5,end5,i)<br><br>for_begin(start8, end8, i, $0, n)<br>for_begin(start9, end9, k, $0, n)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space)<br>for_end(start9, end9, k)<br>printStr(enter)<br>for_end(start8, end8, i)<br><br>done<br></code></pre></td></tr></table></figure><h2 id="迷宫哈密顿回路">01迷宫(哈密顿回路)</h2><h3 id="分析-1">分析</h3><blockquote><p>采用<code>DFS</code>(深度优先算法),从起点出发,向四个方向前进,并以没有到达过(<code>vis[i][j]==0</code>)以及不存在障碍(<code>puzzle[i][j]==1</code>)作为可以前进的判断依据,到达终点时将ans加一操作.</p></blockquote><h3 id="c语言代码-4">C语言代码</h3><blockquote><p>C语言中不建议使用<code>goto</code>语句,但这里为了翻译方便采用了该语句</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> n;<br><span class="hljs-type">int</span> m;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> start_x;<br><span class="hljs-type">int</span> start_y;<br><span class="hljs-type">int</span> end_x;<br><span class="hljs-type">int</span> end_y;<br><span class="hljs-type">int</span> puzzle[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> vis[<span class="hljs-number">8</span>][<span class="hljs-number">8</span>];<br><span class="hljs-type">int</span> ans;<br><br><span class="hljs-type">void</span> <span class="hljs-title function_">solve</span><span class="hljs-params">(<span class="hljs-type">int</span> curr_x, <span class="hljs-type">int</span> curr_y)</span> &#123;<br>    <span class="hljs-keyword">if</span> (curr_x == end_x &amp;&amp; curr_y == end_y)&#123;<br>        ans += <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br><br>    <span class="hljs-comment">//up </span><br>    <span class="hljs-keyword">if</span> (curr_x == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x<span class="hljs-number">-1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk1;<br>    &#125;<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x<span class="hljs-number">-1</span>,curr_y);<br>    vis[curr_x<span class="hljs-number">-1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk1:<br><br>    <span class="hljs-comment">//right</span><br>    <span class="hljs-keyword">if</span> (curr_y == m<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y+<span class="hljs-number">1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk2;<br>    &#125;<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y+<span class="hljs-number">1</span>);<br>    vis[curr_x][curr_y+<span class="hljs-number">1</span>] = <span class="hljs-number">0</span>;<br>    brk2:<br><br>    <span class="hljs-comment">// down</span><br>    <span class="hljs-keyword">if</span> (curr_x == n<span class="hljs-number">-1</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x+<span class="hljs-number">1</span>][curr_y] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk3;<br>    &#125;<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">1</span>;<br>    solve(curr_x+<span class="hljs-number">1</span>,curr_y);<br>    vis[curr_x+<span class="hljs-number">1</span>][curr_y] = <span class="hljs-number">0</span>;<br>    brk3:<br><br>    <span class="hljs-comment">//left</span><br>    <span class="hljs-keyword">if</span> (curr_y == <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (vis[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (puzzle[curr_x][curr_y<span class="hljs-number">-1</span>] == <span class="hljs-number">1</span>)&#123;<br>        <span class="hljs-keyword">goto</span> brk4;<br>    &#125;<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">1</span>;<br>    solve(curr_x,curr_y<span class="hljs-number">-1</span>);<br>    vis[curr_x][curr_y<span class="hljs-number">-1</span>] = <span class="hljs-number">0</span>;<br><br>    brk4:<br><br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m);<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; m; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;puzzle[i][k]);<br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;start_y);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_x);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;end_y);<br><br>    start_x -= <span class="hljs-number">1</span>;<br>    start_y -= <span class="hljs-number">1</span>;<br>    end_y -= <span class="hljs-number">1</span>;<br>    end_x -= <span class="hljs-number">1</span>;<br>    vis[start_x][start_y] = <span class="hljs-number">1</span>;<br>    solve(start_x,start_y);<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d\n&quot;</span>, ans);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-12">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>puzzle:.space 256 # 8 * 8 * 4<br>vis:.space 256<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro push(%x)<br>subi $sp, $sp, 4<br>sw %x, 0($sp)<br>.end_macro<br><br>.macro pop(%x)<br>lw %x, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 3<br>add $t9, $t9, %k<br>sll $t9, $t9, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n, $s0<br>.eqv m, $s1<br>.eqv start_x, $s2<br>.eqv start_y, $s3<br>.eqv end_x, $s4<br>.eqv end_y, $s5<br>.eqv ans, $s6<br>.eqv one, $s7<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp, $t2<br>.eqv curr_x, $t3<br>.eqv curr_y, $t4<br>.eqv temp1, $t5<br><br>.text<br>li one, 1<br><br>inputInt(n)<br>inputInt(m)<br>for_begin(start1, end1, i, $0, n)<br>for_begin(start2, end2, k, $0, m)<br>inputInt(temp)<br>store_arr(puzzle, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>inputInt(start_x)<br>inputInt(start_y)<br>inputInt(end_x)<br>inputInt(end_y)<br><br>subi start_x, start_x, 1<br>subi start_y, start_y, 1<br>subi end_x, end_x, 1<br>subi end_y, end_y, 1<br>move curr_x, start_x<br>move curr_y, start_y<br>store_arr(vis, curr_x, curr_y, one)<br>jal solve<br><br><br>printInt(ans)<br><br>done<br><br>solve:<br>push($ra)<br>bne curr_x, end_x, skip<br>bne curr_y, end_y, skip<br>addi ans, ans, 1<br>pop($ra)<br>jr $ra<br>skip:<br>beqz curr_x, brk1<br>subi temp1, curr_x, 1<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk1<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk1<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk1:<br>addi temp1, curr_y, 1<br>beq temp1, m, brk2<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk2<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk2<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk2:<br>addi temp1, curr_x, 1<br>beq temp1, n, brk3<br>load_arr(vis, temp1, curr_y, temp)<br>beq temp, one, brk3<br>load_arr(puzzle, temp1, curr_y, temp)<br>beq temp, one, brk3<br><br>store_arr(vis, temp1, curr_y, one)<br>push(curr_x)<br>push(curr_y)<br>addi curr_x, curr_x, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>addi temp1, curr_x, 1<br>store_arr(vis, temp1, curr_y, $0)<br>brk3:<br>beqz curr_y, brk4<br>subi temp1, curr_y, 1<br>load_arr(vis, curr_x, temp1, temp)<br>beq temp, one, brk4<br>load_arr(puzzle, curr_x, temp1, temp)<br>beq temp, one, brk4<br><br>store_arr(vis, curr_x, temp1, one)<br>push(curr_x)<br>push(curr_y)<br>subi curr_y, curr_y, 1<br>jal solve<br>pop(curr_y)<br>pop(curr_x)<br>subi temp1, curr_y, 1<br>store_arr(vis, curr_x, temp1, $0)<br>brk4:<br><br>pop($ra)<br>jr $ra<br></code></pre></td></tr></table></figure><h3 id="易错点-4">易错点</h3><ul><li>当调用递归函数时,若函数中可能出现多次递归,我们必须将:<ul><li>作为函数参数的寄存器入栈再调用递归函数,退出递归后再退栈,保持函数参数不变(<code>$a1,$a2,...</code>)</li><li>用来记录状态的数组在调用递归函数前的修改,应当在退出递归后修改回原值,比如本题中的<code>vis</code></li><li>若递归出现在<code>for</code>循环,<code>while</code>循环中,必须将作为循环参数的<code>i,k</code>等入栈保存,其他递归函数中会修改的寄存器同理(<code>$t0,$t1,...</code>)</li></ul></li></ul><h2 id="矩阵卷积">矩阵卷积</h2><h3 id="c语言代码-5">C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> A[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> B[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> C[<span class="hljs-number">100</span>][<span class="hljs-number">100</span>];<br><span class="hljs-type">int</span> temp;<br><span class="hljs-type">int</span> i;<br><span class="hljs-type">int</span> k;<br><span class="hljs-type">int</span> ii;<br><span class="hljs-type">int</span> kk;<br><span class="hljs-type">void</span> <span class="hljs-title function_">evolv</span><span class="hljs-params">(<span class="hljs-type">int</span> A[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> B[][<span class="hljs-number">100</span>], <span class="hljs-type">int</span> C[][<span class="hljs-number">100</span>], </span><br><span class="hljs-params">        <span class="hljs-type">int</span> m1, <span class="hljs-type">int</span> n1, <span class="hljs-type">int</span> m2, <span class="hljs-type">int</span> n2)</span> &#123;<br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1 - m2 + <span class="hljs-number">1</span>; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1 - n2 + <span class="hljs-number">1</span>; k++) &#123;<br>            temp = <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (ii = <span class="hljs-number">0</span>; ii &lt; m2; ii++) &#123;<br>                <span class="hljs-keyword">for</span> (kk = <span class="hljs-number">0</span>; kk &lt; n2; kk++) &#123;<br>                    <span class="hljs-comment">// printf(&quot;%d %d \n&quot;, ii + i, kk + k);</span><br>                    temp = temp + A[ii+i][kk+k] * B[ii][kk];<br>                &#125;<br>            &#125;<br>            C[i][k] = temp;<br>        &#125;<br>    &#125;<br>    <span class="hljs-keyword">return</span> ;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> m1, n1, m2, n2;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n1);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;m2);<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;A[i][k]);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m2; i++) &#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n2; k++) &#123;<br>            <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;B[i][k]);<br>        &#125;<br>    &#125;<br><br>    evolv(A,B,C,m1,n1,m2,n2);<br><br>    <span class="hljs-keyword">for</span>(i = <span class="hljs-number">0</span>; i &lt; m1-m2+<span class="hljs-number">1</span>; i++)&#123;<br>        <span class="hljs-keyword">for</span> (k = <span class="hljs-number">0</span>; k &lt; n1-n2+<span class="hljs-number">1</span>; k++) &#123;<br>            <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d &quot;</span>, C[i][k]);<br>        &#125;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-13">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>A:.space 2000 # 10 * 10 * 4 = 400<br>B:.space 2000<br>C:.space 2000<br>enter: .word &#x27;\n&#x27;<br>space: .word &#x27; &#x27; <br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br># value = arr[i][k]<br>.macro load_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>lw %value, %arr($t9)<br>.end_macro<br><br># arr[i][k] = value<br>.macro store_arr(%arr, %i, %k, %value)<br>sll $t9, %i, 4 # $t9 = i * 16<br>add $t9, $t9, %k<br>sll $t9, $t9, 2 <br>sw %value, %arr($t9)<br>.end_macro<br><br>.eqv n1, $s0<br>.eqv m1, $s1<br>.eqv m2, $s2<br>.eqv n2, $s3<br><br>.eqv m1_m2_1, $s4<br>.eqv n1_n2_1, $s5<br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv temp3, $t2<br>.eqv temp, $t3<br>.eqv temp1, $t4<br>.eqv temp2, $t5<br>.eqv temp0, $t6<br>.eqv ii, $t7<br>.eqv kk, $t8<br><br>.text<br>inputInt(m1)#行数<br>inputInt(n1)#列数<br>inputInt(m2)<br>inputInt(n2)<br><br># 读取待卷积矩阵<br>for_begin(start1, end1, i, $0, m1)<br>for_begin(start2, end2, k, $0, n1)<br>inputInt(temp)<br>store_arr(A, i, k, temp)<br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>#读取卷积核<br>for_begin(start3, end3, i, $0, m2)<br>for_begin(start4, end4, k, $0, n2)<br>inputInt(temp)<br>store_arr(B, i, k, temp)<br>for_end(start4, end4, k)<br>for_end(start3, end3, i)<br><br>#m1-m2+1<br>sub m1_m2_1, m1, m2<br>addi m1_m2_1, m1_m2_1, 1<br><br>sub n1_n2_1, n1, n2<br>addi n1_n2_1, n1_n2_1, 1<br><br>#卷积<br>for_begin(start5, end5, i, $0, m1_m2_1)<br>for_begin(start6, end6, k, $0, n1_n2_1)<br> li temp, 0<br> for_begin(start7, end7, ii, $0, m2)<br> for_begin(start8, end8, kk, $0, n2)<br> add temp3, ii, i<br> add temp0, kk, k<br> load_arr(A, temp3, temp0, temp1)<br> load_arr(B, ii, kk, temp2)<br> mult temp1, temp2<br> mflo temp0<br> add temp, temp, temp0<br> for_end(start8, end8, kk)<br> for_end(start7, end7, ii)<br> store_arr(C, i, k, temp)<br>for_end(start6,end6,k)<br>for_end(start5, end5, i)<br><br>#打印卷积结果<br>for_begin(start9, end9, i, $0, m1_m2_1)<br>for_begin(start10, end10, k, $0, n1_n2_1)<br>load_arr(C, i, k, temp)<br>printInt(temp)<br>printStr(space) <br>for_end(start10, end10, k)<br>printStr(enter)<br>for_end(start9,end9, i)<br><br>done<br><br></code></pre></td></tr></table></figure><h2 id="高精度阶乘的计算">高精度阶乘的计算</h2><h3 id="c语言代码-6">C语言代码</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&quot;stdio.h&quot;</span></span><br><span class="hljs-meta">#<span class="hljs-keyword">define</span> MAX 10000</span><br><span class="hljs-type">int</span> f[MAX];<br><span class="hljs-type">void</span> <span class="hljs-title function_">Arr_reset</span><span class="hljs-params">(<span class="hljs-type">int</span> a[],<span class="hljs-type">int</span> m,<span class="hljs-type">int</span> n)</span><br>&#123;<br>    <span class="hljs-type">int</span> i;<br>    <span class="hljs-keyword">for</span>(i=m;i&lt;=n;i++)<br>    &#123;<br>        a[i]=<span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">void</span>)</span><br>&#123;<br>    <span class="hljs-type">int</span> i,j,n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>,&amp;n);<br>    Arr_reset(f,<span class="hljs-number">0</span>,(<span class="hljs-keyword">sizeof</span>(f)/<span class="hljs-keyword">sizeof</span>(<span class="hljs-type">int</span>)));<span class="hljs-comment">//对数组进行初始化</span><br>    f[<span class="hljs-number">0</span>]=<span class="hljs-number">1</span>;<br>    <span class="hljs-type">int</span> jj= <span class="hljs-number">0</span> ;<br>    <span class="hljs-keyword">for</span>(i=<span class="hljs-number">2</span>;i&lt;=n;i++)<br>    &#123;<br>        <span class="hljs-comment">//乘以 i4</span><br>        <span class="hljs-type">int</span> c=<span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">for</span>(j=<span class="hljs-number">0</span>;j&lt;=jj;j++)<span class="hljs-comment">//最不易理解的</span><br>        &#123;<br>            <span class="hljs-type">int</span> s=f[j]*i+c;<br>            f[j]=s%<span class="hljs-number">10</span>;<br>            c=s/<span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">if</span> (j == jj &amp;&amp; c != <span class="hljs-number">0</span>)&#123;<br>                jj++;<br>            &#125;<br>            <span class="hljs-comment">//算出的 s 是单位数时，会连续覆盖 f[0]</span><br>            <span class="hljs-comment">//否则一个多位数会倒过来存储，如 123，f[0]存 3，f[1]存 2，f[3]存 1</span><br>            <span class="hljs-comment">//因此上式先求余，在求模</span><br>        &#125;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;jj=%d\n&quot;</span>, jj);<br>    <span class="hljs-keyword">for</span>(j=MAX<span class="hljs-number">-1</span>;j&gt;=<span class="hljs-number">0</span>;j--)<br>        <span class="hljs-keyword">if</span>(f[j])<br>            <span class="hljs-keyword">break</span>;<span class="hljs-comment">//忽略前导 0</span><br>    <span class="hljs-keyword">for</span>(i=j;i&gt;=<span class="hljs-number">0</span>;i--)<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>,f[i]);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;\n&quot;</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="mips答案-14">MIPS答案</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>a:.space 4000<br>enter:.word &#x27;\n&#x27;<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro<br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro printInt(%int)<br>li $v0, 1<br>move $a0, %int<br>syscall<br>.end_macro<br><br>.macro printStr(%str)<br>li $v0, 4<br>la $a0, %str<br>syscall<br>.end_macro<br><br>.macro for_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>beq %i, %end, %endLabel<br>.end_macro<br><br>.macro for_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>bgt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_begin(%startLabel, %endLabel, %i, %start, %end)<br>li %i, %start<br>subi %i, %i, 1<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_c_begin(%startLabel, %endLabel, %i, %start, %end)<br>move %i, %start<br>%startLabel:<br>blt %i, %end, %endLabel<br>.end_macro<br><br>.macro for_decrease_end(%startLabel, %endLabel, %i)<br>subi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel, %i)<br>addi %i, %i, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>.macro load_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>lw %value, %arr($t9)<br>.end_macro<br><br>.macro store_arr(%arr, %index, %value)<br>sll $t9, %index, 2<br>sw %value, %arr($t9)<br>.end_macro<br><br><br>.eqv i, $t0<br>.eqv k, $t1<br>.eqv s, $t2<br>.eqv temp, $t3<br>.eqv c, $t4<br>.eqv jj, $t5<br>.eqv n, $s0<br>.eqv two, $s1<br>.eqv ten, $s2<br>.eqv max, $s3<br>.eqv one, $s4<br>.eqv MAX, 1000<br><br>.text<br>li one, 1<br>li two, 2<br>li ten, 10<br>li max, MAX<br>#for_c_begin(start0, end0, i, $0, MAX)<br>#store_arr(a, i, 0)<br>#for_end(start0, end0, i)<br><br>inputInt(n)<br>store_arr(a, $0, one)<br>li jj, 0<br>for_c_begin(start1, end1, i, two, n) # 2&lt;=i&lt;=n<br>li c, 0<br>for_c_begin(start2, end2, k, $0, jj)<br>load_arr(a, k, temp)<br>mult temp, i<br>mflo s<br>add s, s, c # s = a[k] * i + c<br>div s, ten<br>mfhi temp<br>mflo c # c = s / 10<br>store_arr(a, k, temp) # a[k] = s % 10<br>beqz c, skip<br>bne k, jj, skip<br>addi jj, jj, 1<br>skip: <br>for_end(start2, end2, k)<br>for_end(start1, end1, i)<br><br>for_decrease_c_begin(start4, end4, i, jj, $0) #k&gt;=i&gt;=0<br>load_arr(a, i, temp)<br>printInt(temp)<br>for_decrease_end(start4, end4, i)<br><br>printStr(enter)<br>done<br><br></code></pre></td></tr></table></figure><h3 id="易错点-5">易错点</h3><ul><li>超时问题,题目所给字符串为1000,为了避免每次循环都要进行1000次,我们设立一个参数<code>jj</code>,用来记录计算答案可能到达的最高位<ul><li>初始,<code>jj</code>=0</li><li>在for循环中,若循环参数<code>j</code>==<code>jj</code>,且此时向高一位传递的数不为0(<code>c!=0</code>),则对<code>jj</code>加一操作</li></ul></li><li><code>load_arr</code>与<code>store_arr</code>中不要用<code>mult</code>,这样涉及的寄存器会增多,且指令数会暴增,必须用<code>sll</code>.</li></ul><h1 id="上机">上机</h1><h2 id="p2_q1-发糖">P2_Q1 发糖</h2><blockquote><p>取K个糖,分发给n个人,要求每个人得到的糖果数量相同,剩下糖果若不够给每个人发一个,则视为剩余的糖果.现要求<span class="math inline">\(L\leq K\leqR\)</span>,保证n个人能得到的糖果最多,同时剩余的糖果最少.只输出剩余的糖果数量.</p></blockquote><h3 id="思路-3">思路</h3><blockquote><p>若L和R能发给同学的数量相同,即<span class="math inline">\(\lfloor\frac{L}{n}\rfloor=\lfloor\frac{R}{n}\rfloor\)</span>,则K取最小值即可,此时剩余糖果数量为<span class="math inline">\(L\%n\)</span>,若若L和R能发给同学的数量不相同,则K取<span class="math inline">\(\lfloor \frac{R}{n}\rfloor\timesn\)</span>个,剩余糖果数量一定为0</p></blockquote><h3 id="c语言">C语言</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span> &#123;<br>    <span class="hljs-type">int</span> n, L, R;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d %d %d&quot;</span>, &amp;n, &amp;L, &amp;R);<br>    <span class="hljs-keyword">if</span> (L / n == R / n) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, L % n);<br>    &#125; <span class="hljs-keyword">else</span> &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;0&quot;</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="p2_q2-欧拉筛">P2_Q2 欧拉筛</h2><blockquote><p>利用欧拉筛判断n是否为素数</p></blockquote><h2 id="p2_q3-有向图dfs">P2_Q3 有向图dfs</h2><blockquote><p>输入一个有向图,输出从一个规定起点出发能找到的死角(出度为0的点)个数,起点为死角则输出0</p></blockquote><h3 id="易错点-6">易错点</h3><blockquote><p>这道题只是一个翻译题,考察对递归函数的使用,但上级时出现了一些细节上的错误:</p><ul><li>寄存器重复赋别名,导致了多个变量共用一个寄存器,运行结果中出现了超时的问题,很遗憾没能早点发现for循环的参数和别的变量弄混了.</li><li>宏中的变量没有用%作为前缀,导致了本该是<code>%arr</code>的地方出现了<code>arr</code>,调用宏时指向了错误数组地址</li></ul></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
      <tag>MIPS</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>并查集</title>
    <link href="/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    <url>/2024/10/06/%E5%B9%B6%E6%9F%A5%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<h1 id="用途">用途</h1><blockquote><p>管理元素所属集合的数据结构,实现为一个森林,其中每棵树表示一个集合,树中的节点对应集合中的元素.其支持两种操作:</p><ul><li>合并:合并两个元素所属集合</li><li>查询:查询某个元素所属集合</li></ul></blockquote><h2 id="模板">模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs Java"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span>[] pre;<br><span class="hljs-comment">// 上级数组初始化</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">init</span><span class="hljs-params">(<span class="hljs-type">int</span> n)</span> &#123;<br>    pre = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>        pre[i] = i;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 寻找上级,并将上一级修改为最高的一级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-title function_">findPre</span><span class="hljs-params">(<span class="hljs-type">int</span> key)</span> &#123;<br>    <span class="hljs-keyword">if</span> (pre[key] == key) &#123;<br>        <span class="hljs-keyword">return</span> key;<br>    &#125;<br>    <span class="hljs-keyword">return</span> pre[key] = findPre(pre[key]);<br>&#125;<br><br><span class="hljs-comment">// 联合两个节点,使其拥有共同的上级</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">unite</span><span class="hljs-params">(<span class="hljs-type">int</span> x, <span class="hljs-type">int</span> y)</span> &#123;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rootx</span> <span class="hljs-operator">=</span> findPre(x);<br>    <span class="hljs-type">int</span> <span class="hljs-variable">rooty</span> <span class="hljs-operator">=</span> findPre(y);<br>    <span class="hljs-keyword">if</span> (rootx != rooty) &#123;<br>        pre[rootx] = rooty;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Verilog调试系统任务和编译预处理语句</title>
    <link href="/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/"/>
    <url>/2024/10/05/Verilog%E8%B0%83%E8%AF%95%E7%B3%BB%E7%BB%9F%E4%BB%BB%E5%8A%A1%E5%92%8C%E7%BC%96%E8%AF%91%E9%A2%84%E5%A4%84%E7%90%86%E8%AF%AD%E5%8F%A5/</url>
    
    <content type="html"><![CDATA[<h2 id="monitor">$monitor</h2><p>监视被测试模块的所有感兴趣的信号.</p><h2 id="monitorp1p2...pn">$monitor(p1,p2,...pn)</h2><p>按照格式字符串打印信号</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$monitor</span>(<span class="hljs-built_in">$time</span>, ,<span class="hljs-string">&quot;rxd=%b txd=%b&quot;</span>,rxd,txd);<br></code></pre></td></tr></table></figure><h2 id="monitor-on-monitor-off">$monitor on/ monitor off</h2><p>启动/关闭监控任务</p><h2 id="time">$time</h2><p>返回一个64位的整数来表示当前的仿真时刻值(总是输出整数)</p><h2 id="realtime">$realtime</h2><p>和$time作用相似,返回的是实型数</p><h2 id="finish">$finish</h2><p>退出仿真器,返回主操作系统</p><h2 id="stop">$stop</h2><p>将EDA工具置为暂停模式</p><h2 id="readmemb">$readmemb</h2><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemb</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;);<br><span class="hljs-built_in">$readmemh</span>(<span class="hljs-string">&quot;&lt;数据文件名&gt;&quot;</span>,&lt;存储器名&gt;,&lt;起始地址&gt;,&lt;结束地址&gt;);<br></code></pre></td></tr></table></figure><p>读取数据文件,其中<code>readmemb</code>读取的数字必须是二进制,<code>readmemh</code>读取的数字必须是十六进制.</p><h2 id="random">$random</h2><p>产生随机数</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">reg</span>[<span class="hljs-number">23</span>:<span class="hljs-number">0</span>] <span class="hljs-keyword">rand</span><br><span class="hljs-keyword">rand</span> = <span class="hljs-built_in">$random</span> % <span class="hljs-number">60</span>;<br><span class="hljs-comment">// 产生一个[-59,59]内的随机数</span><br></code></pre></td></tr></table></figure><h1 id="编译预处理">编译预处理</h1><h2 id="define">`define</h2><p>用一个指定的标识符(即名字)来代表一个字符串</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">define</span> 标识符(宏名) 字符串(宏内容)</span><br></code></pre></td></tr></table></figure><p>例:</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> test;<br>    <span class="hljs-keyword">reg</span> a,b,c,d,e,out;<br><span class="hljs-meta">`<span class="hljs-keyword">define</span> expression a + b + c + d</span><br>    <span class="hljs-keyword">assign</span> out = `expression + e;<br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="timescale">`timescale</h2><p>说明在该命令后的模块的事件单位和时间精度</p><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-meta">`<span class="hljs-keyword">timescale</span> &lt;时间单位&gt;/&lt;时间精度&gt;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣双周赛140</title>
    <link href="/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/"/>
    <url>/2024/09/29/%E5%8A%9B%E6%89%A3%E5%8F%8C%E5%91%A8%E8%B5%9B140/</url>
    
    <content type="html"><![CDATA[<h1 id="t1替换为数位和以后的最小元素">T1:<a href="https://leetcode.cn/problems/minimum-element-after-replacement-with-digit-sum/">替换为数位和以后的最小元素</a></h1><blockquote><p>给你一个整数数组 <code>nums</code> 。</p><p>请你将 <code>nums</code> 中每一个元素都替换为它的各个数位之<strong>和</strong> 。</p><p>请你返回替换所有元素以后 <code>nums</code> 中的 <strong>最小</strong>元素。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minElement</span>(<span class="hljs-params">self, nums: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        ans = inf<br>        <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> nums:<br>            tmp = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">while</span> x:<br>                tmp += x % <span class="hljs-number">10</span><br>                x= x//<span class="hljs-number">10</span><br>            ans = <span class="hljs-built_in">min</span>(ans, tmp)<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minElement</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : nums) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">tmp</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">while</span> (x &gt; <span class="hljs-number">0</span>) &#123;<br>                tmp += x % <span class="hljs-number">10</span>;<br>                x /= <span class="hljs-number">10</span>;<br>            &#125;<br>            ans = Integer.min(ans, tmp);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="t2高度互不相同的最大塔高和">T2:<a href="https://leetcode.cn/problems/maximize-the-total-height-of-unique-towers/">高度互不相同的最大塔高和</a></h1><blockquote><p>给你一个数组 <code>maximumHeight</code> ，其中<code>maximumHeight[i]</code> 表示第 <code>i</code> 座塔可以达到的<strong>最大</strong> 高度。</p><p>你的任务是给每一座塔分别设置一个高度，使得：</p><ol type="1"><li>第 <code>i</code> 座塔的高度是一个正整数，且不超过<code>maximumHeight[i]</code> 。</li><li>所有塔的高度互不相同。</li></ol><p>请你返回设置完所有塔的高度后，可以达到的 <strong>最大</strong>总高度。如果没有合法的设置，返回 <code>-1</code> 。</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximumTotalSum</span>(<span class="hljs-params">self, maximumHeight: <span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>) -&gt; <span class="hljs-built_in">int</span>:<br>        maximumHeight.sort(reverse = <span class="hljs-literal">True</span>)<br>        cnt = Counter(maximumHeight)<br>        ans = <span class="hljs-number">0</span><br>        curr = inf<br>        <span class="hljs-keyword">for</span> x, ct <span class="hljs-keyword">in</span> cnt.items():<br>            <span class="hljs-keyword">if</span> curr == inf:<br>                curr = x-ct<br>                <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                    ans += x-i<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">if</span> curr &lt;= x:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += curr - i <br>                    curr = curr-ct<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(ct):<br>                        ans += x - i <br>                    curr = x-ct<br>                <span class="hljs-keyword">if</span> curr &lt; <span class="hljs-number">0</span>:<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> ans<br><br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">long</span> <span class="hljs-title function_">maximumTotalSum</span><span class="hljs-params">(<span class="hljs-type">int</span>[] maximumHeight)</span> &#123;<br>        Arrays.sort(maximumHeight);<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> maximumHeight.length;<br>        <span class="hljs-type">int</span>[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            b[i] = maximumHeight[n-i-<span class="hljs-number">1</span>];<br>        &#125;<br>        maximumHeight = b;<br>        LinkedHashMap&lt;Integer,Integer&gt; cnt = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedHashMap</span>&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : maximumHeight) &#123;<br>            <span class="hljs-keyword">if</span> (cnt.containsKey(x)) &#123;<br>                cnt.put(x,cnt.get(x)+<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                cnt.put(x,<span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curr</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE;<br>        <span class="hljs-type">long</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0L</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> x : cnt.keySet()) &#123;<br>            <span class="hljs-keyword">if</span> (x &lt; curr) &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += x-k;<br>                &#125;<br>                curr = x - cnt.get(x);<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; k &lt; cnt.get(x); k++) &#123;<br>                    ans += curr-k;<br>                &#125;<br>                curr = curr - cnt.get(x);<br>            &#125;<br>            <span class="hljs-keyword">if</span> (curr &lt; <span class="hljs-number">0</span>) &#123;<br>                <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>注:这里一定要用LinkedHashMap,以此保证哈希表的关键字集是有序的(根据插入顺序)</p></blockquote><h2 id="灵茶山艾府解法">灵茶山艾府解法</h2><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">maximunTotalSum</span>(<span class="hljs-params">self, h:<span class="hljs-type">List</span>[<span class="hljs-built_in">int</span>]</span>)-&gt;<span class="hljs-built_in">int</span>:<br>        h.sort(reverse=<span class="hljs-literal">True</span>)<br>        n = <span class="hljs-built_in">len</span>(h)<br>        ans = h[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>            h[i] = <span class="hljs-built_in">min</span>(h[i-<span class="hljs-number">1</span>]-<span class="hljs-number">1</span>, h[i])<br>            ans += h[i]<br>        <span class="hljs-keyword">return</span> ans<br></code></pre></td></tr></table></figure><h1 id="t3字典序最小的合法序列">T3:<a href="https://leetcode.cn/problems/find-the-lexicographically-smallest-valid-sequence/">字典序最小的合法序列</a></h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] validSequence(String s, String T) &#123;<br>        <span class="hljs-type">char</span>[] s = S.toCharArray();<br>        <span class="hljs-type">char</span>[] t = T.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length;<br>        <br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        suf[n] = m;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s[i] == t[j]) &#123;<br>                j--;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br>        <br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[m];<br>        <span class="hljs-type">boolean</span> <span class="hljs-variable">changed</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">if</span> (s[i] == t[j] || !changed &amp;&amp; suf[i+<span class="hljs-number">1</span>] &lt;= j+<span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">if</span> (s[i] != t[j]) &#123;<br>                    changed = <span class="hljs-literal">true</span>;<br>                &#125;<br>                ans[j++] = i;<br>                <span class="hljs-keyword">if</span> (j == m) &#123;<br>                    <span class="hljs-keyword">return</span> ans;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;&#125;;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="补充最少得分子序列">补充:<a href="https://leetcode.cn/problems/subsequence-with-the-minimum-score/">最少得分子序列</a></h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minimumScore</span><span class="hljs-params">(String s, String t)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> t.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> m-<span class="hljs-number">1</span>;<br>        <span class="hljs-type">int</span>[] suf = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        Arrays.fill(suf, m);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> n-<span class="hljs-number">1</span>; i &gt;= <span class="hljs-number">0</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (j &gt;= <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) == t.charAt(j)) &#123;<br>                j--;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (j &lt; <span class="hljs-number">0</span>)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>            &#125;<br>            suf[i] = j+<span class="hljs-number">1</span>;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> suf[<span class="hljs-number">0</span>];<br>        j = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == t.charAt(j)) &#123;<br>                j++;<br>                ans = Integer.min(ans, suf[i+<span class="hljs-number">1</span>] - j);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="t4第一个几乎相等子字符串的下标">T4:<a href="https://leetcode.cn/problems/find-the-occurrence-of-first-almost-equal-substring/">第一个几乎相等子字符串的下标</a></h1><blockquote><p>利用Z算法，分别求出pattern与s的公共最长前缀数组和公共最长后缀数组，索引从小到大遍历，返回对应前缀+后缀<span class="math inline">\(\geq\)</span>len(pattern)-1(即几乎相等)的下标.</p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span>:<br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">calc_z</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">list</span>[<span class="hljs-built_in">int</span>]:<br>        n = <span class="hljs-built_in">len</span>(s)<br>        z = [<span class="hljs-number">0</span>] * n<br>        box_l = box_r = <span class="hljs-number">0</span>  <span class="hljs-comment"># z-box 左右边界</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>, n):<br>            <span class="hljs-keyword">if</span> i &lt;= box_r:<br>                z[i] = <span class="hljs-built_in">min</span>(z[i - box_l], box_r - i + <span class="hljs-number">1</span>)  <span class="hljs-comment"># 改成手动 if 可以加快速度</span><br>            <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>                box_l, box_r = i, i + z[i]<br>                z[i] += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> z<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">minStartingIndex</span>(<span class="hljs-params">self, s: <span class="hljs-built_in">str</span>, pattern: <span class="hljs-built_in">str</span></span>) -&gt; <span class="hljs-built_in">int</span>:<br>        pre_z = <span class="hljs-variable language_">self</span>.calc_z(pattern + s)<br>        suf_z = <span class="hljs-variable language_">self</span>.calc_z(pattern[::-<span class="hljs-number">1</span>] + s[::-<span class="hljs-number">1</span>])<br>        suf_z.reverse()  <span class="hljs-comment"># 也可以不反转，下面写 suf_z[-i]</span><br>        m = <span class="hljs-built_in">len</span>(pattern)<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(m, <span class="hljs-built_in">len</span>(s) + <span class="hljs-number">1</span>):<br>            <span class="hljs-keyword">if</span> pre_z[i] + suf_z[i - <span class="hljs-number">1</span>] &gt;= m - <span class="hljs-number">1</span>:<br>                <span class="hljs-keyword">return</span> i - m<br>        <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span><br>               <br></code></pre></td></tr></table></figure><h2 id="扩展z算法z-algorithm扩展kmp">扩展:Z算法(ZAlgorithm,扩展KMP)</h2><h3 id="定义">定义</h3><blockquote><p>对于一个长度为<code>n</code>的字符串s,定义函数<code>z[i]</code>表示<code>s</code>和s[i,n-1]的最长公共前缀(<code>LCP</code>)的长度,则z称为s的Z函数,热别地,<code>z[0]=0</code></p></blockquote><h3 id="朴素算法">朴素算法</h3><blockquote><p>时间复杂度:<span class="math inline">\(O(n^2)\)</span></p></blockquote><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">z_function_trivial</span>(<span class="hljs-params">s</span>):<br>    n = <span class="hljs-built_in">len</span>(s)<br>    z = [<span class="hljs-number">0</span>] * n<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">1</span>,n):<br>        <span class="hljs-keyword">while</span> i + z[i] &lt; n <span class="hljs-keyword">and</span> s[z[i]] == s[i + z[i]]:<br>            z[i] += <span class="hljs-number">1</span><br><span class="hljs-keyword">return</span> z<br></code></pre></td></tr></table></figure><h3 id="线性算法">线性算法</h3><h4 id="思路">思路</h4><blockquote><p>我们从1到n-1顺次计算z[i],在计算z[i]的过程中,我们会利用已经计算好的z[0],...z[i-1].</p><p><code>[i,i+z[i]-1]</code>称为i的匹配段(<code>Z-box</code>)</p><p>算法过程中我们维护右端点最靠右的匹配段,记作[l,r],s[l,r]是s的前缀,在计算z[i]时保证l<span class="math inline">\(\leq\)</span>i,初始时l=r=0</p><p>在计算z[i]的过程中:</p><ul><li>如果<span class="math inline">\(i\leqr\)</span>,则s[i,r]=s[i-l,r-l](字符串相同),因此<span class="math inline">\(z[i]\geq min(z[i-l],r-i+1)\)</span><ul><li>若<span class="math inline">\(z[i-l]&lt;r-i+1\)</span>,则z[i]=z[i-l]</li><li>否则<span class="math inline">\(z[i-l]\geqr-i+1\)</span>,这时z[i]=r-i+1,然后暴力枚举下一个字符扩展z[i]直到不能扩展为止</li></ul></li><li>如果<span class="math inline">\(i\geqr\)</span>,那么我们直接按照朴素算法,从s[i]开始比较,暴力求出z[i]</li><li>在求出z[i]后,如果i+z[i]-1&gt;r,更新[l,r],即令l=i,r=i+z[i]-1</li></ul></blockquote><h4 id="动画">动画</h4><figure><img src="image-20240929164214557.png" alt="Z算法动画"><figcaption aria-hidden="true">Z算法动画</figcaption></figure><h4 id="时间复杂度">时间复杂度</h4><p>线性遍历，<span class="math inline">\(O(n)\)</span></p>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>线段树</title>
    <link href="/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/"/>
    <url>/2024/09/29/%E7%BA%BF%E6%AE%B5%E6%A0%91/</url>
    
    <content type="html"><![CDATA[<h1 id="线段树">线段树</h1><h2 id="建立">建立</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] d;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">build</span><span class="hljs-params">(<span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (s == t)&#123;<br>        d[p] = a[s];<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    m = s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    build(s,m,p*<span class="hljs-number">2</span>);<br>    build(m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[(p*<span class="hljs-number">2</span>) + <span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询">查询</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t. <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; r &gt;= t)&#123;<br>        <span class="hljs-keyword">return</span> d[p];<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>), sum = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改增加带懒惰标记">修改(增加)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">private</span> <span class="hljs-type">int</span>[] b;<br><span class="hljs-comment">// 数组b存储懒惰标记</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-comment">// l,r为修改区间,c为修改量,[s,t]为当前节点包含的区间,p为当前节点的编号</span><br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r)&#123;<br>        d[p] += (t-s+<span class="hljs-number">1</span>)*c;<br>        b[p] += c;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p] &amp;&amp; s != t) &#123;<br>        <span class="hljs-comment">// 如果当前节点的懒惰标记非空,则更新当前节点两个字节点的值和懒惰标记值</span><br>        d[p * <span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p * <span class="hljs-number">2</span>] += b[p];<br>        b[p * <span class="hljs-number">2</span> + <span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>; <span class="hljs-comment">// 当前节点的懒惰标记值清零</span><br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    d[p] = d[p*<span class="hljs-number">2</span>] + d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>];<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="查询带懒惰标记">查询(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span>&#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (b[p]) &#123;<br>        <span class="hljs-comment">// 这里不用判断是否是子节点,因为上面查询环节会直接返回值</span><br>        d[p*<span class="hljs-number">2</span>] += b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] += b[p];<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += b[p];<br>        b[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) sum += getSum(l,r,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="修改赋值带懒惰标记">修改(赋值)(带懒惰标记)</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">void</span> <span class="hljs-title function_">update</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> c, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) &#123;<br>        d[p] = (t-s+<span class="hljs-number">1</span>) *c, b[p] = c,v[p] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">return</span> ;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p]) &#123;<br>        d[p*<span class="hljs-number">2</span>] = b[p] * (m-s+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p] * (t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>=<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-keyword">if</span> (l &lt;= m) update(l,r,c,s,m,p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r&gt;m)update(l,r,c,m+<span class="hljs-number">1</span>,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getSum</span><span class="hljs-params">(<span class="hljs-type">int</span> l, <span class="hljs-type">int</span> r, <span class="hljs-type">int</span> s, <span class="hljs-type">int</span> t, <span class="hljs-type">int</span> p)</span> &#123;<br>    <span class="hljs-keyword">if</span> (l &lt;= s &amp;&amp; t &lt;= r) <span class="hljs-keyword">return</span> d[p];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> s + ((t-s) &gt;&gt; <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">if</span> (v[p])&#123;<br>        d[p * <span class="hljs-number">2</span>] += d[p] * (s-m+<span class="hljs-number">1</span>);<br>        d[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] += d[p] *(t-m);<br>        b[p*<span class="hljs-number">2</span>] = b[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = b[p];<br>        v[p*<span class="hljs-number">2</span>] = v[p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>] = <span class="hljs-number">1</span>;<br>        v[p] = <span class="hljs-number">0</span>;<br>    &#125;<br>    <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span>(l &lt;= m) sum = getSum(l, r, s, m, p*<span class="hljs-number">2</span>);<br>    <span class="hljs-keyword">if</span> (r &gt; m) sum += getSum(l,r,m,t,p*<span class="hljs-number">2</span>+<span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">return</span> sum;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>HDLBITS-CS450</title>
    <link href="/2024/09/25/HDLBITS-CS450/"/>
    <url>/2024/09/25/HDLBITS-CS450/</url>
    
    <content type="html"><![CDATA[<h1 id="timer">timer</h1><figure><img src="image-20240925222315525.png" alt="timer"><figcaption aria-hidden="true">timer</figcaption></figure><blockquote><p>模拟一个计时器,当Load为1时,载入data,指定其为倒计时的时间;当load为0时,时间减一.当倒计时结束时将tc输出为高电平</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br><span class="hljs-keyword">input</span> clk, <br><span class="hljs-keyword">input</span> load, <br><span class="hljs-keyword">input</span> [<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] data, <br><span class="hljs-keyword">output</span> tc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">9</span>:<span class="hljs-number">0</span>] ct;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (load)<span class="hljs-keyword">begin</span><br>            ct &lt;= data;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (ct == <span class="hljs-number">0</span>)<span class="hljs-keyword">begin</span><br>                ct &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                ct &lt;= ct - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> tc = (ct ==<span class="hljs-number">0</span>) ? <span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="counter-2bc">counter 2bc</h1><figure><img src="image-20240926161655168.png" alt="counter 2bc"><figcaption aria-hidden="true">counter 2bc</figcaption></figure><blockquote><p>模拟一个二位计数器,当<code>train_valid</code>为高电平时,计数器根据<code>train_taken</code>改变状态,如果高电平则加一,反之减一.当计数器减少到0时,将不会再减少,而是保持原状;增加到3时,将不会再增加,而是保持原状.<code>areset</code>为异步复位,将计数器复位到<code>2'b01</code></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">output</span> [<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] state<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            state &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                    state &lt;= state &lt; <span class="hljs-number">3</span> ? state + <span class="hljs-number">1</span> : <span class="hljs-number">3</span>;<br>                <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                    state &lt;= state &gt; <span class="hljs-number">0</span> ? state-<span class="hljs-number">1</span> : <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                state &lt;= state;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="history-shift">history shift</h1><figure><img src="image-20240926162359702.png" alt="history shift1"><figcaption aria-hidden="true">history shift1</figcaption></figure><figure><img src="image-20240926162425714.png" alt="history shift2"><figcaption aria-hidden="true">history shift2</figcaption></figure><blockquote><p>32位历史移位寄存器,并搭配回滚功能.</p><p>当<code>predict_valid</code>为高电平时,表示当前正处于预测状态,寄存器从LSB一侧移入一位预测的结果(<code>predict_taken</code>)</p><p>当<code>mispredicted</code>为高电平时,意味着预测发生错误,此时寄存器必须回滚到发生错误之前的状态(这里原文说的是"冲刷流水线"),并丢弃那些错误发生之后的状态(younger)</p><p>当<code>predict_valid</code>,<code>mispredicted</code>同时发生,后者优先级更高</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span> predict_valid,<br>    <span class="hljs-keyword">input</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] train_history<br>);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history = <span class="hljs-number">32&#x27;d0</span>;<br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">30</span>:<span class="hljs-number">0</span>],predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                predict_history &lt;= predict_history;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure><h1 id="gshare">gshare</h1><figure><img src="屏幕截图_26-9-2024_162629_hdlbits.01xz.net.jpeg" alt="gshare"><figcaption aria-hidden="true">gshare</figcaption></figure><blockquote><p>根据题意,我们要增加128个2位PHT(pattern historytable,模式匹配表),PHT根据7位<code>train_history</code>与7位<code>train_pc</code>异或结果进行寻址</p><p>电路分为两大部分:预测+训练.两者分别参考<em>historyshift</em>与<em>counter 2bc</em></p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> top_module(<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br><br>    <span class="hljs-keyword">input</span>  predict_valid,<br>    <span class="hljs-keyword">input</span>  [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_pc,<br>    <span class="hljs-keyword">output</span> predict_taken,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] predict_history,<br><br>    <span class="hljs-keyword">input</span> train_valid,<br>    <span class="hljs-keyword">input</span> train_taken,<br>    <span class="hljs-keyword">input</span> train_mispredicted,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_history,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">6</span>:<span class="hljs-number">0</span>] train_pc<br>);<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">1</span>:<span class="hljs-number">0</span>] PHT[<span class="hljs-number">127</span>:<span class="hljs-number">0</span>];<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            predict_history &lt;= <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">128</span>; i++)<span class="hljs-keyword">begin</span><br>              PHT[i] &lt;= <span class="hljs-number">2&#x27;b01</span>;<br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            <span class="hljs-keyword">if</span> (train_valid &amp;&amp; train_mispredicted)<span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;train_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>],train_taken&#125;;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (predict_valid) <span class="hljs-keyword">begin</span><br>                predict_history &lt;= &#123;predict_history[<span class="hljs-number">5</span>:<span class="hljs-number">0</span>], predict_taken&#125;;<br>            <span class="hljs-keyword">end</span><br>            <br>            <span class="hljs-keyword">if</span> (train_valid)<span class="hljs-keyword">begin</span><br>                <span class="hljs-keyword">if</span> (train_taken)<span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b11</span> ? <br>                <span class="hljs-number">2&#x27;b11</span> : PHT[train_history ^ train_pc] + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>                PHT[train_history ^ train_pc] &lt;= PHT[train_history ^ train_pc] == <span class="hljs-number">2&#x27;b0</span> ? <br>                <span class="hljs-number">2&#x27;b0</span> : PHT[train_history ^ train_pc] - <span class="hljs-number">1</span>;<br>                <span class="hljs-keyword">end</span><br>            <span class="hljs-keyword">end</span><br>        <span class="hljs-keyword">end</span><br>                    <br>    <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">assign</span> predict_taken = PHT[predict_history ^ predict_pc][<span class="hljs-number">1</span>];<br>    <br><span class="hljs-keyword">endmodule</span><br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 深克隆与浅克隆</title>
    <link href="/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/"/>
    <url>/2024/09/25/Java-%E6%B7%B1%E5%85%8B%E9%9A%86%E4%B8%8E%E6%B5%85%E5%85%8B%E9%9A%86/</url>
    
    <content type="html"><![CDATA[<h1 id="java-深克隆与浅克隆">Java 深克隆与浅克隆</h1><h2 id="定义">定义</h2><h3 id="浅克隆">浅克隆</h3><blockquote><p>在克隆对象时,只复制对象本身及其内部引用的基本数据类型字段的值,而不复制引用类型字段所指向的对象.这意味着克隆后的对象和原始对象会共享一部分引用对象</p></blockquote><p>下面是一份Java代码样例.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Cloneable</span> &#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>        <span class="hljs-keyword">return</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span>&#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span>&#123;&#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span>&#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>,<span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> +  adv2.getName());<br>        &#125;<span class="hljs-keyword">catch</span>(Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br><br>&#125;<br><span class="hljs-comment">/*output:</span><br><span class="hljs-comment">10 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">*/</span><br><br></code></pre></td></tr></table></figure><blockquote><p>可以看到,代码对Adventurer类进行了<code>clone()</code>方法的重载,但并没有对其引用类<code>Weapon</code>类进行克隆.这样的克隆方法只复制了<code>Adventurer</code>类所持有的<code>name</code>,而没有复制<code>Weapon</code>.</p></blockquote><h3 id="深克隆">深克隆</h3><blockquote><p>我们对重载<code>clone()</code>方法做修改,使其可以复制引用类Weapon类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>    <span class="hljs-keyword">return</span> copy;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>这里我们调用<code>Weapon</code>的创建方法,使其复制了一个新的Weapon并将其作为复制对象的引用类.代码重新运行的结果如下:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-number">8</span> <span class="hljs-number">10</span><br>xiaohong xiaoming<br></code></pre></td></tr></table></figure><blockquote><p>可以看到,对adv2(第二个<code>Adventurer</code>类)的<code>Weapon</code>进行修改,并不会改变<code>adv1</code>的Weapon的<code>atk</code>值,说明两个<code>Adventurer</code>类所引用的<code>Weapon</code>类已不是同一个.</p></blockquote><h2 id="深克隆方法">深克隆方法</h2><p>在 Java 中，常见的实现深克隆的方式有：</p><ol type="1"><li>通过继承 <code>Cloneable</code> 接口，重写 <code>clone()</code>方法实现深克隆；</li><li>通过序列化与反序列化的方式实现深克隆；</li><li>第三方工具类实现深克隆，克隆对象需继承 <code>Serializable</code>接口。</li></ol><h3 id="override-clone">Override clone()</h3><blockquote><p>前文已经介绍这种方法.</p><p>在<code>Object</code>类中的<code>clone()</code>方法的声明中包含了<code>throws CloneNotSupportedException</code>，因此如果你的类实现了<code>Cloneable</code>接口并重写了<code>clone()</code>方法，而在该方法中调用了<code>super.clone()</code>，那么你的方法也需要声明会抛出<code>CloneNotSupportedException</code>异常。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException&#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<span class="hljs-comment">// 复制本类</span><br>    copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<span class="hljs-comment">// 复制引用类</span><br>    <span class="hljs-keyword">return</span> copy;<span class="hljs-comment">//返回复制对象</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="serialize-and-deserialize">Serialize and Deserialize</h3><blockquote><p>要实现序列化,我们首先改变<code>Adventurer</code>类与<code>Weapon</code>类的接口,将其修改为<code>Serializable</code></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span><br></code></pre></td></tr></table></figure><blockquote><p>通过新建<code>DeepCopyCloneUtil</code>类搭建<code>deepClone(T object)</code>方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>在<code>main()</code>中运行以下语句:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>    adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>    adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>    System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>    System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>&#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>    System.out.println(e);<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>得到结果为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">liming wangming<br><span class="hljs-number">23</span> <span class="hljs-number">999</span><br></code></pre></td></tr></table></figure><h3 id="third-party-tools">Third-Party Tools</h3><blockquote><p>打开IDEA,文件-&gt;项目结构-&gt;库,点击"+",选择"来自Maven",输入com.google.code.gson进行搜索,下载对应安装包,对应导入语句为:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> com.google.gson.Gson;<br></code></pre></td></tr></table></figure><blockquote><p>我们利用Gson这个第三方库实现深克隆</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br><span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br><span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br></code></pre></td></tr></table></figure><blockquote><p>运行结果:</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">Bob Alice<br><span class="hljs-number">19</span> <span class="hljs-number">100</span><br></code></pre></td></tr></table></figure><h2 id="附整体代码">附:整体代码</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.io.*;<br><span class="hljs-keyword">import</span> com.google.gson.Gson;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Adventurer</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span>, Cloneable&#123;<br>    <span class="hljs-keyword">public</span> String name;<br>    <span class="hljs-keyword">public</span> Weapon wp;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Adventurer</span><span class="hljs-params">(String name, <span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>        <span class="hljs-built_in">this</span>.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(atk);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> Adventurer <span class="hljs-title function_">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">copy</span> <span class="hljs-operator">=</span> (Adventurer) <span class="hljs-built_in">super</span>.clone();<br>        copy.wp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Weapon</span>(<span class="hljs-built_in">this</span>.wp);<br>        <span class="hljs-keyword">return</span> copy;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setName</span><span class="hljs-params">(String name)</span> &#123;<br>        <span class="hljs-built_in">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">getName</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Weapon</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Serializable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> atk;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">setAtk</span><span class="hljs-params">(<span class="hljs-type">int</span> atk)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">getAtk</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">return</span> atk;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Weapon</span><span class="hljs-params">(Weapon wp)</span> &#123;<br>        <span class="hljs-built_in">this</span>.atk = wp.atk;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DeepCopyCloneUtil</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> &lt;T&gt; T <span class="hljs-title function_">deepClone</span><span class="hljs-params">(T object)</span> <span class="hljs-keyword">throws</span> IOException, ClassNotFoundException &#123;<br>        <span class="hljs-type">ByteArrayOutputStream</span> <span class="hljs-variable">bos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayOutputStream</span>();<br>        <span class="hljs-type">ObjectOutputStream</span> <span class="hljs-variable">oos</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectOutputStream</span>(bos);<br>        oos.writeObject(object);<br>        oos.close();<br><br>        <span class="hljs-type">ByteArrayInputStream</span> <span class="hljs-variable">bis</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ByteArrayInputStream</span>(bos.toByteArray());<br>        <span class="hljs-type">ObjectInputStream</span> <span class="hljs-variable">ois</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ObjectInputStream</span>(bis);<br>        <span class="hljs-type">T</span> <span class="hljs-variable">clonedObject</span> <span class="hljs-operator">=</span> (T) ois.readObject();<br>        ois.close();<br><br>        <span class="hljs-keyword">return</span> clonedObject;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TestClone</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;xiaohong&quot;</span>, <span class="hljs-number">8</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv2</span> <span class="hljs-operator">=</span> adv1.clone();<br>            adv2.wp.setAtk(<span class="hljs-number">10</span>);<br>            adv2.setName(<span class="hljs-string">&quot;xiaoming&quot;</span>);<br>            System.out.println(adv1.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv2.wp.getAtk());<br>            System.out.println(adv1.getName() + <span class="hljs-string">&quot; &quot;</span> + adv2.getName());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;liming&quot;</span>, <span class="hljs-number">23</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv4</span> <span class="hljs-operator">=</span> DeepCopyCloneUtil.deepClone(adv3);<br>            adv4.setName(<span class="hljs-string">&quot;wangming&quot;</span>);<br>            adv4.wp.setAtk(<span class="hljs-number">999</span>);<br>            System.out.println(adv3.getName() + <span class="hljs-string">&quot; &quot;</span> + adv4.getName());<br>            System.out.println(adv3.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv4.wp.getAtk());<br>        &#125; <span class="hljs-keyword">catch</span> (Exception e) &#123;<br>            System.out.println(e);<br>        &#125;<br><br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv5</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Adventurer</span>(<span class="hljs-string">&quot;Bob&quot;</span>, <span class="hljs-number">19</span>);<br>        <span class="hljs-type">Gson</span> <span class="hljs-variable">gson</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Gson</span>();<br>        <span class="hljs-type">Adventurer</span> <span class="hljs-variable">adv6</span> <span class="hljs-operator">=</span> gson.fromJson(gson.toJson(adv5), Adventurer.class);<br><br>        adv6.setName(<span class="hljs-string">&quot;Alice&quot;</span>);<br>        adv6.wp.setAtk(<span class="hljs-number">100</span>);<br>        System.out.println(adv5.getName() + <span class="hljs-string">&quot; &quot;</span> + adv6.getName());<br>        System.out.println(adv5.wp.getAtk() + <span class="hljs-string">&quot; &quot;</span> + adv6.wp.getAtk());<br>    &#125;<br><br>&#125;<br><br><span class="hljs-comment">/*</span><br><span class="hljs-comment">8 10</span><br><span class="hljs-comment">xiaohong xiaoming</span><br><span class="hljs-comment">liming wangming</span><br><span class="hljs-comment">23 999</span><br><span class="hljs-comment">Bob Alice</span><br><span class="hljs-comment">19 100</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>计组P0总结</title>
    <link href="/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/"/>
    <url>/2024/09/24/%E8%AE%A1%E7%BB%84P0%E6%80%BB%E7%BB%93/</url>
    
    <content type="html"><![CDATA[<h2 id="p0q4logisim中的fsm">P0Q4:Logisim中的FSM</h2><blockquote><p>通过搭建Mealy状态机来实现正则表达式的检测</p></blockquote><blockquote><p>首先要分清Mealy状态机和Moore状态机在Logisim电路搭建中的区别</p></blockquote><h3 id="mealy状态机与moore状态机">Mealy状态机与Moore状态机</h3><h4 id="mealy状态机">Mealy状态机</h4><figure><img src="image-20240924155626167.png" alt="Mealy状态机基本框架(同步复位)"><figcaption aria-hidden="true">Mealy状态机基本框架(同步复位)</figcaption></figure><blockquote><p>Mealy状态机的输出由当前状态和输入两者共同决定</p></blockquote><h4 id="moore状态机">Moore状态机</h4><figure><img src="image-20240924160204641.png" alt="Moore状态机框架(异步复位)"><figcaption aria-hidden="true">Moore状态机框架(异步复位)</figcaption></figure><blockquote><p>Moore状态机的输出由当前状态决定</p></blockquote><h3 id="解题步骤">解题步骤</h3><p>对于本题Mealy状态机,我们分以下四步完成搭建.</p><ol type="1"><li>确定状态编码,画出状态转移</li><li>搭建Mealy状态机框架,确定复位方式</li><li>实现状态转移的Logisim电路</li><li>实现输出逻辑的Logisim电路</li></ol><h4 id="确定状态编码画出状态转移">确定状态编码,画出状态转移</h4><table><thead><tr class="header"><th>编码</th><th>状态</th></tr></thead><tbody><tr class="odd"><td>S0</td><td>IDLE(空闲,当reset置1时回到此状态)</td></tr><tr class="even"><td>S1</td><td>"b"</td></tr><tr class="odd"><td>S2</td><td>"bb"</td></tr><tr class="even"><td>S3</td><td>"ba","bc","bba"或"bbc"</td></tr><tr class="odd"><td>S4</td><td>满足正则表达式的状态</td></tr></tbody></table><figure><img src="55c3cda2c7b623233f71ab3df85d9dc.jpg" alt="状态转移图"><figcaption aria-hidden="true">状态转移图</figcaption></figure><h4 id="搭建mealy状态机框架确定复位方式">搭建Mealy状态机框架,确定复位方式</h4><figure><img src="image-20240924162641868.png" alt="Mealy状态机+同步复位"><figcaption aria-hidden="true">Mealy状态机+同步复位</figcaption></figure><h4 id="实现状态转移的logisim电路">实现状态转移的Logisim电路</h4><h5 id="确定in与state">确定In与state</h5><blockquote><p>通过comparator联通对应的tunnel</p></blockquote><figure><img src="image-20240924163022813.png" alt="确定输入In"><figcaption aria-hidden="true">确定输入In</figcaption></figure><figure><img src="image-20240924163130250.png" alt="确定上一个状态state"><figcaption aria-hidden="true">确定上一个状态state</figcaption></figure><h5 id="根据状态转移图搭建变换关系电路">根据状态转移图搭建变换关系电路</h5><blockquote><p>通过与非门与multiplexer,实现变换关系.这里我们以s1为例说明,若s1与b均为1,则nxt置2,反之置为0.</p></blockquote><figure><img src="image-20240924163249957.png" alt="S1状态可能出现的下一个状态"><figcaption aria-hidden="true">S1状态可能出现的下一个状态</figcaption></figure><h5 id="输出下一个状态">输出下一个状态</h5><blockquote><p>利用或门性质,对于这13个输入,只有其中一个是有效的,其余皆为0(我在这里还加入了一个实际上无效果的<span class="math inline">\(s4\rightarrow s0\)</span>,便于检查)</p></blockquote><figure><img src="image-20240924163603386.png" alt="输出下一个状态"><figcaption aria-hidden="true">输出下一个状态</figcaption></figure><h4 id="实现输出逻辑的logisim电路">实现输出逻辑的Logisim电路</h4><blockquote><p>考虑输入和当前状态两者,只有它们所决定的下一个状态为s4时,output才为1,否则为0</p></blockquote><figure><img src="image-20240924163830605.png" alt="输出逻辑"><figcaption aria-hidden="true">输出逻辑</figcaption></figure><h3 id="思考">思考</h3><h4 id="section">1</h4><p>状态存储器的复位方式包括<strong>异步复位</strong>和<strong>同步复位</strong>，二者的定义分别是什么？两种复位方式在Verilog 中可以通过什么语句句式实现？在 Logisim中又可以通过什么样的电路框架实现？</p><blockquote><p>同步复位:当时钟信号的上升沿到来时,若复位信号有效,对系统进行复位.</p><p>异步复位:当复位信号有效时,立即对系统进行复位.这一过程与时钟信号无关.</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 同步复位</span><br><span class="hljs-keyword">module</span> synchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> reset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (reset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-comment">// 异步复位</span><br><span class="hljs-keyword">module</span> asynchronous_reset(<br><span class="hljs-keyword">input</span> a,<br><span class="hljs-keyword">input</span> b,<br>    <span class="hljs-keyword">input</span> clk,<br>    <span class="hljs-keyword">input</span> areset,<br>    <span class="hljs-keyword">output</span> c);<br>    <span class="hljs-keyword">always</span> @(<span class="hljs-keyword">posedge</span> clk <span class="hljs-keyword">or</span> <span class="hljs-keyword">posedge</span> areset)<span class="hljs-keyword">begin</span><br>        <span class="hljs-keyword">if</span> (areset)<span class="hljs-keyword">begin</span><br>            c &lt;= <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">end</span> <span class="hljs-keyword">else</span> <span class="hljs-keyword">begin</span><br>            c &lt;= a &amp; b;<br>        <span class="hljs-keyword">end</span><br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><blockquote><p>在Logisim中,寄存器的clear端口可以很方便地实现异步复位,而同步复位需要在信号输入D端口前加上一个multplexer,由areset决定信号不变还是置0,待下一次时钟信号上升沿输入寄存器</p></blockquote><figure><img src="image-20240924165125605.png" alt="异步复位"><figcaption aria-hidden="true">异步复位</figcaption></figure><figure><img src="image-20240924165228120.png" alt="同步复位"><figcaption aria-hidden="true">同步复位</figcaption></figure><h4 id="section-1">2</h4><p>在 Verilog中我们可以通过<code>initial</code>块对状态存储器的初值进行定义，在Logisim 中我们可以通过哪些电路框架实现赋初值的功能？</p><blockquote><p>要实现对于是否处于初始状态的判断,我们需要用到Counter和plexer,基本逻辑框架如下</p></blockquote><figure><img src="image-20240924170237417.png" alt="使用Counter实现初始赋值"><figcaption aria-hidden="true">使用Counter实现初始赋值</figcaption></figure><blockquote><p>基于此,我们可以实现一个带有初始赋值功能的寄存器</p></blockquote><figure><img src="image-20240924170627688.png" alt="带有初始赋值功能的寄存器"><figcaption aria-hidden="true">带有初始赋值功能的寄存器</figcaption></figure><h2 id="p0q1crc-校验码计算电路的设计与测试">P0Q1:CRC校验码计算电路的设计与测试</h2><h4 id="设计模二除法器">设计模二除法器</h4><figure><img src="image-20240924172513329.png" alt="模二除法器端口"><figcaption aria-hidden="true">模二除法器端口</figcaption></figure><blockquote><p>注:本题不需要用到D端口</p></blockquote><figure><img src="image-20240924172631774.png" alt="模二除法器"><figcaption aria-hidden="true">模二除法器</figcaption></figure><h4 id="使用四位模二除法器搭建-8-位-crc-校验码计算电路">使用四位模二除法器搭建8 位 CRC 校验码计算电路</h4><figure><img src="image-20240924172846401.png" alt="CRC校验码计算电路"><figcaption aria-hidden="true">CRC校验码计算电路</figcaption></figure><h2 id="p0q2实现grf">P0Q2:实现GRF</h2><h3 id="端口">端口</h3><figure><img src="image-20240924194642759.png" alt="端口"><figcaption aria-hidden="true">端口</figcaption></figure><figure><img src="image-20240924194631439.png" alt="功能"><figcaption aria-hidden="true">功能</figcaption></figure><figure><img src="image-20240924185937157.png" alt="端口电路"><figcaption aria-hidden="true">端口电路</figcaption></figure><h3 id="主要部件">主要部件</h3><figure><img src="image-20240924185908829.png" alt="32个32位寄存器"><figcaption aria-hidden="true">32个32位寄存器</figcaption></figure><figure><img src="image-20240924185924211.png" alt="选择器组件"><figcaption aria-hidden="true">选择器组件</figcaption></figure><h3 id="问题">问题</h3><h4 id="三态">三态</h4><blockquote><p>在选择器组件中,我们必须将DMX(demultiplexer)中的three-state设置为yes</p><p>启用three-state后,会控制demultiplexer的输入输出端口进入高阻态</p></blockquote><figure><img src="image-20240924193047096.png" alt="示例电路"><figcaption aria-hidden="true">示例电路</figcaption></figure><blockquote><p>先设定DMX的three-state为no,WE为1,IN为1,SEL为0,在时钟信号上升沿:</p></blockquote><figure><img src="image-20240924193237747.png" alt="OUT1为高电平"><figcaption aria-hidden="true">OUT1为高电平</figcaption></figure><blockquote><p>可以看到寄存器1存储值为1,OUT1为高电平</p></blockquote><blockquote><p>接着再令SEL为1,在下一个时钟上升沿:</p></blockquote><figure><img src="image-20240924193352492.png" alt="OUT1恢复为低电平,OUT2变为高电平"><figcaption aria-hidden="true">OUT1恢复为低电平,OUT2变为高电平</figcaption></figure><blockquote><p>可以看到OUT1恢复为低电平,OUT2变为高电平,这其实并不符合我们的本意.OUT1此刻应该保持为高电平,且寄存器1不应该改变值为0.</p></blockquote><blockquote><p>最简便的对策就是勾选three-state,这样DMX的输出端口在未被SEL信号选中的时候会输出高阻值(X),避免对连接的寄存器和输出端口产生影响.</p></blockquote><p>P0附加题:ftoi</p><figure><img src="image-20240925081703388.png" alt="主电路"><figcaption aria-hidden="true">主电路</figcaption></figure><figure><img src="image-20240925081714186.png" alt="normalize"><figcaption aria-hidden="true">normalize</figcaption></figure><figure><img src="image-20240925081724381.png" alt="补码器"><figcaption aria-hidden="true">补码器</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>第一次上机</title>
    <link href="/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/"/>
    <url>/2024/09/23/%E7%AC%AC%E4%B8%80%E6%AC%A1%E4%B8%8A%E6%9C%BA/</url>
    
    <content type="html"><![CDATA[<h2 id="section">1</h2><blockquote><p>搭建一个能处理三个输入指令的电路</p></blockquote><table><thead><tr class="header"><th>00</th><th>输出0</th></tr></thead><tbody><tr class="odd"><td>01</td><td>输出上一次输出+1(<span class="math inline">\(a_n=a_{n-1}+1\)</span>)</td></tr><tr class="even"><td>10</td><td>输出之前输出之和(<span class="math inline">\(a_n=\mathop\Sigma\limits^{n-1}_{i=0}a_i\)</span>)</td></tr></tbody></table><figure><img src="image-20240923220646182.png" alt="image-20240923220646182"><figcaption aria-hidden="true">image-20240923220646182</figcaption></figure><figure><img src="image-20240923220711838.png" alt="image-20240923220711838"><figcaption aria-hidden="true">image-20240923220711838</figcaption></figure><h2 id="section-1">2</h2><blockquote><p>向量相乘</p></blockquote><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct(<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_a,<br>    <span class="hljs-keyword">input</span> [<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] vector_b,<br>    <span class="hljs-keyword">output</span> <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out<br>    );<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] t;<br>    <span class="hljs-keyword">integer</span> i;<br>    <span class="hljs-keyword">always</span> @(vector_a <span class="hljs-keyword">or</span> vector_b)<span class="hljs-keyword">begin</span><br>      t = <span class="hljs-number">5&#x27;b0</span>;<br>      <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">32</span>; i=i+<span class="hljs-number">1</span>)<span class="hljs-keyword">begin</span><br>        t = t + (vector_a[i] * vector_b[i]);<br>      <span class="hljs-keyword">end</span><br>      out = t;<br>    <span class="hljs-keyword">end</span><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><figure class="highlight verilog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs verilog"><span class="hljs-keyword">module</span> dotProduct_tb();<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] a;<br>    <span class="hljs-keyword">reg</span>[<span class="hljs-number">31</span>:<span class="hljs-number">0</span>] b;<br>    <span class="hljs-keyword">wire</span>[<span class="hljs-number">4</span>:<span class="hljs-number">0</span>] out;<br><br>    <span class="hljs-keyword">initial</span> <span class="hljs-keyword">begin</span><br>      a=<span class="hljs-number">32&#x27;b0</span>;<br>      b=<span class="hljs-number">32&#x27;b0</span>;<br>      #<span class="hljs-number">100</span><br>      a=<span class="hljs-number">32&#x27;d10</span>;<br>      b=<span class="hljs-number">32&#x27;d10</span>;<br>    <span class="hljs-keyword">end</span><br>    dotProduct uvv(<span class="hljs-variable">.vector_a</span>(a), <span class="hljs-variable">.vector_b</span>(b), <span class="hljs-variable">.out</span>(out));<br><br><span class="hljs-keyword">endmodule</span><br></code></pre></td></tr></table></figure><h2 id="section-2">3</h2><blockquote><p>MIPS求数组中最长连续递增子数组</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">// C语言示例代码</span><br><span class="hljs-meta">#<span class="hljs-keyword">include</span> <span class="hljs-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">int</span> n;<br>    <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;n);<br>    <span class="hljs-type">int</span> max = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> len = <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span> last=<span class="hljs-number">-1</span>, curr;<br>    <span class="hljs-keyword">while</span> (n--)&#123;<br>        <span class="hljs-built_in">scanf</span>(<span class="hljs-string">&quot;%d&quot;</span>, &amp;curr);<br>        <span class="hljs-keyword">if</span> (curr &gt; last)&#123;<br>            len += <span class="hljs-number">1</span>;<br>            max = len &gt; max ? len : max;<br>        &#125;<span class="hljs-keyword">else</span> &#123;<br>            len = <span class="hljs-number">1</span>;<br>        &#125;<br>        last = curr;<br>    &#125;<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;%d&quot;</span>, max);<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.eqv n, $s0<br>.eqv max, $s1<br>.eqv len, $s2<br>.eqv curr, $s3<br>.eqv last, $s4<br><br>.macro printInt(%int)<br>move $a0, %int<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.macro inputInt(%int)<br>li $v0, 5<br>syscall<br>move %int, $v0<br>.end_macro<br><br>.macro forLoop(%ct,%n,%startLabel,%endLabel)<br>%startLabel:<br>beq %ct, %n, %endLabel<br>.end_macro<br><br>.macro forEnd(%ct,%startLabel,%endLabel)<br>addi %ct, %ct, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br><br>li last, -1<br>li $t0, 0<br>inputInt(n)<br>forLoop($t0,n,start,end)<br>inputInt(curr)<br>ble curr, last, less<br>add len, len, 1<br>bge max, len, skip<br>move max, len<br>skip:<br>j tail<br>less:<br>li len, 1<br>tail:<br>move last, curr<br>forEnd($t0,start,end)<br><br>printInt(max)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MIPS</title>
    <link href="/2024/09/23/MIPS/"/>
    <url>/2024/09/23/MIPS/</url>
    
    <content type="html"><![CDATA[<h2 id="数据声明">数据声明</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data <br>pi:.double 3.145926<br>str:.asciiz &quot;hello, world\n&quot;<br>i:.word 3 <br>array1:.byte &#x27;a&#x27;,&#x27;b&#x27;#声明一个存储2个字符的数组<br>array2:.space 40#声明一个存放40字节的空间<br></code></pre></td></tr></table></figure><h2 id="基本运算">基本运算</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs assembly">sub$t2,$t3,$t4#  $t2 = $t3 - $t4<br>addi$t2,$t3, 5#  $t2 = $t3 + 5;   &quot;add immediate&quot; (no sub immediate)<br>addu$t1,$t6,$t7#  $t1 = $t6 + $t7;   add as unsigned integers<br>subu$t1,$t6,$t7#  $t1 = $t6 + $t7;   subtract as unsigned integers<br><br>mult$t3,$t4#  multiply 32-bit quantities in $t3 and $t4, and store 64-bit<br>#  result in special registers Lo and Hi:  (Hi,Lo) = $t3 * $t4<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 运算结果存储在hi,lo（hi高位数据， lo地位数据）<br>div$t5,$t6#  Lo = $t5 / $t6   (integer quotient)<br>#  Hi = $t5 mod $t6   (remainder)<br>　　　　　　　　　　　　　　　　　　　　　　　　　# 商数存放在 lo, 余数存放在 hi<br>mfhi$t0#  move quantity in special register Hi to $t0:   $t0 = Hi<br># 不能直接获取 hi 或 lo中的值， 需要mfhi, mflo指令传值给寄存器<br>mflo$t1#  move quantity in special register Lo to $t1:   $t1 = Lo<br>#  used to get at result of product or quotient<br><br>move$t2,$t3#  $t2 = $t3<br></code></pre></td></tr></table></figure><h2 id="syscall">Syscall</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.data<br>myFloat:.float 123.456<br>pi:.double 3.1415926<br>zeroDouble:.double 0<br>enter:.asciiz &quot;\n&quot;<br>i:.word 3<br>.macro ent<br>li $v0, 4<br>la $a0, enter<br>syscall<br>.end_macro<br><br>.macro done<br>li $v0, 10<br>syscall<br>.end_macro <br><br>.macro writeInt(%k)<br>move $a0, %k<br>li $v0, 1<br>syscall<br>.end_macro <br><br>.text<br>#print integer<br>li $v0, 1<br>li $a0, 12<br>syscall<br><br>ent<br>#print float<br>li $v0, 2<br>ldc1 $f12, myFloat<br>syscall<br><br>ent<br>#print double<br>li $v0,3<br>ldc1 $f2, pi<br>ldc1 $f0, zeroDouble<br>add.d $f12, $f2, $f0<br>syscall<br><br>ent<br>#use macro as a write function<br>li $t0, 4<br>writeInt($t0)<br><br>ent<br>#read and then print integer<br>li $v0, 5<br>syscall<br>add $a0, $0, $v0<br>li $v0, 1<br>syscall<br><br>ent<br>#read string<br>li $v0, 8<br>li $a1, 100<br>syscall<br>li $v0, 4<br>syscall<br></code></pre></td></tr></table></figure><h2 id="macro">macro</h2><blockquote><p>宏</p></blockquote><h3 id="堆栈">堆栈</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">#放入堆栈<br>.macro push(%i)<br>addi $sp, $sp, -4<br>sw %i, 0($sp)<br>.end_macro<br>#从堆栈中取出<br>.macro pop(%i)<br>lw %i, 0($sp)<br>addi $sp, $sp, 4<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环从0到n">for循环(从0到n)</h3><blockquote><p>C语言:</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %n)<br>li $t7, 0<br>%startLabel:<br>bge $t7, %n, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="for循环从low到high">for循环(从low到high)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i = low; i &lt; high; i++)&#123;<br>    <span class="hljs-comment">// body, 循环high-low次</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro for_begin(%startLabel, %endLabel, %low, %high)<br>move $t7, %low<br>%startLabel:<br>bge $t7, %high, %endLabel<br>.end_macro<br><br>.macro for_end(%startLabel, %endLabel)<br>addi $t7, $t7, 1<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure><h3 id="while循环两数比较">while循环(两数比较)</h3><blockquote><p>C</p></blockquote><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs C"><span class="hljs-keyword">while</span> (num1 &lt; num2)&#123;<br>    <span class="hljs-comment">// body</span><br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>MIPS</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.macro while_begin(%startLabel, %endLabel, %num1, %num2)<br>%startLabel:<br>bge %num1, %num2, %endLabel<br>.end_macro<br><br>.macro while_end(%startLabel, %endLabel)<br>j %startLabel<br>%endLabel:<br>.end_macro<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Commitizen的使用</title>
    <link href="/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <url>/2024/09/22/Commitizen%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<h1 id="commitizen的使用">Commitizen的使用</h1><h2 id="安装">安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">cnpm install -g commitizen<br></code></pre></td></tr></table></figure><h2 id="初始化">初始化</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">commitizen init cz-conventional-changelog --save-dev --save-exact<br></code></pre></td></tr></table></figure><h2 id="使用方式">使用方式</h2><p>用以下指令代替git commit</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">git cz</span><br></code></pre></td></tr></table></figure><h3 id="选择提交类型">选择提交类型</h3><figure class="highlight vbnet"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vbnet"><span class="hljs-symbol">feat:</span> A <span class="hljs-built_in">new</span> feature<br><span class="hljs-symbol">fix:</span> A bug fix<br><span class="hljs-symbol">docs:</span> Documentation only changes<br><span class="hljs-symbol">style:</span> Changes that <span class="hljs-keyword">do</span> <span class="hljs-built_in">not</span> affect the meaning <span class="hljs-keyword">of</span> the code<br><span class="hljs-symbol">refactor:</span> A code change that neither fixes a bug nor adds a feature<br><span class="hljs-symbol">perf:</span> A code change that improves performance<br><span class="hljs-keyword">Select</span> the type <span class="hljs-keyword">of</span> change that you<span class="hljs-comment">&#x27;re commiting:</span><br></code></pre></td></tr></table></figure><h3 id="提交范围">提交范围</h3><figure class="highlight d"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs d">What <span class="hljs-keyword">is</span> the <span class="hljs-keyword">scope</span> of <span class="hljs-keyword">this</span> change:<br></code></pre></td></tr></table></figure><p>通过回车键跳过,通过输入|换行</p><h3 id="简短描述">简短描述</h3><h3 id="详细描述">详细描述</h3><h3 id="破坏性变更">破坏性变更</h3><p>破坏性变更:本次提交会影响到其它部分的功能与之前的版本不兼容</p><h3 id="解决问题">解决问题</h3><p>本次提交是否解决了某个Issue</p>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Git指令</title>
    <link href="/2024/09/22/Git%E6%8C%87%E4%BB%A4/"/>
    <url>/2024/09/22/Git%E6%8C%87%E4%BB%A4/</url>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git config --global user.name <span class="hljs-string">&quot;&quot;</span><br>git config --global user.email <br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git init<br>git add *.c<br>git commit -m <span class="hljs-string">&quot;message&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/libgit2/libgit2 mylibgit<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git status<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git diff<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">log</span> -p -2<br><span class="hljs-comment"># -p代表显示每次提交的内容差异,-2表示仅显示最近两次的提交</span><br>git <span class="hljs-built_in">log</span> -<span class="hljs-built_in">stat</span><br><span class="hljs-comment">#统计数据</span><br>git <span class="hljs-built_in">log</span> --pretty=oneline<br>git <span class="hljs-built_in">log</span> --pretty=format:<span class="hljs-string">&quot;%h - %an, %ar : %s&quot;</span><br>git <span class="hljs-built_in">log</span> --since =2.weeks<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git commit -amend<br><span class="hljs-comment">#撤销</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git reset HEAD CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -- CONTRIBUTING.md<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs bash">git remote -v<br><span class="hljs-comment">#查看远程仓库</span><br>git remote add pb https://...<br><span class="hljs-comment"># pb是简写</span><br>git fetch [remote-name]<br><br>git push origin master<br><br>git show<br><br>git remote rename pb paul<br><span class="hljs-comment"># 重命名</span><br>git remote <span class="hljs-built_in">rm</span> paul<br><span class="hljs-comment"># 删除</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs bash">git tag<br><span class="hljs-comment"># 列出标签</span><br>git tag v1.4 -m <span class="hljs-string">&quot;my version 1.4&quot;</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout -b iss53<br><span class="hljs-comment">#创建并切换到分支</span><br>git branch -d hotfix<br><span class="hljs-comment">#删除</span><br>git branch --merged<br>git branch --no-merged<br>git merge A.txt<br><span class="hljs-comment">#合并</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin serverfix<br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch origin<br><span class="hljs-comment">#从服务器上抓取数据</span><br>git checkout --track origin/serverfix<br>git checkout -b sf origin/serverfix<br><span class="hljs-comment"># 拉取分支,sf是自定义名</span><br>git branch -vv<br><span class="hljs-comment">#查看追踪分支</span><br>git branch -u orgin.serverfix<br><span class="hljs-comment"># 设置已有的本地分支跟踪一个刚刚拉取下来的远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git fetch<br><span class="hljs-comment"># 从服务器上抓取本地没有的数据</span><br>git pull<br><span class="hljs-comment"># 含义是git fetch + git merge</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git push origin --delete serverfix<br><span class="hljs-comment"># 删除远程分支</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git rebase master<br><span class="hljs-comment"># 将当前分支变基到master分支上</span><br></code></pre></td></tr></table></figure><figure><img src="image-20240919142734429.png" alt="image-20240919142734429"><figcaption aria-hidden="true">image-20240919142734429</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">git checkout feature<br>git rebase master<br></code></pre></td></tr></table></figure><figure><img src="image-20240919142743629.png" alt="image-20240919142743629"><figcaption aria-hidden="true">image-20240919142743629</figcaption></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> /opt/git/project.git<br>git <span class="hljs-built_in">clone</span> file:///opt/git/project.git<br>git remote add local_proj /opt/git/project.git<br><span class="hljs-comment"># 增加本地版本库到现有的Git项目</span><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash">scp -r test.git meteor041@github.com:meteor041/test.git<br><br></code></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> ~./ssh<br><span class="hljs-built_in">ls</span><br><span class="hljs-comment"># 查看密钥</span><br>ssh-keygen<br><span class="hljs-comment"># chuang&#x27;jian</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>OOPre</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>力扣周赛415(字典树,KMP)</title>
    <link href="/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/"/>
    <url>/2024/09/22/%E5%8A%9B%E6%89%A3%E5%91%A8%E8%B5%9B415/</url>
    
    <content type="html"><![CDATA[<h1 id="力扣周赛415">力扣周赛415</h1><h2 id="t3">T3</h2><blockquote><p>T3数据量较小,可以使用字典树进行查找,由于可以查找前缀,将用于标记字符串结尾的EndNode删去,并将查找方法的返回值改为int类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">26</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q=newNode;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-type">int</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> ans;<br>            &#125;<br>            ans++;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trietree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String s : words)&#123;<br>            trietree.insert(s);<br>            maxLen = Math.max(maxLen, s.length());<br>        &#125;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">currRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">step</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; target.length(); i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> i;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(i + maxLen, target.length());<br>            nextRight = Math.max(nextRight, left + trietree.search(target.substring(left,right)));<br>            <span class="hljs-keyword">if</span> (currRight == i)&#123;<br>                <span class="hljs-keyword">if</span> (nextRight == currRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                <span class="hljs-keyword">else</span>&#123;<br>                    currRight = nextRight;<br>                &#125;<br>                step++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> step;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="附字典树模板">附:字典树模板</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Node</span>&#123;<br>    <span class="hljs-type">char</span> ch;<br>    Node[] children = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>[<span class="hljs-number">27</span>];<br>    Node()&#123;&#125;<br>    Node(<span class="hljs-type">char</span> ch)&#123;<br>        <span class="hljs-built_in">this</span>.ch = ch;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">EndNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Node</span>&#123;<br>    EndNode()&#123;&#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">TrieTree</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">Node</span> <span class="hljs-variable">root</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>();<br><br>    <span class="hljs-keyword">void</span> <span class="hljs-title function_">insert</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    q = child;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-type">Node</span> <span class="hljs-variable">newNode</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Node</span>(c);<br>                q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>] = newNode;<br>                q = q.children[c - <span class="hljs-string">&#x27;a&#x27;</span>];<br>            &#125;<br>        &#125;<br>        q.children[<span class="hljs-number">26</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">EndNode</span>();<br>    &#125;<br><br>    <span class="hljs-type">boolean</span> <span class="hljs-title function_">search</span><span class="hljs-params">(String s)</span>&#123;<br>        <span class="hljs-type">Node</span> <span class="hljs-variable">q</span> <span class="hljs-operator">=</span> root;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">char</span> c : s.toCharArray())&#123;<br>            <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">false</span>;<br>            <span class="hljs-keyword">for</span> (Node child : q.children)&#123;<br>                <span class="hljs-keyword">if</span> (child == <span class="hljs-literal">null</span>)&#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (child.ch == c)&#123;<br>                    flag = <span class="hljs-literal">true</span>;<br>                    q = child;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!flag)&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> q.children[<span class="hljs-number">26</span>] != <span class="hljs-literal">null</span>;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">TrieTree</span> <span class="hljs-variable">trieTree</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">TrieTree</span>();<br>        trieTree.insert(<span class="hljs-string">&quot;abcde&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcd&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;fjklnhmasdjk&quot;</span>);<br>        trieTree.insert(<span class="hljs-string">&quot;abcdef&quot;</span>);<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abc&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcde&quot;</span>));<br>        System.out.println(trieTree.search(<span class="hljs-string">&quot;abcdef&quot;</span>));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="t4">T4</h2><blockquote><p>字符串哈希</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">MOD</span> <span class="hljs-operator">=</span> <span class="hljs-number">1_070_777_777</span>;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">minValidStrings</span><span class="hljs-params">(String[] words, String target)</span> &#123;<br>        <span class="hljs-type">char</span>[] t = target.toCharArray();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> t.length;<br><br>        <span class="hljs-keyword">final</span> <span class="hljs-type">int</span> <span class="hljs-variable">BASE</span> <span class="hljs-operator">=</span> (<span class="hljs-type">int</span>)<span class="hljs-number">8e8</span> + <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>().nextInt((<span class="hljs-type">int</span>) <span class="hljs-number">1e8</span>);<br>        <span class="hljs-type">int</span>[] powBase = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        <span class="hljs-type">int</span>[] preHash = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n+<span class="hljs-number">1</span>];<br>        powBase[<span class="hljs-number">0</span>] = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            powBase[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)((<span class="hljs-type">long</span>) powBase[i] * BASE % MOD);<br>            preHash[i+<span class="hljs-number">1</span>] = (<span class="hljs-type">int</span>)(((<span class="hljs-type">long</span>) preHash[i] * BASE + t[i]) % MOD);<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">maxLen</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            maxLen = Math.max(maxLen, w.length());<br>        &#125;<br>        Set&lt;Integer&gt;[] sets = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxLen];<br>        Arrays.setAll(sets, i -&gt; <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;&gt;());<br>        <span class="hljs-keyword">for</span> (String w : words)&#123;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">h</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; w.length(); j++)&#123;<br>                h = (h * BASE + w.charAt(j)) % MOD;<br>                sets[j].add((<span class="hljs-type">int</span>) h);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-type">int</span> <span class="hljs-variable">ans</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">curRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">nextRight</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">sz</span> <span class="hljs-operator">=</span> calcSz(i, preHash, powBase, sets);<br>            nextRight = Math.max(nextRight, i+sz);<br>            <span class="hljs-keyword">if</span> (i == curRight)&#123;<br>                <span class="hljs-keyword">if</span> (i == nextRight)&#123;<br>                    <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>                &#125;<br>                curRight = nextRight;<br>                ans++;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-title function_">calcSz</span><span class="hljs-params">(<span class="hljs-type">int</span> i, <span class="hljs-type">int</span>[] preHash, <span class="hljs-type">int</span>[] powBase, Set&lt;Integer&gt;[] sets)</span>&#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">left</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">right</span> <span class="hljs-operator">=</span> Math.min(preHash.length - <span class="hljs-number">1</span> - i, sets.length) + <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">while</span> (left + <span class="hljs-number">1</span> &lt; right)&#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">mid</span> <span class="hljs-operator">=</span> (left + right) &gt;&gt;&gt; <span class="hljs-number">1</span>;<br>            <span class="hljs-type">long</span> <span class="hljs-variable">subHash</span> <span class="hljs-operator">=</span> ( ((<span class="hljs-type">long</span>) preHash[i + mid] - (<span class="hljs-type">long</span>) preHash[i] * powBase[mid]) % MOD + MOD) % MOD;<br>            <span class="hljs-keyword">if</span> (sets[mid-<span class="hljs-number">1</span>].contains((<span class="hljs-type">int</span>) subHash))&#123;<br>                left = mid;<br>            &#125;<br>            <span class="hljs-keyword">else</span>&#123;<br>                right = mid;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> left;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="ac自动机">AC自动机</h2><h3 id="前缀函数">前缀函数</h3><h4 id="计算方式">计算方式</h4><blockquote><p>计算字符串前k位多少位前缀和与后缀和相等,如"abcabcd":[0,0,0,1,2,3,0]</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(<span class="hljs-type">int</span>[] arr) &#123;<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[arr.length];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; arr.length; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> i / <span class="hljs-number">2</span> + <span class="hljs-number">1</span>; j &lt;= i; j++) &#123;<br>                <span class="hljs-type">boolean</span> <span class="hljs-variable">flag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br>                <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, p = j;<br>                <span class="hljs-keyword">while</span> (p &lt;= i) &#123;<br>                    <span class="hljs-keyword">if</span> (arr[k++] != arr[p++]) &#123;<br>                        flag = <span class="hljs-literal">false</span>;<br>                        <span class="hljs-keyword">break</span>;<br>                    &#125;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (flag) &#123;<br>                    ret[i] = k;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">int</span>[] arr = &#123;<span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>&#125;;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(arr)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="优化">优化</h4><blockquote><p>对于<span class="math inline">\(ret[k](k&gt;1)\)</span>,它只可能比<span class="math inline">\(ret[k-1]\)</span>多1,或者维持不变或减少,这里我们改为字符串输入,并使用subString()和equals()方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>] + <span class="hljs-number">1</span>; j &gt;= <span class="hljs-number">0</span>; j--) &#123;<br>                <span class="hljs-keyword">if</span> (s.substring(<span class="hljs-number">0</span>, j).equals(s.substring(i-j+<span class="hljs-number">1</span>, i+<span class="hljs-number">1</span>))) &#123;<br>                    ret[i] = j;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcd&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="最终算法">最终算法</h4><blockquote><p>考虑当<span class="math inline">\(s[i+1] \neqs[ret[i]]\)</span>时如何跳转,令j为<span class="math inline">\(s[i+1]\neq s[ret[i]]\)</span>时选择的第二长度</p><p>状态转移:<span class="math inline">\(j^{(n)}=\pi[j^{(n-1)}-1]\)</span></p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">PrefixCount</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] prefixCount(String s) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">n</span> <span class="hljs-operator">=</span> s.length();<br>        <span class="hljs-type">int</span>[] ret = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[n];<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> ret[i-<span class="hljs-number">1</span>];<br>            <span class="hljs-keyword">while</span> (j &gt; <span class="hljs-number">0</span> &amp;&amp; s.charAt(i) != s.charAt(j)) &#123;<br>                j = ret[j-<span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;<br>                j++;<br>            &#125;<br>            ret[i] = j;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ret;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;abcabcde&quot;</span>;<br>        System.out.println(Arrays.toString(<br>                <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(s)));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="kmp">KMP</h3><blockquote><p>Knuth-Morris-Pratt算法</p><p>给定一个文本text和字符串pattern,找到pattern在text中的所有出现</p><p>构造一个字符串:pattern+"#"+text,调用计算前缀函数的方法,获得结果数组,对于<span class="math inline">\(i&gt;pattern.length()\)</span>,若<span class="math inline">\(ret[i]==pattern.length()\)</span>,则可以判断在text中的第<span class="math inline">\(i-2\cdotpattern.length()\)</span>处出现pattern字符串</p><p>时间复杂度<span class="math inline">\(O(n+m)\)</span>,空间复杂度<span class="math inline">\(O(n+m)\)</span>(n,m分别为text,pattern的长度)</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">KMP</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;Integer&gt; <span class="hljs-title function_">search</span><span class="hljs-params">(String text, String pattern)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> pattern + <span class="hljs-string">&quot;#&quot;</span> + text;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz1</span> <span class="hljs-operator">=</span> text.length();<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sz2</span> <span class="hljs-operator">=</span> pattern.length();<br>        List&lt;Integer&gt; v = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;();<br>        <span class="hljs-type">int</span>[] lps = <span class="hljs-keyword">new</span> <span class="hljs-title class_">PrefixCount</span>().prefixCount(p);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> sz2 + <span class="hljs-number">1</span>; i &lt;= sz1 + sz2; i++) &#123;<br>            <span class="hljs-keyword">if</span> (lps[i] == sz2) &#123;<br>                v.add(i-<span class="hljs-number">2</span> * sz2);<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> v;<br>    &#125;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aab&quot;</span>;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">t</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;aabaabaabbcdaab&quot;</span>;<br>        System.out.println(<span class="hljs-keyword">new</span> <span class="hljs-title class_">KMP</span>().search(t, p));<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>算法</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>组合逻辑电路</title>
    <link href="/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/"/>
    <url>/2024/09/18/%E7%BB%84%E5%90%88%E9%80%BB%E8%BE%91%E7%94%B5%E8%B7%AF/</url>
    
    <content type="html"><![CDATA[<h2 id="二极管">二极管</h2><ul><li><p>一个PN结就是一只晶体二极管</p></li><li><p>正向导通:外加正向电压大于开启电压<span class="math inline">\(V_D\)</span>,二极管导通,<span class="math inline">\(U_D=V_D\)</span></p></li><li><p>反向截止:外加反向电压或电压小于开启电压<span class="math inline">\(V_D\)</span>,二极管截止,<span class="math inline">\(I_D=0\)</span></p></li><li><p>击穿:外加反向电压超过一个阈值<span class="math inline">\(V_Z\)</span>时,二极管会被击穿,压降是<span class="math inline">\(V_Z\)</span></p></li></ul><figure><img src="image-20240918174155826.png" alt="image-20240918174155826"><figcaption aria-hidden="true">image-20240918174155826</figcaption></figure><h2 id="晶体三极管">晶体三极管</h2><p>图为NPN型</p><figure><img src="image-20240918174330224.png" alt="image-20240918174330224"><figcaption aria-hidden="true">image-20240918174330224</figcaption></figure><figure><img src="image-20240918174340598.png" alt="image-20240918174340598"><figcaption aria-hidden="true">image-20240918174340598</figcaption></figure><h2 id="与门">与门</h2><figure><img src="image-20240923172530685.png" alt="image-20240923172530685"><figcaption aria-hidden="true">image-20240923172530685</figcaption></figure><h2 id="或门">或门</h2><figure><img src="image-20240923172555968.png" alt="image-20240923172555968"><figcaption aria-hidden="true">image-20240923172555968</figcaption></figure><h2 id="非门">非门</h2><figure><img src="image-20240923172709926.png" alt="image-20240923172709926"><figcaption aria-hidden="true">image-20240923172709926</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅲ</title>
    <link href="/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/"/>
    <url>/2024/09/12/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E8%AE%B0%E5%BD%95%E2%85%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期cpu记录ⅲaddi-j">构建单周期CPU记录Ⅲ(addi, j)</h1><h2 id="addi">addi</h2><p>对于addi,不需要新增器件,addi与add的不同,本质上是将其中一个寄存器换成了立即数.</p><p>比较两者的机器码</p><table><thead><tr class="header"><th><img src="image-20240912170401633.png" alt="add"></th></tr></thead><tbody><tr class="odd"><td><img src="image-20240912170419516.png" alt="addi"></td></tr></tbody></table><p>可以发现:</p><ul><li>rs不变</li><li>rt的作用从原来的提供加数,变为赋值地址</li><li>rd消失,立即数代替rt成为加数</li></ul><p>因此修改如下:</p><ul><li>A1端口不变,仍然连接Instr[25:21]</li><li>SrcB不再接收Instr[20:16]的值,而是立即数</li><li>A3端口不再接收Instr[15:11]的值,而是Instr[20:16]</li></ul><p>我们对ALUSrc,RegDst两个信号作出修改</p><h2 id="j">j</h2><p>对NXTAD(对下一个地址的计算器)做出修改,新增Jump信号</p><figure><img src="image-20240912172223432.png" alt="NXTAD(新增Jump信号)"><figcaption aria-hidden="true">NXTAD(新增Jump信号)</figcaption></figure><h1 id="整体">整体</h1><figure><img src="image-20240912172136927.png" alt="整体"><figcaption aria-hidden="true">整体</figcaption></figure><h1 id="附">附</h1><h2 id="信号表">信号表</h2><table><thead><tr class="header"><th>指令</th><th>RegWrite</th><th>MemWrite</th><th>ALUControl</th><th>RegDst</th><th>MemtoReg</th><th>ALUSrc</th><th>Branch</th><th>Jump</th><th></th></tr></thead><tbody><tr class="odd"><td>lw</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>1</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr class="even"><td>sw</td><td>0</td><td>1</td><td>010(加法)</td><td>X</td><td>X</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr class="odd"><td>beq</td><td>0</td><td>0</td><td>110(减法)</td><td>X</td><td>X</td><td>0</td><td>1</td><td>0</td><td></td></tr><tr class="even"><td>add</td><td>1</td><td>0</td><td>010(加法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr class="odd"><td>sub</td><td>1</td><td>0</td><td>110(减法)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr class="even"><td>and</td><td>1</td><td>0</td><td>000(与)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr class="odd"><td>or</td><td>1</td><td>0</td><td>001(或)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr class="even"><td>slt</td><td>1</td><td>0</td><td>111(小于置位)</td><td>1</td><td>0</td><td>0</td><td>0</td><td>0</td><td></td></tr><tr class="odd"><td>addi</td><td>1</td><td>0</td><td>010(加法)</td><td>0</td><td>0</td><td>1</td><td>0</td><td>0</td><td></td></tr><tr class="even"><td>j</td><td>0</td><td>0</td><td>XXX</td><td>X</td><td>X</td><td>X</td><td>X</td><td>1</td><td></td></tr><tr class="odd"><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="even"><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr><tr class="odd"><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td><td></td></tr></tbody></table>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java 泛型</title>
    <link href="/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/"/>
    <url>/2024/09/12/Java-%E6%B3%9B%E5%9E%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="泛型数组">泛型数组</h1><h2 id="创建">创建</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> classListOfGenerics&lt;T&gt; &#123;<br>    <span class="hljs-keyword">private</span> List&lt;T&gt; array = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;T&gt;();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">add</span><span class="hljs-params">(T item)</span> &#123; array.add(item)&#125;;<br>    <span class="hljs-keyword">public</span> T <span class="hljs-title function_">get</span><span class="hljs-params">(<span class="hljs-type">int</span> index)</span> &#123; <span class="hljs-keyword">return</span> array.get(index)&#125;;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>不能创建泛型数组,一般解决方案是在任何想要创建泛型数组的地方使用ArrayList</p></blockquote><h2 id="通配符">通配符</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Apple</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Banana</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Jonathan</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Apple</span> &#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">CovariantArrays</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        Fruit[] fruit = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>[<span class="hljs-number">10</span>];<br>        fruit[<span class="hljs-number">0</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Apple</span>();<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">1</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Banana</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>        <span class="hljs-keyword">try</span> &#123;<br>            fruit[<span class="hljs-number">2</span>] = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Fruit</span>();<br>        &#125;<span class="hljs-keyword">catch</span> (Exception e)&#123;<br>            System.out.println(e);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><blockquote><p>如果实际数组类型是Apple[],只能在其中放置Apple及其子类,若放入Fruit对象,会在运行时抛出异常</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">// incompatible types</span><br>List&lt;Fruit&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br></code></pre></td></tr></table></figure><blockquote><p>Apple的List与Fruit的List不同.即使Apple是Fruit的子类,两者在类型上也不等价.</p></blockquote><blockquote><p>使用通配符解决该问题</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;? <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Fruit</span>&gt; flist = <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;Apple&gt;();<br><span class="hljs-comment">// correct</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅱ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU%E2%85%A1-add-sub-and-or-slt-beq/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期cpu记录ⅱadd-sub-and-or-slt-beq">构建单周期CPU记录Ⅱ(add,sub, and, or, slt, beq)</h1><h2 id="新增信号">新增信号</h2><h3 id="regdst">RegDst</h3><p>1:从指令15:11位中读取数据到A3端口</p><p>0:从指令20:16位中读取数据到A3端口</p><h3 id="alusrc">ALUSrc</h3><ul><li>1:从EXT中读取符号扩展的立即数</li><li>0:从寄存器文件RD2端口中读取数据</li></ul><h3 id="memtoreg">MemtoReg</h3><ul><li>1:将从数据存储器中读取的数据输出到WD3</li><li>0:将从ALU中读取的数据输出到WD3</li></ul><h2 id="信号表">信号表</h2><table style="width:100%;"><thead><tr class="header"><th>指令</th><th>RegDst</th><th>ALUSrc</th><th>MemtoReg</th><th>ALUControl</th></tr></thead><tbody><tr class="odd"><td>R指令(add, sub, and, or, slt)</td><td>1</td><td>0</td><td>0</td><td>varies</td></tr><tr class="even"><td>lw,sw</td><td>0</td><td>1</td><td>1</td><td>010(+)</td></tr><tr class="odd"><td>beq</td><td>x</td><td>0</td><td>x</td><td>110(-)</td></tr><tr class="even"><td></td><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="alu">ALU</h3><table><thead><tr class="header"><th>ALUOp</th><th>含义</th><th>ALUOp</th><th>含义</th></tr></thead><tbody><tr class="odd"><td>00</td><td>加法</td><td>10</td><td>依赖于func</td></tr><tr class="even"><td>01</td><td>减法</td><td>11</td><td>无定义</td></tr></tbody></table><table><thead><tr class="header"><th>ALUOp</th><th>Funct</th><th>ALUControl</th></tr></thead><tbody><tr class="odd"><td>00</td><td>X</td><td>010(加)</td></tr><tr class="even"><td>X1</td><td>X</td><td>110(减)</td></tr><tr class="odd"><td>1X</td><td>100000(add)</td><td>010(加)</td></tr><tr class="even"><td>1X</td><td>100010(sub)</td><td>110(减)</td></tr><tr class="odd"><td>1X</td><td>100100(and)</td><td>000(与)</td></tr><tr class="even"><td>1X</td><td>100101(or)</td><td>001(或)</td></tr><tr class="odd"><td>1X</td><td>101010(slt)</td><td>111(小于置位)</td></tr></tbody></table><ul><li>这里引用图表来自黑皮书,采用两级判断(先判断ALUOp,再判断ALUControl值),这里我采用另一种方法,对于非R型指令直接输出ALUControl,对R型指令两级判断.(见后图CU)</li></ul><h3 id="add">add</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) +100000(add,5:0)</p><h3 id="sub">sub</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) +100010(sub,5:0)</p><h3 id="and">and</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) +100100(and,5:0)</p><h3 id="or">or</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) +100101(or, 5:0)</p><h3 id="slt">slt</h3><p>000000(31:26) + rs(25:21) + rt(20:16) + rd(15:11) + 00000(10:6) +101010(slt, 5:0)</p><h3 id="beq">beq</h3><p>000100(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><h2 id="更新组件">更新组件</h2><h3 id="alu-1">ALU</h3><figure><img src="image-20240911230937221.png" alt="ALU"><figcaption aria-hidden="true">ALU</figcaption></figure><h3 id="cu">CU</h3><figure><img src="image-20240911225650083.png" alt="CU"><figcaption aria-hidden="true">CU</figcaption></figure><h2 id="整体">整体</h2><figure><img src="image-20240911225716228.png" alt="整体"><figcaption aria-hidden="true">整体</figcaption></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>构建单周期CPU记录Ⅰ</title>
    <link href="/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/"/>
    <url>/2024/09/11/%E6%9E%84%E5%BB%BA%E5%8D%95%E5%91%A8%E6%9C%9FCPU-%E5%88%9D%E6%AD%A5-%E5%8C%85%E6%8B%AClw%E5%92%8Csw/</url>
    
    <content type="html"><![CDATA[<h1 id="构建单周期cpu记录ⅰ初步包括lw和sw">构建单周期CPU记录Ⅰ(初步,包括lw和sw)</h1><h2 id="核心部件">核心部件</h2><h3 id="pcprogram-counter程序计数器">PC(Program Counter,程序计数器)</h3><figure><img src="image-20240911170903742.png" alt="image-20240911170903742"><figcaption aria-hidden="true">image-20240911170903742</figcaption></figure><h3 id="iminstuction-memory指令存储器">IM(InstuctionMemory,指令存储器)</h3><figure><img src="image-20240911200511537.png" alt="image-20240911200511537"><figcaption aria-hidden="true">image-20240911200511537</figcaption></figure><h3 id="grfregister-file寄存器文件">GRF(Register File,寄存器文件)</h3><figure><img src="image-20240911200549683.png" alt="image-20240911200549683"><figcaption aria-hidden="true">image-20240911200549683</figcaption></figure><h3 id="dmdata-memory数据存储器">DM(Data Memory,数据存储器)</h3><figure><img src="image-20240911200524349.png" alt="image-20240911200524349"><figcaption aria-hidden="true">image-20240911200524349</figcaption></figure><h2 id="附加部件">附加部件</h2><h3 id="alu">ALU</h3><figure><img src="image-20240911200643385.png" alt="image-20240911200643385"><figcaption aria-hidden="true">image-20240911200643385</figcaption></figure><h3 id="spltsplitter分离器">SPLT(splitter,分离器)</h3><figure><img src="image-20240911200703680.png" alt="image-20240911200703680"><figcaption aria-hidden="true">image-20240911200703680</figcaption></figure><h3 id="extextender扩位器">EXT(extender,扩位器)</h3><figure><img src="image-20240911200729925.png" alt="image-20240911200729925"><figcaption aria-hidden="true">image-20240911200729925</figcaption></figure><h3 id="nxtadnext-address下一个地址的计算器">NXTAD(NextAddress,下一个地址的计算器)</h3><figure><img src="image-20240911200825778.png" alt="image-20240911200825778"><figcaption aria-hidden="true">image-20240911200825778</figcaption></figure><h2 id="信号控制分析">信号控制分析</h2><h3 id="信号表">信号表</h3><table><thead><tr class="header"><th>指令</th><th>RegWrite</th><th>ALUControl[2:0]</th><th>MemWrite</th></tr></thead><tbody><tr class="odd"><td>lw</td><td>1</td><td>010</td><td>0</td></tr><tr class="even"><td>sw</td><td>0</td><td>010</td><td>1</td></tr><tr class="odd"><td></td><td></td><td></td><td></td></tr><tr class="even"><td></td><td></td><td></td><td></td></tr></tbody></table><h3 id="信号说明">信号说明</h3><h4 id="regwrite">RegWrite</h4><ul><li><p>连接WE3端口</p></li><li><p>1:将数据写入寄存器</p></li><li><p>0:没有写入寄存器文件的数据</p></li></ul><h4 id="alucontrol">ALUControl</h4><ul><li>010:ALU实现加法</li></ul><h4 id="memwrite">MemWrite</h4><ul><li>1:向存储器写入数据</li><li>0:没有向存储器写入数据</li></ul><h3 id="cu">CU</h3><p>据此,我们可以搭建一个初步的信号控制</p><p>lw:100011(31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><p>sw:101011 (31:26) + rs(25:21) + rt(20:16) + offset(15:0)</p><figure><img src="image-20240911203252095.png" alt="image-20240911203252095"><figcaption aria-hidden="true">image-20240911203252095</figcaption></figure><h2 id="整体">整体</h2><figure><img src="image-20240911203327623.png" alt="image-20240911203327623"><figcaption aria-hidden="true">image-20240911203327623</figcaption></figure><h2 id="附">附</h2><h3 id="使用python批量构造代码">使用Python批量构造代码</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python">s =<span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;4\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Register\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(T_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(Y_,Z_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br>Y, Z = <span class="hljs-number">90</span>, <span class="hljs-number">30</span><br><span class="hljs-keyword">for</span> X <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">0</span>, <span class="hljs-number">32</span>):<br>    Y += <span class="hljs-number">80</span><br>    T = Y-<span class="hljs-number">30</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;Y_&quot;</span>,<span class="hljs-built_in">str</span>(Y)).replace(<span class="hljs-string">&quot;T_&quot;</span>, <span class="hljs-built_in">str</span>(T)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(X)).replace(<span class="hljs-string">&quot;Z_&quot;</span>,<span class="hljs-built_in">str</span>(Z)))<br><br><br><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs python">s = <span class="hljs-string">&quot;&quot;&quot;&lt;comp lib=\&quot;0\&quot; loc=\&quot;(80,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;facing\&quot; val=\&quot;east\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;iX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">    &lt;comp lib=\&quot;0\&quot; loc=\&quot;(130,H_)\&quot; name=\&quot;Tunnel\&quot;&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;width\&quot; val=\&quot;32\&quot;/&gt;</span><br><span class="hljs-string">      &lt;a name=\&quot;label\&quot; val=\&quot;oX_\&quot;/&gt;</span><br><span class="hljs-string">    &lt;/comp&gt;</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br>H = <span class="hljs-number">10</span><br><span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-number">32</span>):<br>    H += <span class="hljs-number">20</span><br>    <span class="hljs-built_in">print</span>(s.replace(<span class="hljs-string">&quot;H_&quot;</span>,<span class="hljs-built_in">str</span>(H)).replace(<span class="hljs-string">&quot;X_&quot;</span>,<span class="hljs-built_in">str</span>(x)))<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>CO</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java Array</title>
    <link href="/2024/09/11/Java-Array/"/>
    <url>/2024/09/11/Java-Array/</url>
    
    <content type="html"><![CDATA[<h1 id="数组">数组</h1><h2 id="创建方式">创建方式</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java">NewClass[] a;<br>NewClass[] b = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>[<span class="hljs-number">10</span>];<br>NewClass[] c = &#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br>NewClass[] p = <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>&#123;<span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>(), <span class="hljs-keyword">new</span> <span class="hljs-title class_">NewClass</span>()&#125;;<br></code></pre></td></tr></table></figure><h2 id="返回数组">返回数组</h2><ul><li>Java可以直接返回数组</li></ul><h2 id="多维数组">多维数组</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[][] b = &#123;<br>                &#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;,<br>                &#123;<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;,<br>&#125;;<br></code></pre></td></tr></table></figure><h2 id="arrays实用功能">Arrays实用功能</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Arrays;<br></code></pre></td></tr></table></figure><h3 id="fill">fill()</h3><blockquote><p>以单个元素填充数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] m1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">4</span>];<br>Arrays.fill(m1,<span class="hljs-number">1</span>);<br>System.out.println(Arrays.toString(m1));<br><span class="hljs-comment">// output: [1, 1, 1, 1]</span><br></code></pre></td></tr></table></figure><h3 id="sort">sort()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] s1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">9</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">34</span>,<span class="hljs-number">5</span>,<span class="hljs-number">2</span>,<span class="hljs-number">6</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>&#125;;<br>Arrays.sort(s1);<br>System.out.println(Arrays.toString(s1));<br><br><span class="hljs-comment">// [2, 5, 6, 7, 7, 8, 9, 10, 34]</span><br></code></pre></td></tr></table></figure><h3 id="equals-deepequals">equals() &amp; deepEquals()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] a1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br><span class="hljs-type">int</span>[] a2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">9</span>,<span class="hljs-number">10086</span>&#125;;<br>System.out.println(Arrays.equals(a1,a2));<br><span class="hljs-comment">// true</span><br><span class="hljs-type">int</span>[][] deep1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br><span class="hljs-type">int</span>[][] deep2 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.deepEquals(deep1, deep2));<br><span class="hljs-comment">// true</span><br></code></pre></td></tr></table></figure><h3 id="copyof-copyofrange">copyOf() &amp; copyOfRange()</h3><blockquote><p>复制数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">4</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">3</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8,9,7]</span><br><br><span class="hljs-type">int</span>[] org = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">8</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">721</span>&#125;;<br><span class="hljs-type">int</span>[] des = Arrays.copyOf(org,<span class="hljs-number">9</span>);<br>System.out.println(Arrays.toString(des));<br><span class="hljs-comment">// [8, 9, 7, 721, 0, 0, 0, 0, 0]</span><br></code></pre></td></tr></table></figure><h3 id="tostring-deeptostring">toString() &amp; deepToString()</h3><blockquote><p>方便打印数组</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] p1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>&#125;;<br><span class="hljs-type">int</span>[][] d1 = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[][]&#123;&#123;<span class="hljs-number">1</span>,<span class="hljs-number">2</span>&#125;,&#123;<span class="hljs-number">3</span>,<span class="hljs-number">4</span>&#125;,&#123;<span class="hljs-number">5</span>,<span class="hljs-number">6</span>&#125;&#125;;<br>System.out.println(Arrays.toString(p1));<br>System.out.println(Arrays.deepToString(d1));<br><span class="hljs-comment">// [1, 2, 3]</span><br><span class="hljs-comment">//[[1, 2], [3, 4], [5, 6]]</span><br></code></pre></td></tr></table></figure><h3 id="binarysearch">binarySearch()</h3><blockquote><p>二分法查找,类同于Python中的bisect.bisect_left()</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span>[] pos = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[]&#123;<span class="hljs-number">90</span>,<span class="hljs-number">8</span>,<span class="hljs-number">7</span>,<span class="hljs-number">1</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>,<span class="hljs-number">6</span>,<span class="hljs-number">76</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">78</span>,<span class="hljs-number">67</span>,<span class="hljs-number">54</span>,<span class="hljs-number">34</span>&#125;;<br>Arrays.sort(pos);<br>System.out.println(Arrays.toString(pos));<br>System.out.println(Arrays.binarySearch(pos,<span class="hljs-number">78</span>));<br><span class="hljs-comment">// [1, 3, 4, 5, 5, 6, 7, 8, 34, 54, 67, 76, 78, 90]</span><br><span class="hljs-comment">// 12</span><br></code></pre></td></tr></table></figure><h3 id="aslist">asList()</h3><blockquote><p>常用于声明对象组成的列表</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; l1 = Arrays.asList(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>);<br>System.out.println(l1);<br><span class="hljs-comment">// [1, 2, 3]</span><br>List&lt;Student&gt; l2 = Arrays.asList(<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaoming&quot;</span>,<span class="hljs-number">21</span>),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">Student</span>(<span class="hljs-string">&quot;xiaomei&quot;</span>,<span class="hljs-number">19</span>));<br>System.out.println(l2);<br><span class="hljs-comment">// [xiaoming 21, xiaomei 19]</span><br></code></pre></td></tr></table></figure><h3 id="setall">setAll()</h3><blockquote><p>使用提供的生成器函数设置指定数组的所有元素以计算每个元素</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">Set&lt;Integer&gt;[] s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>[maxlen];<br>Arrays.setAll(s, i -&gt;<span class="hljs-keyword">new</span> <span class="hljs-title class_">HashSet</span>&lt;Integer&gt;());<br>s[<span class="hljs-number">0</span>].add(<span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Java String</title>
    <link href="/2024/09/11/Java-String/"/>
    <url>/2024/09/11/Java-String/</url>
    
    <content type="html"><![CDATA[<h1 id="字符串">字符串</h1><p><strong>String对象不可变</strong></p><p>(修改字符串的方法实质上是生成了一个新的String对象)</p><h2 id="stringbuilder">StringBuilder</h2><table><thead><tr class="header"><th>new StringBuilder(String s)</th><th>生成方法</th></tr></thead><tbody><tr class="odd"><td>append()</td><td>增加字符</td></tr><tr class="even"><td>deleteCharAt(int index)</td><td>删除指定索引的字符</td></tr><tr class="odd"><td>toString()</td><td>生成字符串</td></tr><tr class="even"><td>reverse()</td><td>逆转</td></tr><tr class="odd"><td>replace(int start, int end, String str)</td><td>替换</td></tr><tr class="even"><td>delete(int start, int end)</td><td>删除</td></tr><tr class="odd"><td>insert(int offset, String str)</td><td>插入</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>    <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>(<span class="hljs-string">&quot;[&quot;</span>);<br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>        result.append(rand.nextInt(<span class="hljs-number">100</span>));<br>        result.append(<span class="hljs-string">&quot;, &quot;</span>);<br>    &#125;<br>    result.delete(result.length()-<span class="hljs-number">2</span>, result.length());<br>    result.append(<span class="hljs-string">&quot;]&quot;</span>);<br>    <span class="hljs-keyword">return</span> result.toString();<br>&#125;<br></code></pre></td></tr></table></figure><h2 id="无意识递归">无意识递归</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">InfiniteRecursion</span>&#123;<br>    <span class="hljs-keyword">public</span> String <span class="hljs-title function_">toString</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">&quot; InfiniteRecursion address: &quot;</span> + <span class="hljs-built_in">this</span> + <span class="hljs-string">&quot;\n&quot;</span>;<br>    &#125;<br>    <br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        List&lt;InfiniteRecursion&gt; v = <br>            <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;InfiniteRecursion&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++)&#123;<br>            v.add(<span class="hljs-keyword">new</span> <span class="hljs-title class_">InfiniteRecursion</span>());<br>        &#125;<br>        System.out.println(v);<br>    &#125;<br>&#125;<br><span class="hljs-comment">// println(v)中调用了InfiniteRecursion类的toString方法,toString方法让this发生了自动类型转换,继续实现toString方法,就这样实现了无限递归.</span><br></code></pre></td></tr></table></figure><table><thead><tr class="header"><th>方法</th><th>参数,重载版本</th><th>应用</th></tr></thead><tbody><tr class="odd"><td>length()</td><td></td><td>字符个数</td></tr><tr class="even"><td>charAt()</td><td>Int索引</td><td>该缩影位置上的char</td></tr><tr class="odd"><td>getChar(),getBytes()</td><td></td><td>复制</td></tr><tr class="even"><td>toCharArray()</td><td></td><td>生成char[]</td></tr><tr class="odd"><td>equals(),equalsIgnoreCase()</td><td></td><td>比较字符串</td></tr><tr class="even"><td>compareTo()</td><td></td><td>按词典序比较字符串</td></tr></tbody></table><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> <span class="hljs-keyword">static</span> net.mindview.util.Print.print;<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">StringMethod</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s1</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;good,world&quot;</span>, s2=<span class="hljs-string">&quot;hello,world&quot;</span>;<br>        print(s1.regionMatches(<span class="hljs-number">5</span>,s2,<span class="hljs-number">6</span>,<span class="hljs-number">5</span>)); <span class="hljs-comment">//true</span><br>        print(s1.startsWith(<span class="hljs-string">&quot;g&quot;</span>)); <span class="hljs-comment">//true</span><br>        print(s1.endsWith(<span class="hljs-string">&quot;g&quot;</span>));<span class="hljs-comment">//false</span><br>        print(s1.length());<span class="hljs-comment">//10</span><br>        print(s1.charAt(<span class="hljs-number">0</span>));<br>        print(s1.compareTo(s2));<br>        <span class="hljs-type">String</span> <span class="hljs-variable">s3</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;zzz&quot;</span>, s4 = <span class="hljs-string">&quot;AAA&quot;</span>;<br>        print(s1.compareTo(s3));<br>        print(s1.compareToIgnoreCase(s4));<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="格式化说明符">格式化说明符</h2><table><thead><tr class="header"><th style="text-align: center;">类型转换字符</th><th></th><th style="text-align: center;"></th><th></th></tr></thead><tbody><tr class="odd"><td style="text-align: center;">d</td><td>十进制</td><td style="text-align: center;">e</td><td>浮点数(科学计数)</td></tr><tr class="even"><td style="text-align: center;">c</td><td>Unicode字符</td><td style="text-align: center;">x</td><td>十六进制</td></tr><tr class="odd"><td style="text-align: center;">b</td><td>Boolean</td><td style="text-align: center;">h</td><td>散列码</td></tr><tr class="even"><td style="text-align: center;">s</td><td>String</td><td style="text-align: center;">%</td><td>%</td></tr><tr class="odd"><td style="text-align: center;">f</td><td>浮点数</td><td style="text-align: center;"></td><td></td></tr></tbody></table><h2 id="正则表达式regular-expression">正则表达式(RegularExpression)</h2><h3 id="基础">基础</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs livescript">-?查找带负号的数<br><span class="hljs-string">\\d</span> 表示一位数字<br><span class="hljs-string">\\\\</span> 普通反斜线<br>-?<span class="hljs-string">\\d+</span><br>(-|<span class="hljs-string">\\+)?</span> 一个-或者一个+<br><span class="hljs-string">\\W</span> 非单词字符<br><span class="hljs-string">\\w</span> 单词字符<br><span class="hljs-string">\?</span> 问号<br></code></pre></td></tr></table></figure><h3 id="字符">字符</h3><table><thead><tr class="header"><th>B</th><th>指定字符</th></tr></thead><tbody><tr class="odd"><td></td><td>十六进制值为oxhh的字符</td></tr><tr class="even"><td></td><td>十六进制值为oxhhhh的字符</td></tr><tr class="odd"><td> Tab</td><td></td></tr><tr class="even"><td></td><td>换行符</td></tr><tr class="odd"><td> 回车</td><td></td></tr><tr class="even"><td> 换页</td><td></td></tr><tr class="odd"><td></td><td>转义</td></tr></tbody></table><h3 id="字符类">字符类</h3><table><thead><tr class="header"><th>.</th><th>任意字符</th></tr></thead><tbody><tr class="odd"><td>[abc]</td><td>a|b|c</td></tr><tr class="even"><td>[^abc]</td><td>否定</td></tr><tr class="odd"><td>[a-zA-Z]</td><td>a-z,A-Z范围</td></tr><tr class="even"><td>[abc[hij]]</td><td>a|b|c|h|i|j</td></tr><tr class="odd"><td>[a-z&amp;&amp;[hij]]</td><td>h|i|j</td></tr><tr class="even"><td></td><td>空白符</td></tr><tr class="odd"><td></td><td>非空白符</td></tr><tr class="even"><td> 数字</td><td></td></tr><tr class="odd"><td></td><td>非数字</td></tr><tr class="even"><td></td><td>词字符</td></tr><tr class="odd"><td></td><td>非词字符</td></tr></tbody></table><h3 id="边界匹配符">边界匹配符</h3><table><thead><tr class="header"><th>^</th><th>一行的起始</th></tr></thead><tbody><tr class="odd"><td>$</td><td>一行的结束</td></tr><tr class="even"><td> 词的边界</td><td></td></tr><tr class="odd"><td></td><td>非词的边界</td></tr><tr class="even"><td> 前一个匹配的结束</td><td></td></tr></tbody></table><h3 id="量词">量词</h3><ul><li>贪婪型:尽可能多的匹配</li><li>勉强型:匹配最少的字数</li><li>占有型:防止回溯,java中才有</li></ul><table><thead><tr class="header"><th>贪婪型</th><th>勉强型</th><th>占有型</th><th>符合匹配</th></tr></thead><tbody><tr class="odd"><td>X?</td><td>X??</td><td>X?+</td><td>一个或零个X</td></tr><tr class="even"><td>X*</td><td>X*?</td><td>X*+</td><td>零个或多个X</td></tr><tr class="odd"><td>X+</td><td>X+?</td><td>X++</td><td>一个或多个X</td></tr><tr class="even"><td>X{n}</td><td>X{n}?</td><td>X{n}+</td><td>恰好n次X</td></tr><tr class="odd"><td>X{n,m}</td><td>X{n,m}?</td><td>X{n,m}+</td><td>X至少n次,且不超过m次</td></tr></tbody></table><h3 id="pattern.compile">Pattern.compile()</h3><p>编译正则表达式</p><h3 id="pattern.matcher">Pattern.matcher()</h3><p>生成Matcher对象</p><h3 id="matcher.matches">Matcher.matches()</h3><p>判断整个输入字符串是否匹配正则表达式模式</p><h3 id="matcher.findmatcher.findint-i">Matcher.find()/Matcher.find(inti)</h3><p>查找(int i可以指定起始位置)</p><h3 id="pattern标记">Pattern标记</h3><table><thead><tr class="header"><th>编译标记</th><th>效果</th></tr></thead><tbody><tr class="odd"><td>Pattern.CANON_EQ</td><td>规范的等价性</td></tr><tr class="even"><td>Pattern.CASE_INSENSITIVE(?i)</td><td>大小写不敏感</td></tr><tr class="odd"><td>Pattern.COMMENTS(?x)</td><td>忽略空格符,注释</td></tr><tr class="even"><td>Pattern.DOTALL(?x)</td><td>"."匹配所有字符,包括行终结符</td></tr><tr class="odd"><td>Pattern.MULTILINE(?m)</td><td>^,<span class="math inline">\(匹配一行的开始和结束      || Pattern.UNICODE_CASE(?u)     | 大小写不敏感按照Unicode标准  || Pattern.UNIX_LINES(?d)       | .,^,\)</span>均只识别行终结符</td></tr></tbody></table><h2 id="scanner">Scanner</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Scanner</span> <span class="hljs-variable">stdin</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(SimpleRead.input);<br><span class="hljs-type">String</span> <span class="hljs-variable">name</span> <span class="hljs-operator">=</span> stdin.nextLine();<br><span class="hljs-type">int</span> <span class="hljs-variable">age</span> <span class="hljs-operator">=</span> stdin.nextInt();<br><span class="hljs-type">double</span> <span class="hljs-variable">favourite</span> <span class="hljs-operator">=</span> stdin.nextDouble();<br></code></pre></td></tr></table></figure><ul><li>Scanner的构造器可以接受任何类型的输入对象,包括File对象,InputStream对象,String或Readable对象.</li></ul><h3 id="usedelimiter">useDelimiter()</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.*;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ScannerDelimiter</span>&#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span>&#123;<br>        <span class="hljs-type">Scanner</span> <span class="hljs-variable">scanner</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Scanner</span>(<span class="hljs-string">&quot;12, 42, 12&quot;</span>);<br>        scanner.useDelimiter(<span class="hljs-string">&quot;\\s*,\\s*&quot;</span>);<br>        <span class="hljs-keyword">while</span> (scanner.hasNextInt())&#123;<br>            System.out.println(scanner.nextInt());<br>        &#125;<br>    &#125;<br>&#125;<br><span class="hljs-comment">/*out:</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">42</span><br><span class="hljs-comment">12</span><br><span class="hljs-comment">*/</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>Java</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2024/09/11/hello-world/"/>
    <url>/2024/09/11/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your veryfirst post. Check <a href="https://hexo.io/docs/">documentation</a> formore info. If you get any problems when using Hexo, you can find theanswer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> oryou can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start">Quick Start</h2><h3 id="create-a-new-post">Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server">Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files">Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites">Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
